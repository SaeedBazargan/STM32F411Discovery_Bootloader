
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e84  080201a0  080201a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08023024  08023024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023090  08023090  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08023090  08023090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023098  08023098  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023098  08023098  00004098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802309c  0802309c  0000409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080230a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08023108  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08023108  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078bc  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001575  00000000  00000000  0000c954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000539  00000000  00000000  0000e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016256  00000000  00000000  0000eaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087a2  00000000  00000000  00024d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874c7  00000000  00000000  0002d4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b49b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  000b49f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000b6c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201a0 <__do_global_dtors_aux>:
 80201a0:	b510      	push	{r4, lr}
 80201a2:	4c05      	ldr	r4, [pc, #20]	@ (80201b8 <__do_global_dtors_aux+0x18>)
 80201a4:	7823      	ldrb	r3, [r4, #0]
 80201a6:	b933      	cbnz	r3, 80201b6 <__do_global_dtors_aux+0x16>
 80201a8:	4b04      	ldr	r3, [pc, #16]	@ (80201bc <__do_global_dtors_aux+0x1c>)
 80201aa:	b113      	cbz	r3, 80201b2 <__do_global_dtors_aux+0x12>
 80201ac:	4804      	ldr	r0, [pc, #16]	@ (80201c0 <__do_global_dtors_aux+0x20>)
 80201ae:	f3af 8000 	nop.w
 80201b2:	2301      	movs	r3, #1
 80201b4:	7023      	strb	r3, [r4, #0]
 80201b6:	bd10      	pop	{r4, pc}
 80201b8:	20000068 	.word	0x20000068
 80201bc:	00000000 	.word	0x00000000
 80201c0:	0802300c 	.word	0x0802300c

080201c4 <frame_dummy>:
 80201c4:	b508      	push	{r3, lr}
 80201c6:	4b03      	ldr	r3, [pc, #12]	@ (80201d4 <frame_dummy+0x10>)
 80201c8:	b11b      	cbz	r3, 80201d2 <frame_dummy+0xe>
 80201ca:	4903      	ldr	r1, [pc, #12]	@ (80201d8 <frame_dummy+0x14>)
 80201cc:	4803      	ldr	r0, [pc, #12]	@ (80201dc <frame_dummy+0x18>)
 80201ce:	f3af 8000 	nop.w
 80201d2:	bd08      	pop	{r3, pc}
 80201d4:	00000000 	.word	0x00000000
 80201d8:	2000006c 	.word	0x2000006c
 80201dc:	0802300c 	.word	0x0802300c

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_uldivmod>:
 8020280:	b953      	cbnz	r3, 8020298 <__aeabi_uldivmod+0x18>
 8020282:	b94a      	cbnz	r2, 8020298 <__aeabi_uldivmod+0x18>
 8020284:	2900      	cmp	r1, #0
 8020286:	bf08      	it	eq
 8020288:	2800      	cmpeq	r0, #0
 802028a:	bf1c      	itt	ne
 802028c:	f04f 31ff 	movne.w	r1, #4294967295
 8020290:	f04f 30ff 	movne.w	r0, #4294967295
 8020294:	f000 b96a 	b.w	802056c <__aeabi_idiv0>
 8020298:	f1ad 0c08 	sub.w	ip, sp, #8
 802029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202a0:	f000 f806 	bl	80202b0 <__udivmoddi4>
 80202a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202ac:	b004      	add	sp, #16
 80202ae:	4770      	bx	lr

080202b0 <__udivmoddi4>:
 80202b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202b4:	9d08      	ldr	r5, [sp, #32]
 80202b6:	460c      	mov	r4, r1
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	d14e      	bne.n	802035a <__udivmoddi4+0xaa>
 80202bc:	4694      	mov	ip, r2
 80202be:	458c      	cmp	ip, r1
 80202c0:	4686      	mov	lr, r0
 80202c2:	fab2 f282 	clz	r2, r2
 80202c6:	d962      	bls.n	802038e <__udivmoddi4+0xde>
 80202c8:	b14a      	cbz	r2, 80202de <__udivmoddi4+0x2e>
 80202ca:	f1c2 0320 	rsb	r3, r2, #32
 80202ce:	4091      	lsls	r1, r2
 80202d0:	fa20 f303 	lsr.w	r3, r0, r3
 80202d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80202d8:	4319      	orrs	r1, r3
 80202da:	fa00 fe02 	lsl.w	lr, r0, r2
 80202de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80202e2:	fa1f f68c 	uxth.w	r6, ip
 80202e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80202ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80202ee:	fb07 1114 	mls	r1, r7, r4, r1
 80202f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80202f6:	fb04 f106 	mul.w	r1, r4, r6
 80202fa:	4299      	cmp	r1, r3
 80202fc:	d90a      	bls.n	8020314 <__udivmoddi4+0x64>
 80202fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020302:	f104 30ff 	add.w	r0, r4, #4294967295
 8020306:	f080 8112 	bcs.w	802052e <__udivmoddi4+0x27e>
 802030a:	4299      	cmp	r1, r3
 802030c:	f240 810f 	bls.w	802052e <__udivmoddi4+0x27e>
 8020310:	3c02      	subs	r4, #2
 8020312:	4463      	add	r3, ip
 8020314:	1a59      	subs	r1, r3, r1
 8020316:	fa1f f38e 	uxth.w	r3, lr
 802031a:	fbb1 f0f7 	udiv	r0, r1, r7
 802031e:	fb07 1110 	mls	r1, r7, r0, r1
 8020322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020326:	fb00 f606 	mul.w	r6, r0, r6
 802032a:	429e      	cmp	r6, r3
 802032c:	d90a      	bls.n	8020344 <__udivmoddi4+0x94>
 802032e:	eb1c 0303 	adds.w	r3, ip, r3
 8020332:	f100 31ff 	add.w	r1, r0, #4294967295
 8020336:	f080 80fc 	bcs.w	8020532 <__udivmoddi4+0x282>
 802033a:	429e      	cmp	r6, r3
 802033c:	f240 80f9 	bls.w	8020532 <__udivmoddi4+0x282>
 8020340:	4463      	add	r3, ip
 8020342:	3802      	subs	r0, #2
 8020344:	1b9b      	subs	r3, r3, r6
 8020346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 802034a:	2100      	movs	r1, #0
 802034c:	b11d      	cbz	r5, 8020356 <__udivmoddi4+0xa6>
 802034e:	40d3      	lsrs	r3, r2
 8020350:	2200      	movs	r2, #0
 8020352:	e9c5 3200 	strd	r3, r2, [r5]
 8020356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802035a:	428b      	cmp	r3, r1
 802035c:	d905      	bls.n	802036a <__udivmoddi4+0xba>
 802035e:	b10d      	cbz	r5, 8020364 <__udivmoddi4+0xb4>
 8020360:	e9c5 0100 	strd	r0, r1, [r5]
 8020364:	2100      	movs	r1, #0
 8020366:	4608      	mov	r0, r1
 8020368:	e7f5      	b.n	8020356 <__udivmoddi4+0xa6>
 802036a:	fab3 f183 	clz	r1, r3
 802036e:	2900      	cmp	r1, #0
 8020370:	d146      	bne.n	8020400 <__udivmoddi4+0x150>
 8020372:	42a3      	cmp	r3, r4
 8020374:	d302      	bcc.n	802037c <__udivmoddi4+0xcc>
 8020376:	4290      	cmp	r0, r2
 8020378:	f0c0 80f0 	bcc.w	802055c <__udivmoddi4+0x2ac>
 802037c:	1a86      	subs	r6, r0, r2
 802037e:	eb64 0303 	sbc.w	r3, r4, r3
 8020382:	2001      	movs	r0, #1
 8020384:	2d00      	cmp	r5, #0
 8020386:	d0e6      	beq.n	8020356 <__udivmoddi4+0xa6>
 8020388:	e9c5 6300 	strd	r6, r3, [r5]
 802038c:	e7e3      	b.n	8020356 <__udivmoddi4+0xa6>
 802038e:	2a00      	cmp	r2, #0
 8020390:	f040 8090 	bne.w	80204b4 <__udivmoddi4+0x204>
 8020394:	eba1 040c 	sub.w	r4, r1, ip
 8020398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 802039c:	fa1f f78c 	uxth.w	r7, ip
 80203a0:	2101      	movs	r1, #1
 80203a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80203a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80203aa:	fb08 4416 	mls	r4, r8, r6, r4
 80203ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80203b2:	fb07 f006 	mul.w	r0, r7, r6
 80203b6:	4298      	cmp	r0, r3
 80203b8:	d908      	bls.n	80203cc <__udivmoddi4+0x11c>
 80203ba:	eb1c 0303 	adds.w	r3, ip, r3
 80203be:	f106 34ff 	add.w	r4, r6, #4294967295
 80203c2:	d202      	bcs.n	80203ca <__udivmoddi4+0x11a>
 80203c4:	4298      	cmp	r0, r3
 80203c6:	f200 80cd 	bhi.w	8020564 <__udivmoddi4+0x2b4>
 80203ca:	4626      	mov	r6, r4
 80203cc:	1a1c      	subs	r4, r3, r0
 80203ce:	fa1f f38e 	uxth.w	r3, lr
 80203d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80203d6:	fb08 4410 	mls	r4, r8, r0, r4
 80203da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80203de:	fb00 f707 	mul.w	r7, r0, r7
 80203e2:	429f      	cmp	r7, r3
 80203e4:	d908      	bls.n	80203f8 <__udivmoddi4+0x148>
 80203e6:	eb1c 0303 	adds.w	r3, ip, r3
 80203ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80203ee:	d202      	bcs.n	80203f6 <__udivmoddi4+0x146>
 80203f0:	429f      	cmp	r7, r3
 80203f2:	f200 80b0 	bhi.w	8020556 <__udivmoddi4+0x2a6>
 80203f6:	4620      	mov	r0, r4
 80203f8:	1bdb      	subs	r3, r3, r7
 80203fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80203fe:	e7a5      	b.n	802034c <__udivmoddi4+0x9c>
 8020400:	f1c1 0620 	rsb	r6, r1, #32
 8020404:	408b      	lsls	r3, r1
 8020406:	fa22 f706 	lsr.w	r7, r2, r6
 802040a:	431f      	orrs	r7, r3
 802040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8020410:	fa04 f301 	lsl.w	r3, r4, r1
 8020414:	ea43 030c 	orr.w	r3, r3, ip
 8020418:	40f4      	lsrs	r4, r6
 802041a:	fa00 f801 	lsl.w	r8, r0, r1
 802041e:	0c38      	lsrs	r0, r7, #16
 8020420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8020424:	fbb4 fef0 	udiv	lr, r4, r0
 8020428:	fa1f fc87 	uxth.w	ip, r7
 802042c:	fb00 441e 	mls	r4, r0, lr, r4
 8020430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8020434:	fb0e f90c 	mul.w	r9, lr, ip
 8020438:	45a1      	cmp	r9, r4
 802043a:	fa02 f201 	lsl.w	r2, r2, r1
 802043e:	d90a      	bls.n	8020456 <__udivmoddi4+0x1a6>
 8020440:	193c      	adds	r4, r7, r4
 8020442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020446:	f080 8084 	bcs.w	8020552 <__udivmoddi4+0x2a2>
 802044a:	45a1      	cmp	r9, r4
 802044c:	f240 8081 	bls.w	8020552 <__udivmoddi4+0x2a2>
 8020450:	f1ae 0e02 	sub.w	lr, lr, #2
 8020454:	443c      	add	r4, r7
 8020456:	eba4 0409 	sub.w	r4, r4, r9
 802045a:	fa1f f983 	uxth.w	r9, r3
 802045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8020462:	fb00 4413 	mls	r4, r0, r3, r4
 8020466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 802046a:	fb03 fc0c 	mul.w	ip, r3, ip
 802046e:	45a4      	cmp	ip, r4
 8020470:	d907      	bls.n	8020482 <__udivmoddi4+0x1d2>
 8020472:	193c      	adds	r4, r7, r4
 8020474:	f103 30ff 	add.w	r0, r3, #4294967295
 8020478:	d267      	bcs.n	802054a <__udivmoddi4+0x29a>
 802047a:	45a4      	cmp	ip, r4
 802047c:	d965      	bls.n	802054a <__udivmoddi4+0x29a>
 802047e:	3b02      	subs	r3, #2
 8020480:	443c      	add	r4, r7
 8020482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8020486:	fba0 9302 	umull	r9, r3, r0, r2
 802048a:	eba4 040c 	sub.w	r4, r4, ip
 802048e:	429c      	cmp	r4, r3
 8020490:	46ce      	mov	lr, r9
 8020492:	469c      	mov	ip, r3
 8020494:	d351      	bcc.n	802053a <__udivmoddi4+0x28a>
 8020496:	d04e      	beq.n	8020536 <__udivmoddi4+0x286>
 8020498:	b155      	cbz	r5, 80204b0 <__udivmoddi4+0x200>
 802049a:	ebb8 030e 	subs.w	r3, r8, lr
 802049e:	eb64 040c 	sbc.w	r4, r4, ip
 80204a2:	fa04 f606 	lsl.w	r6, r4, r6
 80204a6:	40cb      	lsrs	r3, r1
 80204a8:	431e      	orrs	r6, r3
 80204aa:	40cc      	lsrs	r4, r1
 80204ac:	e9c5 6400 	strd	r6, r4, [r5]
 80204b0:	2100      	movs	r1, #0
 80204b2:	e750      	b.n	8020356 <__udivmoddi4+0xa6>
 80204b4:	f1c2 0320 	rsb	r3, r2, #32
 80204b8:	fa20 f103 	lsr.w	r1, r0, r3
 80204bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80204c0:	fa24 f303 	lsr.w	r3, r4, r3
 80204c4:	4094      	lsls	r4, r2
 80204c6:	430c      	orrs	r4, r1
 80204c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80204cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80204d0:	fa1f f78c 	uxth.w	r7, ip
 80204d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80204d8:	fb08 3110 	mls	r1, r8, r0, r3
 80204dc:	0c23      	lsrs	r3, r4, #16
 80204de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80204e2:	fb00 f107 	mul.w	r1, r0, r7
 80204e6:	4299      	cmp	r1, r3
 80204e8:	d908      	bls.n	80204fc <__udivmoddi4+0x24c>
 80204ea:	eb1c 0303 	adds.w	r3, ip, r3
 80204ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80204f2:	d22c      	bcs.n	802054e <__udivmoddi4+0x29e>
 80204f4:	4299      	cmp	r1, r3
 80204f6:	d92a      	bls.n	802054e <__udivmoddi4+0x29e>
 80204f8:	3802      	subs	r0, #2
 80204fa:	4463      	add	r3, ip
 80204fc:	1a5b      	subs	r3, r3, r1
 80204fe:	b2a4      	uxth	r4, r4
 8020500:	fbb3 f1f8 	udiv	r1, r3, r8
 8020504:	fb08 3311 	mls	r3, r8, r1, r3
 8020508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802050c:	fb01 f307 	mul.w	r3, r1, r7
 8020510:	42a3      	cmp	r3, r4
 8020512:	d908      	bls.n	8020526 <__udivmoddi4+0x276>
 8020514:	eb1c 0404 	adds.w	r4, ip, r4
 8020518:	f101 36ff 	add.w	r6, r1, #4294967295
 802051c:	d213      	bcs.n	8020546 <__udivmoddi4+0x296>
 802051e:	42a3      	cmp	r3, r4
 8020520:	d911      	bls.n	8020546 <__udivmoddi4+0x296>
 8020522:	3902      	subs	r1, #2
 8020524:	4464      	add	r4, ip
 8020526:	1ae4      	subs	r4, r4, r3
 8020528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802052c:	e739      	b.n	80203a2 <__udivmoddi4+0xf2>
 802052e:	4604      	mov	r4, r0
 8020530:	e6f0      	b.n	8020314 <__udivmoddi4+0x64>
 8020532:	4608      	mov	r0, r1
 8020534:	e706      	b.n	8020344 <__udivmoddi4+0x94>
 8020536:	45c8      	cmp	r8, r9
 8020538:	d2ae      	bcs.n	8020498 <__udivmoddi4+0x1e8>
 802053a:	ebb9 0e02 	subs.w	lr, r9, r2
 802053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8020542:	3801      	subs	r0, #1
 8020544:	e7a8      	b.n	8020498 <__udivmoddi4+0x1e8>
 8020546:	4631      	mov	r1, r6
 8020548:	e7ed      	b.n	8020526 <__udivmoddi4+0x276>
 802054a:	4603      	mov	r3, r0
 802054c:	e799      	b.n	8020482 <__udivmoddi4+0x1d2>
 802054e:	4630      	mov	r0, r6
 8020550:	e7d4      	b.n	80204fc <__udivmoddi4+0x24c>
 8020552:	46d6      	mov	lr, sl
 8020554:	e77f      	b.n	8020456 <__udivmoddi4+0x1a6>
 8020556:	4463      	add	r3, ip
 8020558:	3802      	subs	r0, #2
 802055a:	e74d      	b.n	80203f8 <__udivmoddi4+0x148>
 802055c:	4606      	mov	r6, r0
 802055e:	4623      	mov	r3, r4
 8020560:	4608      	mov	r0, r1
 8020562:	e70f      	b.n	8020384 <__udivmoddi4+0xd4>
 8020564:	3e02      	subs	r6, #2
 8020566:	4463      	add	r3, ip
 8020568:	e730      	b.n	80203cc <__udivmoddi4+0x11c>
 802056a:	bf00      	nop

0802056c <__aeabi_idiv0>:
 802056c:	4770      	bx	lr
 802056e:	bf00      	nop

08020570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020570:	b580      	push	{r7, lr}
 8020572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020574:	f000 fa82 	bl	8020a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020578:	f000 f81a 	bl	80205b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802057c:	f000 f8a0 	bl	80206c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8020580:	f000 f874 	bl	802066c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application (%d.%d)\n", App_Version[0], App_Version[1]);
 8020584:	2300      	movs	r3, #0
 8020586:	2201      	movs	r2, #1
 8020588:	4619      	mov	r1, r3
 802058a:	4807      	ldr	r0, [pc, #28]	@ (80205a8 <main+0x38>)
 802058c:	f001 fed0 	bl	8022330 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8020590:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8020594:	4805      	ldr	r0, [pc, #20]	@ (80205ac <main+0x3c>)
 8020596:	f000 fd8a 	bl	80210ae <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 802059a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802059e:	f000 fadf 	bl	8020b60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80205a2:	bf00      	nop
 80205a4:	e7f4      	b.n	8020590 <main+0x20>
 80205a6:	bf00      	nop
 80205a8:	08023024 	.word	0x08023024
 80205ac:	40020c00 	.word	0x40020c00

080205b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205b0:	b580      	push	{r7, lr}
 80205b2:	b094      	sub	sp, #80	@ 0x50
 80205b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205b6:	f107 0320 	add.w	r3, r7, #32
 80205ba:	2230      	movs	r2, #48	@ 0x30
 80205bc:	2100      	movs	r1, #0
 80205be:	4618      	mov	r0, r3
 80205c0:	f001 ff0b 	bl	80223da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205c4:	f107 030c 	add.w	r3, r7, #12
 80205c8:	2200      	movs	r2, #0
 80205ca:	601a      	str	r2, [r3, #0]
 80205cc:	605a      	str	r2, [r3, #4]
 80205ce:	609a      	str	r2, [r3, #8]
 80205d0:	60da      	str	r2, [r3, #12]
 80205d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80205d4:	2300      	movs	r3, #0
 80205d6:	60bb      	str	r3, [r7, #8]
 80205d8:	4b22      	ldr	r3, [pc, #136]	@ (8020664 <SystemClock_Config+0xb4>)
 80205da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80205dc:	4a21      	ldr	r2, [pc, #132]	@ (8020664 <SystemClock_Config+0xb4>)
 80205de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80205e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80205e4:	4b1f      	ldr	r3, [pc, #124]	@ (8020664 <SystemClock_Config+0xb4>)
 80205e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80205e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80205ec:	60bb      	str	r3, [r7, #8]
 80205ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80205f0:	2300      	movs	r3, #0
 80205f2:	607b      	str	r3, [r7, #4]
 80205f4:	4b1c      	ldr	r3, [pc, #112]	@ (8020668 <SystemClock_Config+0xb8>)
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	4a1b      	ldr	r2, [pc, #108]	@ (8020668 <SystemClock_Config+0xb8>)
 80205fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80205fe:	6013      	str	r3, [r2, #0]
 8020600:	4b19      	ldr	r3, [pc, #100]	@ (8020668 <SystemClock_Config+0xb8>)
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8020608:	607b      	str	r3, [r7, #4]
 802060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 802060c:	2302      	movs	r3, #2
 802060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8020610:	2301      	movs	r3, #1
 8020612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8020614:	2310      	movs	r3, #16
 8020616:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8020618:	2300      	movs	r3, #0
 802061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802061c:	f107 0320 	add.w	r3, r7, #32
 8020620:	4618      	mov	r0, r3
 8020622:	f000 fd5f 	bl	80210e4 <HAL_RCC_OscConfig>
 8020626:	4603      	mov	r3, r0
 8020628:	2b00      	cmp	r3, #0
 802062a:	d001      	beq.n	8020630 <SystemClock_Config+0x80>
  {
    Error_Handler();
 802062c:	f000 f89e 	bl	802076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020630:	230f      	movs	r3, #15
 8020632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8020634:	2300      	movs	r3, #0
 8020636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020638:	2300      	movs	r3, #0
 802063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802063c:	2300      	movs	r3, #0
 802063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020640:	2300      	movs	r3, #0
 8020642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8020644:	f107 030c 	add.w	r3, r7, #12
 8020648:	2100      	movs	r1, #0
 802064a:	4618      	mov	r0, r3
 802064c:	f000 ffc2 	bl	80215d4 <HAL_RCC_ClockConfig>
 8020650:	4603      	mov	r3, r0
 8020652:	2b00      	cmp	r3, #0
 8020654:	d001      	beq.n	802065a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8020656:	f000 f889 	bl	802076c <Error_Handler>
  }
}
 802065a:	bf00      	nop
 802065c:	3750      	adds	r7, #80	@ 0x50
 802065e:	46bd      	mov	sp, r7
 8020660:	bd80      	pop	{r7, pc}
 8020662:	bf00      	nop
 8020664:	40023800 	.word	0x40023800
 8020668:	40007000 	.word	0x40007000

0802066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 802066c:	b580      	push	{r7, lr}
 802066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020670:	4b11      	ldr	r3, [pc, #68]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 8020672:	4a12      	ldr	r2, [pc, #72]	@ (80206bc <MX_USART2_UART_Init+0x50>)
 8020674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020676:	4b10      	ldr	r3, [pc, #64]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 8020678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 802067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802067e:	4b0e      	ldr	r3, [pc, #56]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 8020680:	2200      	movs	r2, #0
 8020682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020684:	4b0c      	ldr	r3, [pc, #48]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 8020686:	2200      	movs	r2, #0
 8020688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802068a:	4b0b      	ldr	r3, [pc, #44]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 802068c:	2200      	movs	r2, #0
 802068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020690:	4b09      	ldr	r3, [pc, #36]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 8020692:	220c      	movs	r2, #12
 8020694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020696:	4b08      	ldr	r3, [pc, #32]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 8020698:	2200      	movs	r2, #0
 802069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802069c:	4b06      	ldr	r3, [pc, #24]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 802069e:	2200      	movs	r2, #0
 80206a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80206a2:	4805      	ldr	r0, [pc, #20]	@ (80206b8 <MX_USART2_UART_Init+0x4c>)
 80206a4:	f001 f976 	bl	8021994 <HAL_UART_Init>
 80206a8:	4603      	mov	r3, r0
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d001      	beq.n	80206b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80206ae:	f000 f85d 	bl	802076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80206b2:	bf00      	nop
 80206b4:	bd80      	pop	{r7, pc}
 80206b6:	bf00      	nop
 80206b8:	20000084 	.word	0x20000084
 80206bc:	40004400 	.word	0x40004400

080206c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80206c0:	b580      	push	{r7, lr}
 80206c2:	b088      	sub	sp, #32
 80206c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80206c6:	f107 030c 	add.w	r3, r7, #12
 80206ca:	2200      	movs	r2, #0
 80206cc:	601a      	str	r2, [r3, #0]
 80206ce:	605a      	str	r2, [r3, #4]
 80206d0:	609a      	str	r2, [r3, #8]
 80206d2:	60da      	str	r2, [r3, #12]
 80206d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80206d6:	2300      	movs	r3, #0
 80206d8:	60bb      	str	r3, [r7, #8]
 80206da:	4b19      	ldr	r3, [pc, #100]	@ (8020740 <MX_GPIO_Init+0x80>)
 80206dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206de:	4a18      	ldr	r2, [pc, #96]	@ (8020740 <MX_GPIO_Init+0x80>)
 80206e0:	f043 0301 	orr.w	r3, r3, #1
 80206e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80206e6:	4b16      	ldr	r3, [pc, #88]	@ (8020740 <MX_GPIO_Init+0x80>)
 80206e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206ea:	f003 0301 	and.w	r3, r3, #1
 80206ee:	60bb      	str	r3, [r7, #8]
 80206f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80206f2:	2300      	movs	r3, #0
 80206f4:	607b      	str	r3, [r7, #4]
 80206f6:	4b12      	ldr	r3, [pc, #72]	@ (8020740 <MX_GPIO_Init+0x80>)
 80206f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206fa:	4a11      	ldr	r2, [pc, #68]	@ (8020740 <MX_GPIO_Init+0x80>)
 80206fc:	f043 0308 	orr.w	r3, r3, #8
 8020700:	6313      	str	r3, [r2, #48]	@ 0x30
 8020702:	4b0f      	ldr	r3, [pc, #60]	@ (8020740 <MX_GPIO_Init+0x80>)
 8020704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020706:	f003 0308 	and.w	r3, r3, #8
 802070a:	607b      	str	r3, [r7, #4]
 802070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 802070e:	2200      	movs	r2, #0
 8020710:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8020714:	480b      	ldr	r0, [pc, #44]	@ (8020744 <MX_GPIO_Init+0x84>)
 8020716:	f000 fcb1 	bl	802107c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 802071a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 802071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020720:	2301      	movs	r3, #1
 8020722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020724:	2300      	movs	r3, #0
 8020726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020728:	2300      	movs	r3, #0
 802072a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802072c:	f107 030c 	add.w	r3, r7, #12
 8020730:	4619      	mov	r1, r3
 8020732:	4804      	ldr	r0, [pc, #16]	@ (8020744 <MX_GPIO_Init+0x84>)
 8020734:	f000 fb1e 	bl	8020d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8020738:	bf00      	nop
 802073a:	3720      	adds	r7, #32
 802073c:	46bd      	mov	sp, r7
 802073e:	bd80      	pop	{r7, pc}
 8020740:	40023800 	.word	0x40023800
 8020744:	40020c00 	.word	0x40020c00

08020748 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8020748:	b580      	push	{r7, lr}
 802074a:	b082      	sub	sp, #8
 802074c:	af00      	add	r7, sp, #0
 802074e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ch, 1, HAL_MAX_DELAY);
 8020750:	6879      	ldr	r1, [r7, #4]
 8020752:	f04f 33ff 	mov.w	r3, #4294967295
 8020756:	2201      	movs	r2, #1
 8020758:	4803      	ldr	r0, [pc, #12]	@ (8020768 <__io_putchar+0x20>)
 802075a:	f001 f96b 	bl	8021a34 <HAL_UART_Transmit>

	return ch;
 802075e:	687b      	ldr	r3, [r7, #4]
}
 8020760:	4618      	mov	r0, r3
 8020762:	3708      	adds	r7, #8
 8020764:	46bd      	mov	sp, r7
 8020766:	bd80      	pop	{r7, pc}
 8020768:	20000084 	.word	0x20000084

0802076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802076c:	b480      	push	{r7}
 802076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020770:	b672      	cpsid	i
}
 8020772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020774:	bf00      	nop
 8020776:	e7fd      	b.n	8020774 <Error_Handler+0x8>

08020778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020778:	b480      	push	{r7}
 802077a:	b083      	sub	sp, #12
 802077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802077e:	2300      	movs	r3, #0
 8020780:	607b      	str	r3, [r7, #4]
 8020782:	4b10      	ldr	r3, [pc, #64]	@ (80207c4 <HAL_MspInit+0x4c>)
 8020784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020786:	4a0f      	ldr	r2, [pc, #60]	@ (80207c4 <HAL_MspInit+0x4c>)
 8020788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802078c:	6453      	str	r3, [r2, #68]	@ 0x44
 802078e:	4b0d      	ldr	r3, [pc, #52]	@ (80207c4 <HAL_MspInit+0x4c>)
 8020790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020796:	607b      	str	r3, [r7, #4]
 8020798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802079a:	2300      	movs	r3, #0
 802079c:	603b      	str	r3, [r7, #0]
 802079e:	4b09      	ldr	r3, [pc, #36]	@ (80207c4 <HAL_MspInit+0x4c>)
 80207a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207a2:	4a08      	ldr	r2, [pc, #32]	@ (80207c4 <HAL_MspInit+0x4c>)
 80207a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80207a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80207aa:	4b06      	ldr	r3, [pc, #24]	@ (80207c4 <HAL_MspInit+0x4c>)
 80207ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80207b2:	603b      	str	r3, [r7, #0]
 80207b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80207b6:	bf00      	nop
 80207b8:	370c      	adds	r7, #12
 80207ba:	46bd      	mov	sp, r7
 80207bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c0:	4770      	bx	lr
 80207c2:	bf00      	nop
 80207c4:	40023800 	.word	0x40023800

080207c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80207c8:	b580      	push	{r7, lr}
 80207ca:	b08a      	sub	sp, #40	@ 0x28
 80207cc:	af00      	add	r7, sp, #0
 80207ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207d0:	f107 0314 	add.w	r3, r7, #20
 80207d4:	2200      	movs	r2, #0
 80207d6:	601a      	str	r2, [r3, #0]
 80207d8:	605a      	str	r2, [r3, #4]
 80207da:	609a      	str	r2, [r3, #8]
 80207dc:	60da      	str	r2, [r3, #12]
 80207de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	4a19      	ldr	r2, [pc, #100]	@ (802084c <HAL_UART_MspInit+0x84>)
 80207e6:	4293      	cmp	r3, r2
 80207e8:	d12b      	bne.n	8020842 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80207ea:	2300      	movs	r3, #0
 80207ec:	613b      	str	r3, [r7, #16]
 80207ee:	4b18      	ldr	r3, [pc, #96]	@ (8020850 <HAL_UART_MspInit+0x88>)
 80207f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207f2:	4a17      	ldr	r2, [pc, #92]	@ (8020850 <HAL_UART_MspInit+0x88>)
 80207f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80207f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80207fa:	4b15      	ldr	r3, [pc, #84]	@ (8020850 <HAL_UART_MspInit+0x88>)
 80207fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020802:	613b      	str	r3, [r7, #16]
 8020804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020806:	2300      	movs	r3, #0
 8020808:	60fb      	str	r3, [r7, #12]
 802080a:	4b11      	ldr	r3, [pc, #68]	@ (8020850 <HAL_UART_MspInit+0x88>)
 802080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802080e:	4a10      	ldr	r2, [pc, #64]	@ (8020850 <HAL_UART_MspInit+0x88>)
 8020810:	f043 0301 	orr.w	r3, r3, #1
 8020814:	6313      	str	r3, [r2, #48]	@ 0x30
 8020816:	4b0e      	ldr	r3, [pc, #56]	@ (8020850 <HAL_UART_MspInit+0x88>)
 8020818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802081a:	f003 0301 	and.w	r3, r3, #1
 802081e:	60fb      	str	r3, [r7, #12]
 8020820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8020822:	230c      	movs	r3, #12
 8020824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020826:	2302      	movs	r3, #2
 8020828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802082a:	2300      	movs	r3, #0
 802082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802082e:	2303      	movs	r3, #3
 8020830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020832:	2307      	movs	r3, #7
 8020834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020836:	f107 0314 	add.w	r3, r7, #20
 802083a:	4619      	mov	r1, r3
 802083c:	4805      	ldr	r0, [pc, #20]	@ (8020854 <HAL_UART_MspInit+0x8c>)
 802083e:	f000 fa99 	bl	8020d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8020842:	bf00      	nop
 8020844:	3728      	adds	r7, #40	@ 0x28
 8020846:	46bd      	mov	sp, r7
 8020848:	bd80      	pop	{r7, pc}
 802084a:	bf00      	nop
 802084c:	40004400 	.word	0x40004400
 8020850:	40023800 	.word	0x40023800
 8020854:	40020000 	.word	0x40020000

08020858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020858:	b480      	push	{r7}
 802085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 802085c:	bf00      	nop
 802085e:	e7fd      	b.n	802085c <NMI_Handler+0x4>

08020860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020860:	b480      	push	{r7}
 8020862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020864:	bf00      	nop
 8020866:	e7fd      	b.n	8020864 <HardFault_Handler+0x4>

08020868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020868:	b480      	push	{r7}
 802086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802086c:	bf00      	nop
 802086e:	e7fd      	b.n	802086c <MemManage_Handler+0x4>

08020870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020870:	b480      	push	{r7}
 8020872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020874:	bf00      	nop
 8020876:	e7fd      	b.n	8020874 <BusFault_Handler+0x4>

08020878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020878:	b480      	push	{r7}
 802087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802087c:	bf00      	nop
 802087e:	e7fd      	b.n	802087c <UsageFault_Handler+0x4>

08020880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020880:	b480      	push	{r7}
 8020882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020884:	bf00      	nop
 8020886:	46bd      	mov	sp, r7
 8020888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088c:	4770      	bx	lr

0802088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802088e:	b480      	push	{r7}
 8020890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020892:	bf00      	nop
 8020894:	46bd      	mov	sp, r7
 8020896:	f85d 7b04 	ldr.w	r7, [sp], #4
 802089a:	4770      	bx	lr

0802089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802089c:	b480      	push	{r7}
 802089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80208a0:	bf00      	nop
 80208a2:	46bd      	mov	sp, r7
 80208a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a8:	4770      	bx	lr

080208aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80208aa:	b580      	push	{r7, lr}
 80208ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80208ae:	f000 f937 	bl	8020b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80208b2:	bf00      	nop
 80208b4:	bd80      	pop	{r7, pc}

080208b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80208b6:	b580      	push	{r7, lr}
 80208b8:	b086      	sub	sp, #24
 80208ba:	af00      	add	r7, sp, #0
 80208bc:	60f8      	str	r0, [r7, #12]
 80208be:	60b9      	str	r1, [r7, #8]
 80208c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80208c2:	2300      	movs	r3, #0
 80208c4:	617b      	str	r3, [r7, #20]
 80208c6:	e00a      	b.n	80208de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80208c8:	f3af 8000 	nop.w
 80208cc:	4601      	mov	r1, r0
 80208ce:	68bb      	ldr	r3, [r7, #8]
 80208d0:	1c5a      	adds	r2, r3, #1
 80208d2:	60ba      	str	r2, [r7, #8]
 80208d4:	b2ca      	uxtb	r2, r1
 80208d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80208d8:	697b      	ldr	r3, [r7, #20]
 80208da:	3301      	adds	r3, #1
 80208dc:	617b      	str	r3, [r7, #20]
 80208de:	697a      	ldr	r2, [r7, #20]
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	429a      	cmp	r2, r3
 80208e4:	dbf0      	blt.n	80208c8 <_read+0x12>
  }

  return len;
 80208e6:	687b      	ldr	r3, [r7, #4]
}
 80208e8:	4618      	mov	r0, r3
 80208ea:	3718      	adds	r7, #24
 80208ec:	46bd      	mov	sp, r7
 80208ee:	bd80      	pop	{r7, pc}

080208f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80208f0:	b580      	push	{r7, lr}
 80208f2:	b086      	sub	sp, #24
 80208f4:	af00      	add	r7, sp, #0
 80208f6:	60f8      	str	r0, [r7, #12]
 80208f8:	60b9      	str	r1, [r7, #8]
 80208fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80208fc:	2300      	movs	r3, #0
 80208fe:	617b      	str	r3, [r7, #20]
 8020900:	e009      	b.n	8020916 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8020902:	68bb      	ldr	r3, [r7, #8]
 8020904:	1c5a      	adds	r2, r3, #1
 8020906:	60ba      	str	r2, [r7, #8]
 8020908:	781b      	ldrb	r3, [r3, #0]
 802090a:	4618      	mov	r0, r3
 802090c:	f7ff ff1c 	bl	8020748 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020910:	697b      	ldr	r3, [r7, #20]
 8020912:	3301      	adds	r3, #1
 8020914:	617b      	str	r3, [r7, #20]
 8020916:	697a      	ldr	r2, [r7, #20]
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	429a      	cmp	r2, r3
 802091c:	dbf1      	blt.n	8020902 <_write+0x12>
  }
  return len;
 802091e:	687b      	ldr	r3, [r7, #4]
}
 8020920:	4618      	mov	r0, r3
 8020922:	3718      	adds	r7, #24
 8020924:	46bd      	mov	sp, r7
 8020926:	bd80      	pop	{r7, pc}

08020928 <_close>:

int _close(int file)
{
 8020928:	b480      	push	{r7}
 802092a:	b083      	sub	sp, #12
 802092c:	af00      	add	r7, sp, #0
 802092e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8020930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020934:	4618      	mov	r0, r3
 8020936:	370c      	adds	r7, #12
 8020938:	46bd      	mov	sp, r7
 802093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802093e:	4770      	bx	lr

08020940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8020940:	b480      	push	{r7}
 8020942:	b083      	sub	sp, #12
 8020944:	af00      	add	r7, sp, #0
 8020946:	6078      	str	r0, [r7, #4]
 8020948:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802094a:	683b      	ldr	r3, [r7, #0]
 802094c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8020950:	605a      	str	r2, [r3, #4]
  return 0;
 8020952:	2300      	movs	r3, #0
}
 8020954:	4618      	mov	r0, r3
 8020956:	370c      	adds	r7, #12
 8020958:	46bd      	mov	sp, r7
 802095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802095e:	4770      	bx	lr

08020960 <_isatty>:

int _isatty(int file)
{
 8020960:	b480      	push	{r7}
 8020962:	b083      	sub	sp, #12
 8020964:	af00      	add	r7, sp, #0
 8020966:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8020968:	2301      	movs	r3, #1
}
 802096a:	4618      	mov	r0, r3
 802096c:	370c      	adds	r7, #12
 802096e:	46bd      	mov	sp, r7
 8020970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020974:	4770      	bx	lr

08020976 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020976:	b480      	push	{r7}
 8020978:	b085      	sub	sp, #20
 802097a:	af00      	add	r7, sp, #0
 802097c:	60f8      	str	r0, [r7, #12]
 802097e:	60b9      	str	r1, [r7, #8]
 8020980:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8020982:	2300      	movs	r3, #0
}
 8020984:	4618      	mov	r0, r3
 8020986:	3714      	adds	r7, #20
 8020988:	46bd      	mov	sp, r7
 802098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802098e:	4770      	bx	lr

08020990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020990:	b580      	push	{r7, lr}
 8020992:	b086      	sub	sp, #24
 8020994:	af00      	add	r7, sp, #0
 8020996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020998:	4a14      	ldr	r2, [pc, #80]	@ (80209ec <_sbrk+0x5c>)
 802099a:	4b15      	ldr	r3, [pc, #84]	@ (80209f0 <_sbrk+0x60>)
 802099c:	1ad3      	subs	r3, r2, r3
 802099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80209a0:	697b      	ldr	r3, [r7, #20]
 80209a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80209a4:	4b13      	ldr	r3, [pc, #76]	@ (80209f4 <_sbrk+0x64>)
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d102      	bne.n	80209b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80209ac:	4b11      	ldr	r3, [pc, #68]	@ (80209f4 <_sbrk+0x64>)
 80209ae:	4a12      	ldr	r2, [pc, #72]	@ (80209f8 <_sbrk+0x68>)
 80209b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80209b2:	4b10      	ldr	r3, [pc, #64]	@ (80209f4 <_sbrk+0x64>)
 80209b4:	681a      	ldr	r2, [r3, #0]
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	4413      	add	r3, r2
 80209ba:	693a      	ldr	r2, [r7, #16]
 80209bc:	429a      	cmp	r2, r3
 80209be:	d207      	bcs.n	80209d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80209c0:	f001 fd5a 	bl	8022478 <__errno>
 80209c4:	4603      	mov	r3, r0
 80209c6:	220c      	movs	r2, #12
 80209c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80209ca:	f04f 33ff 	mov.w	r3, #4294967295
 80209ce:	e009      	b.n	80209e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80209d0:	4b08      	ldr	r3, [pc, #32]	@ (80209f4 <_sbrk+0x64>)
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80209d6:	4b07      	ldr	r3, [pc, #28]	@ (80209f4 <_sbrk+0x64>)
 80209d8:	681a      	ldr	r2, [r3, #0]
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	4413      	add	r3, r2
 80209de:	4a05      	ldr	r2, [pc, #20]	@ (80209f4 <_sbrk+0x64>)
 80209e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80209e2:	68fb      	ldr	r3, [r7, #12]
}
 80209e4:	4618      	mov	r0, r3
 80209e6:	3718      	adds	r7, #24
 80209e8:	46bd      	mov	sp, r7
 80209ea:	bd80      	pop	{r7, pc}
 80209ec:	20020000 	.word	0x20020000
 80209f0:	00000400 	.word	0x00000400
 80209f4:	200000cc 	.word	0x200000cc
 80209f8:	20000220 	.word	0x20000220

080209fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80209fc:	b480      	push	{r7}
 80209fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020a00:	4b07      	ldr	r3, [pc, #28]	@ (8020a20 <SystemInit+0x24>)
 8020a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020a06:	4a06      	ldr	r2, [pc, #24]	@ (8020a20 <SystemInit+0x24>)
 8020a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020a10:	4b03      	ldr	r3, [pc, #12]	@ (8020a20 <SystemInit+0x24>)
 8020a12:	4a04      	ldr	r2, [pc, #16]	@ (8020a24 <SystemInit+0x28>)
 8020a14:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020a16:	bf00      	nop
 8020a18:	46bd      	mov	sp, r7
 8020a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a1e:	4770      	bx	lr
 8020a20:	e000ed00 	.word	0xe000ed00
 8020a24:	08020000 	.word	0x08020000

08020a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8020a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020a2c:	f7ff ffe6 	bl	80209fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020a30:	480c      	ldr	r0, [pc, #48]	@ (8020a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8020a32:	490d      	ldr	r1, [pc, #52]	@ (8020a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8020a34:	4a0d      	ldr	r2, [pc, #52]	@ (8020a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8020a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020a38:	e002      	b.n	8020a40 <LoopCopyDataInit>

08020a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020a3e:	3304      	adds	r3, #4

08020a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020a44:	d3f9      	bcc.n	8020a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020a46:	4a0a      	ldr	r2, [pc, #40]	@ (8020a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8020a48:	4c0a      	ldr	r4, [pc, #40]	@ (8020a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8020a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020a4c:	e001      	b.n	8020a52 <LoopFillZerobss>

08020a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020a50:	3204      	adds	r2, #4

08020a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020a54:	d3fb      	bcc.n	8020a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8020a56:	f001 fd15 	bl	8022484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020a5a:	f7ff fd89 	bl	8020570 <main>
  bx  lr    
 8020a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8020a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020a68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8020a6c:	080230a0 	.word	0x080230a0
  ldr r2, =_sbss
 8020a70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8020a74:	20000220 	.word	0x20000220

08020a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020a78:	e7fe      	b.n	8020a78 <ADC_IRQHandler>
	...

08020a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020a80:	4b0e      	ldr	r3, [pc, #56]	@ (8020abc <HAL_Init+0x40>)
 8020a82:	681b      	ldr	r3, [r3, #0]
 8020a84:	4a0d      	ldr	r2, [pc, #52]	@ (8020abc <HAL_Init+0x40>)
 8020a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8020abc <HAL_Init+0x40>)
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	4a0a      	ldr	r2, [pc, #40]	@ (8020abc <HAL_Init+0x40>)
 8020a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020a98:	4b08      	ldr	r3, [pc, #32]	@ (8020abc <HAL_Init+0x40>)
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	4a07      	ldr	r2, [pc, #28]	@ (8020abc <HAL_Init+0x40>)
 8020a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020aa4:	2003      	movs	r0, #3
 8020aa6:	f000 f931 	bl	8020d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020aaa:	200f      	movs	r0, #15
 8020aac:	f000 f808 	bl	8020ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020ab0:	f7ff fe62 	bl	8020778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020ab4:	2300      	movs	r3, #0
}
 8020ab6:	4618      	mov	r0, r3
 8020ab8:	bd80      	pop	{r7, pc}
 8020aba:	bf00      	nop
 8020abc:	40023c00 	.word	0x40023c00

08020ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b082      	sub	sp, #8
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020ac8:	4b12      	ldr	r3, [pc, #72]	@ (8020b14 <HAL_InitTick+0x54>)
 8020aca:	681a      	ldr	r2, [r3, #0]
 8020acc:	4b12      	ldr	r3, [pc, #72]	@ (8020b18 <HAL_InitTick+0x58>)
 8020ace:	781b      	ldrb	r3, [r3, #0]
 8020ad0:	4619      	mov	r1, r3
 8020ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ade:	4618      	mov	r0, r3
 8020ae0:	f000 f93b 	bl	8020d5a <HAL_SYSTICK_Config>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020aea:	2301      	movs	r3, #1
 8020aec:	e00e      	b.n	8020b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	2b0f      	cmp	r3, #15
 8020af2:	d80a      	bhi.n	8020b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020af4:	2200      	movs	r2, #0
 8020af6:	6879      	ldr	r1, [r7, #4]
 8020af8:	f04f 30ff 	mov.w	r0, #4294967295
 8020afc:	f000 f911 	bl	8020d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020b00:	4a06      	ldr	r2, [pc, #24]	@ (8020b1c <HAL_InitTick+0x5c>)
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020b06:	2300      	movs	r3, #0
 8020b08:	e000      	b.n	8020b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020b0a:	2301      	movs	r3, #1
}
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	3708      	adds	r7, #8
 8020b10:	46bd      	mov	sp, r7
 8020b12:	bd80      	pop	{r7, pc}
 8020b14:	20000000 	.word	0x20000000
 8020b18:	20000008 	.word	0x20000008
 8020b1c:	20000004 	.word	0x20000004

08020b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020b20:	b480      	push	{r7}
 8020b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020b24:	4b06      	ldr	r3, [pc, #24]	@ (8020b40 <HAL_IncTick+0x20>)
 8020b26:	781b      	ldrb	r3, [r3, #0]
 8020b28:	461a      	mov	r2, r3
 8020b2a:	4b06      	ldr	r3, [pc, #24]	@ (8020b44 <HAL_IncTick+0x24>)
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	4413      	add	r3, r2
 8020b30:	4a04      	ldr	r2, [pc, #16]	@ (8020b44 <HAL_IncTick+0x24>)
 8020b32:	6013      	str	r3, [r2, #0]
}
 8020b34:	bf00      	nop
 8020b36:	46bd      	mov	sp, r7
 8020b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b3c:	4770      	bx	lr
 8020b3e:	bf00      	nop
 8020b40:	20000008 	.word	0x20000008
 8020b44:	200000d0 	.word	0x200000d0

08020b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020b48:	b480      	push	{r7}
 8020b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8020b4c:	4b03      	ldr	r3, [pc, #12]	@ (8020b5c <HAL_GetTick+0x14>)
 8020b4e:	681b      	ldr	r3, [r3, #0]
}
 8020b50:	4618      	mov	r0, r3
 8020b52:	46bd      	mov	sp, r7
 8020b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b58:	4770      	bx	lr
 8020b5a:	bf00      	nop
 8020b5c:	200000d0 	.word	0x200000d0

08020b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020b60:	b580      	push	{r7, lr}
 8020b62:	b084      	sub	sp, #16
 8020b64:	af00      	add	r7, sp, #0
 8020b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020b68:	f7ff ffee 	bl	8020b48 <HAL_GetTick>
 8020b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020b72:	68fb      	ldr	r3, [r7, #12]
 8020b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b78:	d005      	beq.n	8020b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8020ba4 <HAL_Delay+0x44>)
 8020b7c:	781b      	ldrb	r3, [r3, #0]
 8020b7e:	461a      	mov	r2, r3
 8020b80:	68fb      	ldr	r3, [r7, #12]
 8020b82:	4413      	add	r3, r2
 8020b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020b86:	bf00      	nop
 8020b88:	f7ff ffde 	bl	8020b48 <HAL_GetTick>
 8020b8c:	4602      	mov	r2, r0
 8020b8e:	68bb      	ldr	r3, [r7, #8]
 8020b90:	1ad3      	subs	r3, r2, r3
 8020b92:	68fa      	ldr	r2, [r7, #12]
 8020b94:	429a      	cmp	r2, r3
 8020b96:	d8f7      	bhi.n	8020b88 <HAL_Delay+0x28>
  {
  }
}
 8020b98:	bf00      	nop
 8020b9a:	bf00      	nop
 8020b9c:	3710      	adds	r7, #16
 8020b9e:	46bd      	mov	sp, r7
 8020ba0:	bd80      	pop	{r7, pc}
 8020ba2:	bf00      	nop
 8020ba4:	20000008 	.word	0x20000008

08020ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020ba8:	b480      	push	{r7}
 8020baa:	b085      	sub	sp, #20
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	f003 0307 	and.w	r3, r3, #7
 8020bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8020bec <__NVIC_SetPriorityGrouping+0x44>)
 8020bba:	68db      	ldr	r3, [r3, #12]
 8020bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020bbe:	68ba      	ldr	r2, [r7, #8]
 8020bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020bc4:	4013      	ands	r3, r2
 8020bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020bc8:	68fb      	ldr	r3, [r7, #12]
 8020bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020bcc:	68bb      	ldr	r3, [r7, #8]
 8020bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020bda:	4a04      	ldr	r2, [pc, #16]	@ (8020bec <__NVIC_SetPriorityGrouping+0x44>)
 8020bdc:	68bb      	ldr	r3, [r7, #8]
 8020bde:	60d3      	str	r3, [r2, #12]
}
 8020be0:	bf00      	nop
 8020be2:	3714      	adds	r7, #20
 8020be4:	46bd      	mov	sp, r7
 8020be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bea:	4770      	bx	lr
 8020bec:	e000ed00 	.word	0xe000ed00

08020bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020bf0:	b480      	push	{r7}
 8020bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020bf4:	4b04      	ldr	r3, [pc, #16]	@ (8020c08 <__NVIC_GetPriorityGrouping+0x18>)
 8020bf6:	68db      	ldr	r3, [r3, #12]
 8020bf8:	0a1b      	lsrs	r3, r3, #8
 8020bfa:	f003 0307 	and.w	r3, r3, #7
}
 8020bfe:	4618      	mov	r0, r3
 8020c00:	46bd      	mov	sp, r7
 8020c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c06:	4770      	bx	lr
 8020c08:	e000ed00 	.word	0xe000ed00

08020c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020c0c:	b480      	push	{r7}
 8020c0e:	b083      	sub	sp, #12
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	4603      	mov	r3, r0
 8020c14:	6039      	str	r1, [r7, #0]
 8020c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020c1c:	2b00      	cmp	r3, #0
 8020c1e:	db0a      	blt.n	8020c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020c20:	683b      	ldr	r3, [r7, #0]
 8020c22:	b2da      	uxtb	r2, r3
 8020c24:	490c      	ldr	r1, [pc, #48]	@ (8020c58 <__NVIC_SetPriority+0x4c>)
 8020c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020c2a:	0112      	lsls	r2, r2, #4
 8020c2c:	b2d2      	uxtb	r2, r2
 8020c2e:	440b      	add	r3, r1
 8020c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020c34:	e00a      	b.n	8020c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	b2da      	uxtb	r2, r3
 8020c3a:	4908      	ldr	r1, [pc, #32]	@ (8020c5c <__NVIC_SetPriority+0x50>)
 8020c3c:	79fb      	ldrb	r3, [r7, #7]
 8020c3e:	f003 030f 	and.w	r3, r3, #15
 8020c42:	3b04      	subs	r3, #4
 8020c44:	0112      	lsls	r2, r2, #4
 8020c46:	b2d2      	uxtb	r2, r2
 8020c48:	440b      	add	r3, r1
 8020c4a:	761a      	strb	r2, [r3, #24]
}
 8020c4c:	bf00      	nop
 8020c4e:	370c      	adds	r7, #12
 8020c50:	46bd      	mov	sp, r7
 8020c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c56:	4770      	bx	lr
 8020c58:	e000e100 	.word	0xe000e100
 8020c5c:	e000ed00 	.word	0xe000ed00

08020c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020c60:	b480      	push	{r7}
 8020c62:	b089      	sub	sp, #36	@ 0x24
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	60f8      	str	r0, [r7, #12]
 8020c68:	60b9      	str	r1, [r7, #8]
 8020c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	f003 0307 	and.w	r3, r3, #7
 8020c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020c74:	69fb      	ldr	r3, [r7, #28]
 8020c76:	f1c3 0307 	rsb	r3, r3, #7
 8020c7a:	2b04      	cmp	r3, #4
 8020c7c:	bf28      	it	cs
 8020c7e:	2304      	movcs	r3, #4
 8020c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020c82:	69fb      	ldr	r3, [r7, #28]
 8020c84:	3304      	adds	r3, #4
 8020c86:	2b06      	cmp	r3, #6
 8020c88:	d902      	bls.n	8020c90 <NVIC_EncodePriority+0x30>
 8020c8a:	69fb      	ldr	r3, [r7, #28]
 8020c8c:	3b03      	subs	r3, #3
 8020c8e:	e000      	b.n	8020c92 <NVIC_EncodePriority+0x32>
 8020c90:	2300      	movs	r3, #0
 8020c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020c94:	f04f 32ff 	mov.w	r2, #4294967295
 8020c98:	69bb      	ldr	r3, [r7, #24]
 8020c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8020c9e:	43da      	mvns	r2, r3
 8020ca0:	68bb      	ldr	r3, [r7, #8]
 8020ca2:	401a      	ands	r2, r3
 8020ca4:	697b      	ldr	r3, [r7, #20]
 8020ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8020cac:	697b      	ldr	r3, [r7, #20]
 8020cae:	fa01 f303 	lsl.w	r3, r1, r3
 8020cb2:	43d9      	mvns	r1, r3
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020cb8:	4313      	orrs	r3, r2
         );
}
 8020cba:	4618      	mov	r0, r3
 8020cbc:	3724      	adds	r7, #36	@ 0x24
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cc4:	4770      	bx	lr
	...

08020cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020cc8:	b580      	push	{r7, lr}
 8020cca:	b082      	sub	sp, #8
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	3b01      	subs	r3, #1
 8020cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020cd8:	d301      	bcc.n	8020cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020cda:	2301      	movs	r3, #1
 8020cdc:	e00f      	b.n	8020cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020cde:	4a0a      	ldr	r2, [pc, #40]	@ (8020d08 <SysTick_Config+0x40>)
 8020ce0:	687b      	ldr	r3, [r7, #4]
 8020ce2:	3b01      	subs	r3, #1
 8020ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020ce6:	210f      	movs	r1, #15
 8020ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8020cec:	f7ff ff8e 	bl	8020c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020cf0:	4b05      	ldr	r3, [pc, #20]	@ (8020d08 <SysTick_Config+0x40>)
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020cf6:	4b04      	ldr	r3, [pc, #16]	@ (8020d08 <SysTick_Config+0x40>)
 8020cf8:	2207      	movs	r2, #7
 8020cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020cfc:	2300      	movs	r3, #0
}
 8020cfe:	4618      	mov	r0, r3
 8020d00:	3708      	adds	r7, #8
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bd80      	pop	{r7, pc}
 8020d06:	bf00      	nop
 8020d08:	e000e010 	.word	0xe000e010

08020d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020d0c:	b580      	push	{r7, lr}
 8020d0e:	b082      	sub	sp, #8
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020d14:	6878      	ldr	r0, [r7, #4]
 8020d16:	f7ff ff47 	bl	8020ba8 <__NVIC_SetPriorityGrouping>
}
 8020d1a:	bf00      	nop
 8020d1c:	3708      	adds	r7, #8
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	bd80      	pop	{r7, pc}

08020d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020d22:	b580      	push	{r7, lr}
 8020d24:	b086      	sub	sp, #24
 8020d26:	af00      	add	r7, sp, #0
 8020d28:	4603      	mov	r3, r0
 8020d2a:	60b9      	str	r1, [r7, #8]
 8020d2c:	607a      	str	r2, [r7, #4]
 8020d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020d30:	2300      	movs	r3, #0
 8020d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020d34:	f7ff ff5c 	bl	8020bf0 <__NVIC_GetPriorityGrouping>
 8020d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020d3a:	687a      	ldr	r2, [r7, #4]
 8020d3c:	68b9      	ldr	r1, [r7, #8]
 8020d3e:	6978      	ldr	r0, [r7, #20]
 8020d40:	f7ff ff8e 	bl	8020c60 <NVIC_EncodePriority>
 8020d44:	4602      	mov	r2, r0
 8020d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020d4a:	4611      	mov	r1, r2
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	f7ff ff5d 	bl	8020c0c <__NVIC_SetPriority>
}
 8020d52:	bf00      	nop
 8020d54:	3718      	adds	r7, #24
 8020d56:	46bd      	mov	sp, r7
 8020d58:	bd80      	pop	{r7, pc}

08020d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020d5a:	b580      	push	{r7, lr}
 8020d5c:	b082      	sub	sp, #8
 8020d5e:	af00      	add	r7, sp, #0
 8020d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020d62:	6878      	ldr	r0, [r7, #4]
 8020d64:	f7ff ffb0 	bl	8020cc8 <SysTick_Config>
 8020d68:	4603      	mov	r3, r0
}
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	3708      	adds	r7, #8
 8020d6e:	46bd      	mov	sp, r7
 8020d70:	bd80      	pop	{r7, pc}
	...

08020d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020d74:	b480      	push	{r7}
 8020d76:	b089      	sub	sp, #36	@ 0x24
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
 8020d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8020d7e:	2300      	movs	r3, #0
 8020d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8020d82:	2300      	movs	r3, #0
 8020d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8020d86:	2300      	movs	r3, #0
 8020d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	61fb      	str	r3, [r7, #28]
 8020d8e:	e159      	b.n	8021044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8020d90:	2201      	movs	r2, #1
 8020d92:	69fb      	ldr	r3, [r7, #28]
 8020d94:	fa02 f303 	lsl.w	r3, r2, r3
 8020d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020d9a:	683b      	ldr	r3, [r7, #0]
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	697a      	ldr	r2, [r7, #20]
 8020da0:	4013      	ands	r3, r2
 8020da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8020da4:	693a      	ldr	r2, [r7, #16]
 8020da6:	697b      	ldr	r3, [r7, #20]
 8020da8:	429a      	cmp	r2, r3
 8020daa:	f040 8148 	bne.w	802103e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020dae:	683b      	ldr	r3, [r7, #0]
 8020db0:	685b      	ldr	r3, [r3, #4]
 8020db2:	f003 0303 	and.w	r3, r3, #3
 8020db6:	2b01      	cmp	r3, #1
 8020db8:	d005      	beq.n	8020dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	685b      	ldr	r3, [r3, #4]
 8020dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020dc2:	2b02      	cmp	r3, #2
 8020dc4:	d130      	bne.n	8020e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	689b      	ldr	r3, [r3, #8]
 8020dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8020dcc:	69fb      	ldr	r3, [r7, #28]
 8020dce:	005b      	lsls	r3, r3, #1
 8020dd0:	2203      	movs	r2, #3
 8020dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8020dd6:	43db      	mvns	r3, r3
 8020dd8:	69ba      	ldr	r2, [r7, #24]
 8020dda:	4013      	ands	r3, r2
 8020ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020dde:	683b      	ldr	r3, [r7, #0]
 8020de0:	68da      	ldr	r2, [r3, #12]
 8020de2:	69fb      	ldr	r3, [r7, #28]
 8020de4:	005b      	lsls	r3, r3, #1
 8020de6:	fa02 f303 	lsl.w	r3, r2, r3
 8020dea:	69ba      	ldr	r2, [r7, #24]
 8020dec:	4313      	orrs	r3, r2
 8020dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	69ba      	ldr	r2, [r7, #24]
 8020df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	685b      	ldr	r3, [r3, #4]
 8020dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020dfc:	2201      	movs	r2, #1
 8020dfe:	69fb      	ldr	r3, [r7, #28]
 8020e00:	fa02 f303 	lsl.w	r3, r2, r3
 8020e04:	43db      	mvns	r3, r3
 8020e06:	69ba      	ldr	r2, [r7, #24]
 8020e08:	4013      	ands	r3, r2
 8020e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020e0c:	683b      	ldr	r3, [r7, #0]
 8020e0e:	685b      	ldr	r3, [r3, #4]
 8020e10:	091b      	lsrs	r3, r3, #4
 8020e12:	f003 0201 	and.w	r2, r3, #1
 8020e16:	69fb      	ldr	r3, [r7, #28]
 8020e18:	fa02 f303 	lsl.w	r3, r2, r3
 8020e1c:	69ba      	ldr	r2, [r7, #24]
 8020e1e:	4313      	orrs	r3, r2
 8020e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	69ba      	ldr	r2, [r7, #24]
 8020e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020e28:	683b      	ldr	r3, [r7, #0]
 8020e2a:	685b      	ldr	r3, [r3, #4]
 8020e2c:	f003 0303 	and.w	r3, r3, #3
 8020e30:	2b03      	cmp	r3, #3
 8020e32:	d017      	beq.n	8020e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	68db      	ldr	r3, [r3, #12]
 8020e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8020e3a:	69fb      	ldr	r3, [r7, #28]
 8020e3c:	005b      	lsls	r3, r3, #1
 8020e3e:	2203      	movs	r2, #3
 8020e40:	fa02 f303 	lsl.w	r3, r2, r3
 8020e44:	43db      	mvns	r3, r3
 8020e46:	69ba      	ldr	r2, [r7, #24]
 8020e48:	4013      	ands	r3, r2
 8020e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020e4c:	683b      	ldr	r3, [r7, #0]
 8020e4e:	689a      	ldr	r2, [r3, #8]
 8020e50:	69fb      	ldr	r3, [r7, #28]
 8020e52:	005b      	lsls	r3, r3, #1
 8020e54:	fa02 f303 	lsl.w	r3, r2, r3
 8020e58:	69ba      	ldr	r2, [r7, #24]
 8020e5a:	4313      	orrs	r3, r2
 8020e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	69ba      	ldr	r2, [r7, #24]
 8020e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020e64:	683b      	ldr	r3, [r7, #0]
 8020e66:	685b      	ldr	r3, [r3, #4]
 8020e68:	f003 0303 	and.w	r3, r3, #3
 8020e6c:	2b02      	cmp	r3, #2
 8020e6e:	d123      	bne.n	8020eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020e70:	69fb      	ldr	r3, [r7, #28]
 8020e72:	08da      	lsrs	r2, r3, #3
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	3208      	adds	r2, #8
 8020e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020e7e:	69fb      	ldr	r3, [r7, #28]
 8020e80:	f003 0307 	and.w	r3, r3, #7
 8020e84:	009b      	lsls	r3, r3, #2
 8020e86:	220f      	movs	r2, #15
 8020e88:	fa02 f303 	lsl.w	r3, r2, r3
 8020e8c:	43db      	mvns	r3, r3
 8020e8e:	69ba      	ldr	r2, [r7, #24]
 8020e90:	4013      	ands	r3, r2
 8020e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8020e94:	683b      	ldr	r3, [r7, #0]
 8020e96:	691a      	ldr	r2, [r3, #16]
 8020e98:	69fb      	ldr	r3, [r7, #28]
 8020e9a:	f003 0307 	and.w	r3, r3, #7
 8020e9e:	009b      	lsls	r3, r3, #2
 8020ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8020ea4:	69ba      	ldr	r2, [r7, #24]
 8020ea6:	4313      	orrs	r3, r2
 8020ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8020eaa:	69fb      	ldr	r3, [r7, #28]
 8020eac:	08da      	lsrs	r2, r3, #3
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	3208      	adds	r2, #8
 8020eb2:	69b9      	ldr	r1, [r7, #24]
 8020eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	681b      	ldr	r3, [r3, #0]
 8020ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8020ebe:	69fb      	ldr	r3, [r7, #28]
 8020ec0:	005b      	lsls	r3, r3, #1
 8020ec2:	2203      	movs	r2, #3
 8020ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8020ec8:	43db      	mvns	r3, r3
 8020eca:	69ba      	ldr	r2, [r7, #24]
 8020ecc:	4013      	ands	r3, r2
 8020ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	685b      	ldr	r3, [r3, #4]
 8020ed4:	f003 0203 	and.w	r2, r3, #3
 8020ed8:	69fb      	ldr	r3, [r7, #28]
 8020eda:	005b      	lsls	r3, r3, #1
 8020edc:	fa02 f303 	lsl.w	r3, r2, r3
 8020ee0:	69ba      	ldr	r2, [r7, #24]
 8020ee2:	4313      	orrs	r3, r2
 8020ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	69ba      	ldr	r2, [r7, #24]
 8020eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	685b      	ldr	r3, [r3, #4]
 8020ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	f000 80a2 	beq.w	802103e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020efa:	2300      	movs	r3, #0
 8020efc:	60fb      	str	r3, [r7, #12]
 8020efe:	4b57      	ldr	r3, [pc, #348]	@ (802105c <HAL_GPIO_Init+0x2e8>)
 8020f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020f02:	4a56      	ldr	r2, [pc, #344]	@ (802105c <HAL_GPIO_Init+0x2e8>)
 8020f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8020f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8020f0a:	4b54      	ldr	r3, [pc, #336]	@ (802105c <HAL_GPIO_Init+0x2e8>)
 8020f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020f12:	60fb      	str	r3, [r7, #12]
 8020f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8020f16:	4a52      	ldr	r2, [pc, #328]	@ (8021060 <HAL_GPIO_Init+0x2ec>)
 8020f18:	69fb      	ldr	r3, [r7, #28]
 8020f1a:	089b      	lsrs	r3, r3, #2
 8020f1c:	3302      	adds	r3, #2
 8020f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020f24:	69fb      	ldr	r3, [r7, #28]
 8020f26:	f003 0303 	and.w	r3, r3, #3
 8020f2a:	009b      	lsls	r3, r3, #2
 8020f2c:	220f      	movs	r2, #15
 8020f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8020f32:	43db      	mvns	r3, r3
 8020f34:	69ba      	ldr	r2, [r7, #24]
 8020f36:	4013      	ands	r3, r2
 8020f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	4a49      	ldr	r2, [pc, #292]	@ (8021064 <HAL_GPIO_Init+0x2f0>)
 8020f3e:	4293      	cmp	r3, r2
 8020f40:	d019      	beq.n	8020f76 <HAL_GPIO_Init+0x202>
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	4a48      	ldr	r2, [pc, #288]	@ (8021068 <HAL_GPIO_Init+0x2f4>)
 8020f46:	4293      	cmp	r3, r2
 8020f48:	d013      	beq.n	8020f72 <HAL_GPIO_Init+0x1fe>
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	4a47      	ldr	r2, [pc, #284]	@ (802106c <HAL_GPIO_Init+0x2f8>)
 8020f4e:	4293      	cmp	r3, r2
 8020f50:	d00d      	beq.n	8020f6e <HAL_GPIO_Init+0x1fa>
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	4a46      	ldr	r2, [pc, #280]	@ (8021070 <HAL_GPIO_Init+0x2fc>)
 8020f56:	4293      	cmp	r3, r2
 8020f58:	d007      	beq.n	8020f6a <HAL_GPIO_Init+0x1f6>
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	4a45      	ldr	r2, [pc, #276]	@ (8021074 <HAL_GPIO_Init+0x300>)
 8020f5e:	4293      	cmp	r3, r2
 8020f60:	d101      	bne.n	8020f66 <HAL_GPIO_Init+0x1f2>
 8020f62:	2304      	movs	r3, #4
 8020f64:	e008      	b.n	8020f78 <HAL_GPIO_Init+0x204>
 8020f66:	2307      	movs	r3, #7
 8020f68:	e006      	b.n	8020f78 <HAL_GPIO_Init+0x204>
 8020f6a:	2303      	movs	r3, #3
 8020f6c:	e004      	b.n	8020f78 <HAL_GPIO_Init+0x204>
 8020f6e:	2302      	movs	r3, #2
 8020f70:	e002      	b.n	8020f78 <HAL_GPIO_Init+0x204>
 8020f72:	2301      	movs	r3, #1
 8020f74:	e000      	b.n	8020f78 <HAL_GPIO_Init+0x204>
 8020f76:	2300      	movs	r3, #0
 8020f78:	69fa      	ldr	r2, [r7, #28]
 8020f7a:	f002 0203 	and.w	r2, r2, #3
 8020f7e:	0092      	lsls	r2, r2, #2
 8020f80:	4093      	lsls	r3, r2
 8020f82:	69ba      	ldr	r2, [r7, #24]
 8020f84:	4313      	orrs	r3, r2
 8020f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020f88:	4935      	ldr	r1, [pc, #212]	@ (8021060 <HAL_GPIO_Init+0x2ec>)
 8020f8a:	69fb      	ldr	r3, [r7, #28]
 8020f8c:	089b      	lsrs	r3, r3, #2
 8020f8e:	3302      	adds	r3, #2
 8020f90:	69ba      	ldr	r2, [r7, #24]
 8020f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020f96:	4b38      	ldr	r3, [pc, #224]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8020f98:	689b      	ldr	r3, [r3, #8]
 8020f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f9c:	693b      	ldr	r3, [r7, #16]
 8020f9e:	43db      	mvns	r3, r3
 8020fa0:	69ba      	ldr	r2, [r7, #24]
 8020fa2:	4013      	ands	r3, r2
 8020fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8020fa6:	683b      	ldr	r3, [r7, #0]
 8020fa8:	685b      	ldr	r3, [r3, #4]
 8020faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d003      	beq.n	8020fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8020fb2:	69ba      	ldr	r2, [r7, #24]
 8020fb4:	693b      	ldr	r3, [r7, #16]
 8020fb6:	4313      	orrs	r3, r2
 8020fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8020fba:	4a2f      	ldr	r2, [pc, #188]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8020fbc:	69bb      	ldr	r3, [r7, #24]
 8020fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8020fc2:	68db      	ldr	r3, [r3, #12]
 8020fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020fc6:	693b      	ldr	r3, [r7, #16]
 8020fc8:	43db      	mvns	r3, r3
 8020fca:	69ba      	ldr	r2, [r7, #24]
 8020fcc:	4013      	ands	r3, r2
 8020fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8020fd0:	683b      	ldr	r3, [r7, #0]
 8020fd2:	685b      	ldr	r3, [r3, #4]
 8020fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d003      	beq.n	8020fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8020fdc:	69ba      	ldr	r2, [r7, #24]
 8020fde:	693b      	ldr	r3, [r7, #16]
 8020fe0:	4313      	orrs	r3, r2
 8020fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8020fe4:	4a24      	ldr	r2, [pc, #144]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8020fe6:	69bb      	ldr	r3, [r7, #24]
 8020fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8020fea:	4b23      	ldr	r3, [pc, #140]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8020fec:	685b      	ldr	r3, [r3, #4]
 8020fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020ff0:	693b      	ldr	r3, [r7, #16]
 8020ff2:	43db      	mvns	r3, r3
 8020ff4:	69ba      	ldr	r2, [r7, #24]
 8020ff6:	4013      	ands	r3, r2
 8020ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8020ffa:	683b      	ldr	r3, [r7, #0]
 8020ffc:	685b      	ldr	r3, [r3, #4]
 8020ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021002:	2b00      	cmp	r3, #0
 8021004:	d003      	beq.n	802100e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8021006:	69ba      	ldr	r2, [r7, #24]
 8021008:	693b      	ldr	r3, [r7, #16]
 802100a:	4313      	orrs	r3, r2
 802100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802100e:	4a1a      	ldr	r2, [pc, #104]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8021010:	69bb      	ldr	r3, [r7, #24]
 8021012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8021014:	4b18      	ldr	r3, [pc, #96]	@ (8021078 <HAL_GPIO_Init+0x304>)
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802101a:	693b      	ldr	r3, [r7, #16]
 802101c:	43db      	mvns	r3, r3
 802101e:	69ba      	ldr	r2, [r7, #24]
 8021020:	4013      	ands	r3, r2
 8021022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8021024:	683b      	ldr	r3, [r7, #0]
 8021026:	685b      	ldr	r3, [r3, #4]
 8021028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802102c:	2b00      	cmp	r3, #0
 802102e:	d003      	beq.n	8021038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8021030:	69ba      	ldr	r2, [r7, #24]
 8021032:	693b      	ldr	r3, [r7, #16]
 8021034:	4313      	orrs	r3, r2
 8021036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8021038:	4a0f      	ldr	r2, [pc, #60]	@ (8021078 <HAL_GPIO_Init+0x304>)
 802103a:	69bb      	ldr	r3, [r7, #24]
 802103c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802103e:	69fb      	ldr	r3, [r7, #28]
 8021040:	3301      	adds	r3, #1
 8021042:	61fb      	str	r3, [r7, #28]
 8021044:	69fb      	ldr	r3, [r7, #28]
 8021046:	2b0f      	cmp	r3, #15
 8021048:	f67f aea2 	bls.w	8020d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 802104c:	bf00      	nop
 802104e:	bf00      	nop
 8021050:	3724      	adds	r7, #36	@ 0x24
 8021052:	46bd      	mov	sp, r7
 8021054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021058:	4770      	bx	lr
 802105a:	bf00      	nop
 802105c:	40023800 	.word	0x40023800
 8021060:	40013800 	.word	0x40013800
 8021064:	40020000 	.word	0x40020000
 8021068:	40020400 	.word	0x40020400
 802106c:	40020800 	.word	0x40020800
 8021070:	40020c00 	.word	0x40020c00
 8021074:	40021000 	.word	0x40021000
 8021078:	40013c00 	.word	0x40013c00

0802107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802107c:	b480      	push	{r7}
 802107e:	b083      	sub	sp, #12
 8021080:	af00      	add	r7, sp, #0
 8021082:	6078      	str	r0, [r7, #4]
 8021084:	460b      	mov	r3, r1
 8021086:	807b      	strh	r3, [r7, #2]
 8021088:	4613      	mov	r3, r2
 802108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802108c:	787b      	ldrb	r3, [r7, #1]
 802108e:	2b00      	cmp	r3, #0
 8021090:	d003      	beq.n	802109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021092:	887a      	ldrh	r2, [r7, #2]
 8021094:	687b      	ldr	r3, [r7, #4]
 8021096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8021098:	e003      	b.n	80210a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802109a:	887b      	ldrh	r3, [r7, #2]
 802109c:	041a      	lsls	r2, r3, #16
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	619a      	str	r2, [r3, #24]
}
 80210a2:	bf00      	nop
 80210a4:	370c      	adds	r7, #12
 80210a6:	46bd      	mov	sp, r7
 80210a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ac:	4770      	bx	lr

080210ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80210ae:	b480      	push	{r7}
 80210b0:	b085      	sub	sp, #20
 80210b2:	af00      	add	r7, sp, #0
 80210b4:	6078      	str	r0, [r7, #4]
 80210b6:	460b      	mov	r3, r1
 80210b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	695b      	ldr	r3, [r3, #20]
 80210be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80210c0:	887a      	ldrh	r2, [r7, #2]
 80210c2:	68fb      	ldr	r3, [r7, #12]
 80210c4:	4013      	ands	r3, r2
 80210c6:	041a      	lsls	r2, r3, #16
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	43d9      	mvns	r1, r3
 80210cc:	887b      	ldrh	r3, [r7, #2]
 80210ce:	400b      	ands	r3, r1
 80210d0:	431a      	orrs	r2, r3
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	619a      	str	r2, [r3, #24]
}
 80210d6:	bf00      	nop
 80210d8:	3714      	adds	r7, #20
 80210da:	46bd      	mov	sp, r7
 80210dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210e0:	4770      	bx	lr
	...

080210e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80210e4:	b580      	push	{r7, lr}
 80210e6:	b086      	sub	sp, #24
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	d101      	bne.n	80210f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80210f2:	2301      	movs	r3, #1
 80210f4:	e267      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	f003 0301 	and.w	r3, r3, #1
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d075      	beq.n	80211ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021102:	4b88      	ldr	r3, [pc, #544]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021104:	689b      	ldr	r3, [r3, #8]
 8021106:	f003 030c 	and.w	r3, r3, #12
 802110a:	2b04      	cmp	r3, #4
 802110c:	d00c      	beq.n	8021128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802110e:	4b85      	ldr	r3, [pc, #532]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021110:	689b      	ldr	r3, [r3, #8]
 8021112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021116:	2b08      	cmp	r3, #8
 8021118:	d112      	bne.n	8021140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802111a:	4b82      	ldr	r3, [pc, #520]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 802111c:	685b      	ldr	r3, [r3, #4]
 802111e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8021122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8021126:	d10b      	bne.n	8021140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021128:	4b7e      	ldr	r3, [pc, #504]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021130:	2b00      	cmp	r3, #0
 8021132:	d05b      	beq.n	80211ec <HAL_RCC_OscConfig+0x108>
 8021134:	687b      	ldr	r3, [r7, #4]
 8021136:	685b      	ldr	r3, [r3, #4]
 8021138:	2b00      	cmp	r3, #0
 802113a:	d157      	bne.n	80211ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802113c:	2301      	movs	r3, #1
 802113e:	e242      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	685b      	ldr	r3, [r3, #4]
 8021144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021148:	d106      	bne.n	8021158 <HAL_RCC_OscConfig+0x74>
 802114a:	4b76      	ldr	r3, [pc, #472]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	4a75      	ldr	r2, [pc, #468]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021154:	6013      	str	r3, [r2, #0]
 8021156:	e01d      	b.n	8021194 <HAL_RCC_OscConfig+0xb0>
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	685b      	ldr	r3, [r3, #4]
 802115c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021160:	d10c      	bne.n	802117c <HAL_RCC_OscConfig+0x98>
 8021162:	4b70      	ldr	r3, [pc, #448]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	4a6f      	ldr	r2, [pc, #444]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802116c:	6013      	str	r3, [r2, #0]
 802116e:	4b6d      	ldr	r3, [pc, #436]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	4a6c      	ldr	r2, [pc, #432]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021178:	6013      	str	r3, [r2, #0]
 802117a:	e00b      	b.n	8021194 <HAL_RCC_OscConfig+0xb0>
 802117c:	4b69      	ldr	r3, [pc, #420]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 802117e:	681b      	ldr	r3, [r3, #0]
 8021180:	4a68      	ldr	r2, [pc, #416]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021186:	6013      	str	r3, [r2, #0]
 8021188:	4b66      	ldr	r3, [pc, #408]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	4a65      	ldr	r2, [pc, #404]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 802118e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	685b      	ldr	r3, [r3, #4]
 8021198:	2b00      	cmp	r3, #0
 802119a:	d013      	beq.n	80211c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802119c:	f7ff fcd4 	bl	8020b48 <HAL_GetTick>
 80211a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80211a2:	e008      	b.n	80211b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80211a4:	f7ff fcd0 	bl	8020b48 <HAL_GetTick>
 80211a8:	4602      	mov	r2, r0
 80211aa:	693b      	ldr	r3, [r7, #16]
 80211ac:	1ad3      	subs	r3, r2, r3
 80211ae:	2b64      	cmp	r3, #100	@ 0x64
 80211b0:	d901      	bls.n	80211b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80211b2:	2303      	movs	r3, #3
 80211b4:	e207      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80211b6:	4b5b      	ldr	r3, [pc, #364]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 80211b8:	681b      	ldr	r3, [r3, #0]
 80211ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d0f0      	beq.n	80211a4 <HAL_RCC_OscConfig+0xc0>
 80211c2:	e014      	b.n	80211ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80211c4:	f7ff fcc0 	bl	8020b48 <HAL_GetTick>
 80211c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80211ca:	e008      	b.n	80211de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80211cc:	f7ff fcbc 	bl	8020b48 <HAL_GetTick>
 80211d0:	4602      	mov	r2, r0
 80211d2:	693b      	ldr	r3, [r7, #16]
 80211d4:	1ad3      	subs	r3, r2, r3
 80211d6:	2b64      	cmp	r3, #100	@ 0x64
 80211d8:	d901      	bls.n	80211de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80211da:	2303      	movs	r3, #3
 80211dc:	e1f3      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80211de:	4b51      	ldr	r3, [pc, #324]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 80211e0:	681b      	ldr	r3, [r3, #0]
 80211e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d1f0      	bne.n	80211cc <HAL_RCC_OscConfig+0xe8>
 80211ea:	e000      	b.n	80211ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80211ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	f003 0302 	and.w	r3, r3, #2
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d063      	beq.n	80212c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80211fa:	4b4a      	ldr	r3, [pc, #296]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 80211fc:	689b      	ldr	r3, [r3, #8]
 80211fe:	f003 030c 	and.w	r3, r3, #12
 8021202:	2b00      	cmp	r3, #0
 8021204:	d00b      	beq.n	802121e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021206:	4b47      	ldr	r3, [pc, #284]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021208:	689b      	ldr	r3, [r3, #8]
 802120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802120e:	2b08      	cmp	r3, #8
 8021210:	d11c      	bne.n	802124c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021212:	4b44      	ldr	r3, [pc, #272]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021214:	685b      	ldr	r3, [r3, #4]
 8021216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802121a:	2b00      	cmp	r3, #0
 802121c:	d116      	bne.n	802124c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802121e:	4b41      	ldr	r3, [pc, #260]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	f003 0302 	and.w	r3, r3, #2
 8021226:	2b00      	cmp	r3, #0
 8021228:	d005      	beq.n	8021236 <HAL_RCC_OscConfig+0x152>
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	68db      	ldr	r3, [r3, #12]
 802122e:	2b01      	cmp	r3, #1
 8021230:	d001      	beq.n	8021236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8021232:	2301      	movs	r3, #1
 8021234:	e1c7      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021236:	4b3b      	ldr	r3, [pc, #236]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021238:	681b      	ldr	r3, [r3, #0]
 802123a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	691b      	ldr	r3, [r3, #16]
 8021242:	00db      	lsls	r3, r3, #3
 8021244:	4937      	ldr	r1, [pc, #220]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021246:	4313      	orrs	r3, r2
 8021248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802124a:	e03a      	b.n	80212c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	68db      	ldr	r3, [r3, #12]
 8021250:	2b00      	cmp	r3, #0
 8021252:	d020      	beq.n	8021296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021254:	4b34      	ldr	r3, [pc, #208]	@ (8021328 <HAL_RCC_OscConfig+0x244>)
 8021256:	2201      	movs	r2, #1
 8021258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802125a:	f7ff fc75 	bl	8020b48 <HAL_GetTick>
 802125e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021260:	e008      	b.n	8021274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021262:	f7ff fc71 	bl	8020b48 <HAL_GetTick>
 8021266:	4602      	mov	r2, r0
 8021268:	693b      	ldr	r3, [r7, #16]
 802126a:	1ad3      	subs	r3, r2, r3
 802126c:	2b02      	cmp	r3, #2
 802126e:	d901      	bls.n	8021274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8021270:	2303      	movs	r3, #3
 8021272:	e1a8      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021274:	4b2b      	ldr	r3, [pc, #172]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	f003 0302 	and.w	r3, r3, #2
 802127c:	2b00      	cmp	r3, #0
 802127e:	d0f0      	beq.n	8021262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021280:	4b28      	ldr	r3, [pc, #160]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	691b      	ldr	r3, [r3, #16]
 802128c:	00db      	lsls	r3, r3, #3
 802128e:	4925      	ldr	r1, [pc, #148]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 8021290:	4313      	orrs	r3, r2
 8021292:	600b      	str	r3, [r1, #0]
 8021294:	e015      	b.n	80212c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021296:	4b24      	ldr	r3, [pc, #144]	@ (8021328 <HAL_RCC_OscConfig+0x244>)
 8021298:	2200      	movs	r2, #0
 802129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802129c:	f7ff fc54 	bl	8020b48 <HAL_GetTick>
 80212a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80212a2:	e008      	b.n	80212b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80212a4:	f7ff fc50 	bl	8020b48 <HAL_GetTick>
 80212a8:	4602      	mov	r2, r0
 80212aa:	693b      	ldr	r3, [r7, #16]
 80212ac:	1ad3      	subs	r3, r2, r3
 80212ae:	2b02      	cmp	r3, #2
 80212b0:	d901      	bls.n	80212b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80212b2:	2303      	movs	r3, #3
 80212b4:	e187      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80212b6:	4b1b      	ldr	r3, [pc, #108]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 80212b8:	681b      	ldr	r3, [r3, #0]
 80212ba:	f003 0302 	and.w	r3, r3, #2
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d1f0      	bne.n	80212a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	f003 0308 	and.w	r3, r3, #8
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d036      	beq.n	802133c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	695b      	ldr	r3, [r3, #20]
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d016      	beq.n	8021304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80212d6:	4b15      	ldr	r3, [pc, #84]	@ (802132c <HAL_RCC_OscConfig+0x248>)
 80212d8:	2201      	movs	r2, #1
 80212da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80212dc:	f7ff fc34 	bl	8020b48 <HAL_GetTick>
 80212e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80212e2:	e008      	b.n	80212f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80212e4:	f7ff fc30 	bl	8020b48 <HAL_GetTick>
 80212e8:	4602      	mov	r2, r0
 80212ea:	693b      	ldr	r3, [r7, #16]
 80212ec:	1ad3      	subs	r3, r2, r3
 80212ee:	2b02      	cmp	r3, #2
 80212f0:	d901      	bls.n	80212f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80212f2:	2303      	movs	r3, #3
 80212f4:	e167      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80212f6:	4b0b      	ldr	r3, [pc, #44]	@ (8021324 <HAL_RCC_OscConfig+0x240>)
 80212f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80212fa:	f003 0302 	and.w	r3, r3, #2
 80212fe:	2b00      	cmp	r3, #0
 8021300:	d0f0      	beq.n	80212e4 <HAL_RCC_OscConfig+0x200>
 8021302:	e01b      	b.n	802133c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021304:	4b09      	ldr	r3, [pc, #36]	@ (802132c <HAL_RCC_OscConfig+0x248>)
 8021306:	2200      	movs	r2, #0
 8021308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802130a:	f7ff fc1d 	bl	8020b48 <HAL_GetTick>
 802130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021310:	e00e      	b.n	8021330 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021312:	f7ff fc19 	bl	8020b48 <HAL_GetTick>
 8021316:	4602      	mov	r2, r0
 8021318:	693b      	ldr	r3, [r7, #16]
 802131a:	1ad3      	subs	r3, r2, r3
 802131c:	2b02      	cmp	r3, #2
 802131e:	d907      	bls.n	8021330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8021320:	2303      	movs	r3, #3
 8021322:	e150      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
 8021324:	40023800 	.word	0x40023800
 8021328:	42470000 	.word	0x42470000
 802132c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021330:	4b88      	ldr	r3, [pc, #544]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021334:	f003 0302 	and.w	r3, r3, #2
 8021338:	2b00      	cmp	r3, #0
 802133a:	d1ea      	bne.n	8021312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	f003 0304 	and.w	r3, r3, #4
 8021344:	2b00      	cmp	r3, #0
 8021346:	f000 8097 	beq.w	8021478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802134a:	2300      	movs	r3, #0
 802134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802134e:	4b81      	ldr	r3, [pc, #516]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021356:	2b00      	cmp	r3, #0
 8021358:	d10f      	bne.n	802137a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802135a:	2300      	movs	r3, #0
 802135c:	60bb      	str	r3, [r7, #8]
 802135e:	4b7d      	ldr	r3, [pc, #500]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021362:	4a7c      	ldr	r2, [pc, #496]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021368:	6413      	str	r3, [r2, #64]	@ 0x40
 802136a:	4b7a      	ldr	r3, [pc, #488]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 802136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021372:	60bb      	str	r3, [r7, #8]
 8021374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021376:	2301      	movs	r3, #1
 8021378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802137a:	4b77      	ldr	r3, [pc, #476]	@ (8021558 <HAL_RCC_OscConfig+0x474>)
 802137c:	681b      	ldr	r3, [r3, #0]
 802137e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021382:	2b00      	cmp	r3, #0
 8021384:	d118      	bne.n	80213b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021386:	4b74      	ldr	r3, [pc, #464]	@ (8021558 <HAL_RCC_OscConfig+0x474>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	4a73      	ldr	r2, [pc, #460]	@ (8021558 <HAL_RCC_OscConfig+0x474>)
 802138c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021392:	f7ff fbd9 	bl	8020b48 <HAL_GetTick>
 8021396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021398:	e008      	b.n	80213ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802139a:	f7ff fbd5 	bl	8020b48 <HAL_GetTick>
 802139e:	4602      	mov	r2, r0
 80213a0:	693b      	ldr	r3, [r7, #16]
 80213a2:	1ad3      	subs	r3, r2, r3
 80213a4:	2b02      	cmp	r3, #2
 80213a6:	d901      	bls.n	80213ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80213a8:	2303      	movs	r3, #3
 80213aa:	e10c      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80213ac:	4b6a      	ldr	r3, [pc, #424]	@ (8021558 <HAL_RCC_OscConfig+0x474>)
 80213ae:	681b      	ldr	r3, [r3, #0]
 80213b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d0f0      	beq.n	802139a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	689b      	ldr	r3, [r3, #8]
 80213bc:	2b01      	cmp	r3, #1
 80213be:	d106      	bne.n	80213ce <HAL_RCC_OscConfig+0x2ea>
 80213c0:	4b64      	ldr	r3, [pc, #400]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80213c4:	4a63      	ldr	r2, [pc, #396]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213c6:	f043 0301 	orr.w	r3, r3, #1
 80213ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80213cc:	e01c      	b.n	8021408 <HAL_RCC_OscConfig+0x324>
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	689b      	ldr	r3, [r3, #8]
 80213d2:	2b05      	cmp	r3, #5
 80213d4:	d10c      	bne.n	80213f0 <HAL_RCC_OscConfig+0x30c>
 80213d6:	4b5f      	ldr	r3, [pc, #380]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80213da:	4a5e      	ldr	r2, [pc, #376]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213dc:	f043 0304 	orr.w	r3, r3, #4
 80213e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80213e2:	4b5c      	ldr	r3, [pc, #368]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80213e6:	4a5b      	ldr	r2, [pc, #364]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213e8:	f043 0301 	orr.w	r3, r3, #1
 80213ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80213ee:	e00b      	b.n	8021408 <HAL_RCC_OscConfig+0x324>
 80213f0:	4b58      	ldr	r3, [pc, #352]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80213f4:	4a57      	ldr	r2, [pc, #348]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213f6:	f023 0301 	bic.w	r3, r3, #1
 80213fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80213fc:	4b55      	ldr	r3, [pc, #340]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80213fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021400:	4a54      	ldr	r2, [pc, #336]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021402:	f023 0304 	bic.w	r3, r3, #4
 8021406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	689b      	ldr	r3, [r3, #8]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d015      	beq.n	802143c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021410:	f7ff fb9a 	bl	8020b48 <HAL_GetTick>
 8021414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021416:	e00a      	b.n	802142e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021418:	f7ff fb96 	bl	8020b48 <HAL_GetTick>
 802141c:	4602      	mov	r2, r0
 802141e:	693b      	ldr	r3, [r7, #16]
 8021420:	1ad3      	subs	r3, r2, r3
 8021422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021426:	4293      	cmp	r3, r2
 8021428:	d901      	bls.n	802142e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802142a:	2303      	movs	r3, #3
 802142c:	e0cb      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802142e:	4b49      	ldr	r3, [pc, #292]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021432:	f003 0302 	and.w	r3, r3, #2
 8021436:	2b00      	cmp	r3, #0
 8021438:	d0ee      	beq.n	8021418 <HAL_RCC_OscConfig+0x334>
 802143a:	e014      	b.n	8021466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802143c:	f7ff fb84 	bl	8020b48 <HAL_GetTick>
 8021440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021442:	e00a      	b.n	802145a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021444:	f7ff fb80 	bl	8020b48 <HAL_GetTick>
 8021448:	4602      	mov	r2, r0
 802144a:	693b      	ldr	r3, [r7, #16]
 802144c:	1ad3      	subs	r3, r2, r3
 802144e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021452:	4293      	cmp	r3, r2
 8021454:	d901      	bls.n	802145a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8021456:	2303      	movs	r3, #3
 8021458:	e0b5      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802145a:	4b3e      	ldr	r3, [pc, #248]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 802145c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802145e:	f003 0302 	and.w	r3, r3, #2
 8021462:	2b00      	cmp	r3, #0
 8021464:	d1ee      	bne.n	8021444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021466:	7dfb      	ldrb	r3, [r7, #23]
 8021468:	2b01      	cmp	r3, #1
 802146a:	d105      	bne.n	8021478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802146c:	4b39      	ldr	r3, [pc, #228]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 802146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021470:	4a38      	ldr	r2, [pc, #224]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021476:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	699b      	ldr	r3, [r3, #24]
 802147c:	2b00      	cmp	r3, #0
 802147e:	f000 80a1 	beq.w	80215c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021482:	4b34      	ldr	r3, [pc, #208]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 8021484:	689b      	ldr	r3, [r3, #8]
 8021486:	f003 030c 	and.w	r3, r3, #12
 802148a:	2b08      	cmp	r3, #8
 802148c:	d05c      	beq.n	8021548 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	699b      	ldr	r3, [r3, #24]
 8021492:	2b02      	cmp	r3, #2
 8021494:	d141      	bne.n	802151a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021496:	4b31      	ldr	r3, [pc, #196]	@ (802155c <HAL_RCC_OscConfig+0x478>)
 8021498:	2200      	movs	r2, #0
 802149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802149c:	f7ff fb54 	bl	8020b48 <HAL_GetTick>
 80214a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80214a2:	e008      	b.n	80214b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80214a4:	f7ff fb50 	bl	8020b48 <HAL_GetTick>
 80214a8:	4602      	mov	r2, r0
 80214aa:	693b      	ldr	r3, [r7, #16]
 80214ac:	1ad3      	subs	r3, r2, r3
 80214ae:	2b02      	cmp	r3, #2
 80214b0:	d901      	bls.n	80214b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80214b2:	2303      	movs	r3, #3
 80214b4:	e087      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80214b6:	4b27      	ldr	r3, [pc, #156]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80214b8:	681b      	ldr	r3, [r3, #0]
 80214ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d1f0      	bne.n	80214a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	69da      	ldr	r2, [r3, #28]
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	6a1b      	ldr	r3, [r3, #32]
 80214ca:	431a      	orrs	r2, r3
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214d0:	019b      	lsls	r3, r3, #6
 80214d2:	431a      	orrs	r2, r3
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80214d8:	085b      	lsrs	r3, r3, #1
 80214da:	3b01      	subs	r3, #1
 80214dc:	041b      	lsls	r3, r3, #16
 80214de:	431a      	orrs	r2, r3
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214e4:	061b      	lsls	r3, r3, #24
 80214e6:	491b      	ldr	r1, [pc, #108]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 80214e8:	4313      	orrs	r3, r2
 80214ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80214ec:	4b1b      	ldr	r3, [pc, #108]	@ (802155c <HAL_RCC_OscConfig+0x478>)
 80214ee:	2201      	movs	r2, #1
 80214f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80214f2:	f7ff fb29 	bl	8020b48 <HAL_GetTick>
 80214f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80214f8:	e008      	b.n	802150c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80214fa:	f7ff fb25 	bl	8020b48 <HAL_GetTick>
 80214fe:	4602      	mov	r2, r0
 8021500:	693b      	ldr	r3, [r7, #16]
 8021502:	1ad3      	subs	r3, r2, r3
 8021504:	2b02      	cmp	r3, #2
 8021506:	d901      	bls.n	802150c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8021508:	2303      	movs	r3, #3
 802150a:	e05c      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802150c:	4b11      	ldr	r3, [pc, #68]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021514:	2b00      	cmp	r3, #0
 8021516:	d0f0      	beq.n	80214fa <HAL_RCC_OscConfig+0x416>
 8021518:	e054      	b.n	80215c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802151a:	4b10      	ldr	r3, [pc, #64]	@ (802155c <HAL_RCC_OscConfig+0x478>)
 802151c:	2200      	movs	r2, #0
 802151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021520:	f7ff fb12 	bl	8020b48 <HAL_GetTick>
 8021524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021526:	e008      	b.n	802153a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021528:	f7ff fb0e 	bl	8020b48 <HAL_GetTick>
 802152c:	4602      	mov	r2, r0
 802152e:	693b      	ldr	r3, [r7, #16]
 8021530:	1ad3      	subs	r3, r2, r3
 8021532:	2b02      	cmp	r3, #2
 8021534:	d901      	bls.n	802153a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8021536:	2303      	movs	r3, #3
 8021538:	e045      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802153a:	4b06      	ldr	r3, [pc, #24]	@ (8021554 <HAL_RCC_OscConfig+0x470>)
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021542:	2b00      	cmp	r3, #0
 8021544:	d1f0      	bne.n	8021528 <HAL_RCC_OscConfig+0x444>
 8021546:	e03d      	b.n	80215c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	699b      	ldr	r3, [r3, #24]
 802154c:	2b01      	cmp	r3, #1
 802154e:	d107      	bne.n	8021560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8021550:	2301      	movs	r3, #1
 8021552:	e038      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
 8021554:	40023800 	.word	0x40023800
 8021558:	40007000 	.word	0x40007000
 802155c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021560:	4b1b      	ldr	r3, [pc, #108]	@ (80215d0 <HAL_RCC_OscConfig+0x4ec>)
 8021562:	685b      	ldr	r3, [r3, #4]
 8021564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	699b      	ldr	r3, [r3, #24]
 802156a:	2b01      	cmp	r3, #1
 802156c:	d028      	beq.n	80215c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021578:	429a      	cmp	r2, r3
 802157a:	d121      	bne.n	80215c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802157c:	68fb      	ldr	r3, [r7, #12]
 802157e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021586:	429a      	cmp	r2, r3
 8021588:	d11a      	bne.n	80215c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802158a:	68fa      	ldr	r2, [r7, #12]
 802158c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8021590:	4013      	ands	r3, r2
 8021592:	687a      	ldr	r2, [r7, #4]
 8021594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8021596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021598:	4293      	cmp	r3, r2
 802159a:	d111      	bne.n	80215c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802159c:	68fb      	ldr	r3, [r7, #12]
 802159e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80215a6:	085b      	lsrs	r3, r3, #1
 80215a8:	3b01      	subs	r3, #1
 80215aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80215ac:	429a      	cmp	r2, r3
 80215ae:	d107      	bne.n	80215c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80215b0:	68fb      	ldr	r3, [r7, #12]
 80215b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80215ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80215bc:	429a      	cmp	r2, r3
 80215be:	d001      	beq.n	80215c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80215c0:	2301      	movs	r3, #1
 80215c2:	e000      	b.n	80215c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80215c4:	2300      	movs	r3, #0
}
 80215c6:	4618      	mov	r0, r3
 80215c8:	3718      	adds	r7, #24
 80215ca:	46bd      	mov	sp, r7
 80215cc:	bd80      	pop	{r7, pc}
 80215ce:	bf00      	nop
 80215d0:	40023800 	.word	0x40023800

080215d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80215d4:	b580      	push	{r7, lr}
 80215d6:	b084      	sub	sp, #16
 80215d8:	af00      	add	r7, sp, #0
 80215da:	6078      	str	r0, [r7, #4]
 80215dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d101      	bne.n	80215e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80215e4:	2301      	movs	r3, #1
 80215e6:	e0cc      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80215e8:	4b68      	ldr	r3, [pc, #416]	@ (802178c <HAL_RCC_ClockConfig+0x1b8>)
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	f003 0307 	and.w	r3, r3, #7
 80215f0:	683a      	ldr	r2, [r7, #0]
 80215f2:	429a      	cmp	r2, r3
 80215f4:	d90c      	bls.n	8021610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80215f6:	4b65      	ldr	r3, [pc, #404]	@ (802178c <HAL_RCC_ClockConfig+0x1b8>)
 80215f8:	683a      	ldr	r2, [r7, #0]
 80215fa:	b2d2      	uxtb	r2, r2
 80215fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80215fe:	4b63      	ldr	r3, [pc, #396]	@ (802178c <HAL_RCC_ClockConfig+0x1b8>)
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	f003 0307 	and.w	r3, r3, #7
 8021606:	683a      	ldr	r2, [r7, #0]
 8021608:	429a      	cmp	r2, r3
 802160a:	d001      	beq.n	8021610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802160c:	2301      	movs	r3, #1
 802160e:	e0b8      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	681b      	ldr	r3, [r3, #0]
 8021614:	f003 0302 	and.w	r3, r3, #2
 8021618:	2b00      	cmp	r3, #0
 802161a:	d020      	beq.n	802165e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	f003 0304 	and.w	r3, r3, #4
 8021624:	2b00      	cmp	r3, #0
 8021626:	d005      	beq.n	8021634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021628:	4b59      	ldr	r3, [pc, #356]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 802162a:	689b      	ldr	r3, [r3, #8]
 802162c:	4a58      	ldr	r2, [pc, #352]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 802162e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8021632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	681b      	ldr	r3, [r3, #0]
 8021638:	f003 0308 	and.w	r3, r3, #8
 802163c:	2b00      	cmp	r3, #0
 802163e:	d005      	beq.n	802164c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021640:	4b53      	ldr	r3, [pc, #332]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021642:	689b      	ldr	r3, [r3, #8]
 8021644:	4a52      	ldr	r2, [pc, #328]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 802164a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802164c:	4b50      	ldr	r3, [pc, #320]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 802164e:	689b      	ldr	r3, [r3, #8]
 8021650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	689b      	ldr	r3, [r3, #8]
 8021658:	494d      	ldr	r1, [pc, #308]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 802165a:	4313      	orrs	r3, r2
 802165c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	f003 0301 	and.w	r3, r3, #1
 8021666:	2b00      	cmp	r3, #0
 8021668:	d044      	beq.n	80216f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802166a:	687b      	ldr	r3, [r7, #4]
 802166c:	685b      	ldr	r3, [r3, #4]
 802166e:	2b01      	cmp	r3, #1
 8021670:	d107      	bne.n	8021682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021672:	4b47      	ldr	r3, [pc, #284]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802167a:	2b00      	cmp	r3, #0
 802167c:	d119      	bne.n	80216b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802167e:	2301      	movs	r3, #1
 8021680:	e07f      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	685b      	ldr	r3, [r3, #4]
 8021686:	2b02      	cmp	r3, #2
 8021688:	d003      	beq.n	8021692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802168e:	2b03      	cmp	r3, #3
 8021690:	d107      	bne.n	80216a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021692:	4b3f      	ldr	r3, [pc, #252]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802169a:	2b00      	cmp	r3, #0
 802169c:	d109      	bne.n	80216b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802169e:	2301      	movs	r3, #1
 80216a0:	e06f      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80216a2:	4b3b      	ldr	r3, [pc, #236]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 80216a4:	681b      	ldr	r3, [r3, #0]
 80216a6:	f003 0302 	and.w	r3, r3, #2
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d101      	bne.n	80216b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80216ae:	2301      	movs	r3, #1
 80216b0:	e067      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80216b2:	4b37      	ldr	r3, [pc, #220]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 80216b4:	689b      	ldr	r3, [r3, #8]
 80216b6:	f023 0203 	bic.w	r2, r3, #3
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	685b      	ldr	r3, [r3, #4]
 80216be:	4934      	ldr	r1, [pc, #208]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 80216c0:	4313      	orrs	r3, r2
 80216c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80216c4:	f7ff fa40 	bl	8020b48 <HAL_GetTick>
 80216c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80216ca:	e00a      	b.n	80216e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80216cc:	f7ff fa3c 	bl	8020b48 <HAL_GetTick>
 80216d0:	4602      	mov	r2, r0
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	1ad3      	subs	r3, r2, r3
 80216d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80216da:	4293      	cmp	r3, r2
 80216dc:	d901      	bls.n	80216e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80216de:	2303      	movs	r3, #3
 80216e0:	e04f      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80216e2:	4b2b      	ldr	r3, [pc, #172]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 80216e4:	689b      	ldr	r3, [r3, #8]
 80216e6:	f003 020c 	and.w	r2, r3, #12
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	685b      	ldr	r3, [r3, #4]
 80216ee:	009b      	lsls	r3, r3, #2
 80216f0:	429a      	cmp	r2, r3
 80216f2:	d1eb      	bne.n	80216cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80216f4:	4b25      	ldr	r3, [pc, #148]	@ (802178c <HAL_RCC_ClockConfig+0x1b8>)
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	f003 0307 	and.w	r3, r3, #7
 80216fc:	683a      	ldr	r2, [r7, #0]
 80216fe:	429a      	cmp	r2, r3
 8021700:	d20c      	bcs.n	802171c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021702:	4b22      	ldr	r3, [pc, #136]	@ (802178c <HAL_RCC_ClockConfig+0x1b8>)
 8021704:	683a      	ldr	r2, [r7, #0]
 8021706:	b2d2      	uxtb	r2, r2
 8021708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802170a:	4b20      	ldr	r3, [pc, #128]	@ (802178c <HAL_RCC_ClockConfig+0x1b8>)
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	f003 0307 	and.w	r3, r3, #7
 8021712:	683a      	ldr	r2, [r7, #0]
 8021714:	429a      	cmp	r2, r3
 8021716:	d001      	beq.n	802171c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021718:	2301      	movs	r3, #1
 802171a:	e032      	b.n	8021782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	681b      	ldr	r3, [r3, #0]
 8021720:	f003 0304 	and.w	r3, r3, #4
 8021724:	2b00      	cmp	r3, #0
 8021726:	d008      	beq.n	802173a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021728:	4b19      	ldr	r3, [pc, #100]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 802172a:	689b      	ldr	r3, [r3, #8]
 802172c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8021730:	687b      	ldr	r3, [r7, #4]
 8021732:	68db      	ldr	r3, [r3, #12]
 8021734:	4916      	ldr	r1, [pc, #88]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021736:	4313      	orrs	r3, r2
 8021738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	681b      	ldr	r3, [r3, #0]
 802173e:	f003 0308 	and.w	r3, r3, #8
 8021742:	2b00      	cmp	r3, #0
 8021744:	d009      	beq.n	802175a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021746:	4b12      	ldr	r3, [pc, #72]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021748:	689b      	ldr	r3, [r3, #8]
 802174a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	691b      	ldr	r3, [r3, #16]
 8021752:	00db      	lsls	r3, r3, #3
 8021754:	490e      	ldr	r1, [pc, #56]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021756:	4313      	orrs	r3, r2
 8021758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802175a:	f000 f821 	bl	80217a0 <HAL_RCC_GetSysClockFreq>
 802175e:	4602      	mov	r2, r0
 8021760:	4b0b      	ldr	r3, [pc, #44]	@ (8021790 <HAL_RCC_ClockConfig+0x1bc>)
 8021762:	689b      	ldr	r3, [r3, #8]
 8021764:	091b      	lsrs	r3, r3, #4
 8021766:	f003 030f 	and.w	r3, r3, #15
 802176a:	490a      	ldr	r1, [pc, #40]	@ (8021794 <HAL_RCC_ClockConfig+0x1c0>)
 802176c:	5ccb      	ldrb	r3, [r1, r3]
 802176e:	fa22 f303 	lsr.w	r3, r2, r3
 8021772:	4a09      	ldr	r2, [pc, #36]	@ (8021798 <HAL_RCC_ClockConfig+0x1c4>)
 8021774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8021776:	4b09      	ldr	r3, [pc, #36]	@ (802179c <HAL_RCC_ClockConfig+0x1c8>)
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	4618      	mov	r0, r3
 802177c:	f7ff f9a0 	bl	8020ac0 <HAL_InitTick>

  return HAL_OK;
 8021780:	2300      	movs	r3, #0
}
 8021782:	4618      	mov	r0, r3
 8021784:	3710      	adds	r7, #16
 8021786:	46bd      	mov	sp, r7
 8021788:	bd80      	pop	{r7, pc}
 802178a:	bf00      	nop
 802178c:	40023c00 	.word	0x40023c00
 8021790:	40023800 	.word	0x40023800
 8021794:	08023044 	.word	0x08023044
 8021798:	20000000 	.word	0x20000000
 802179c:	20000004 	.word	0x20000004

080217a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80217a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80217a4:	b090      	sub	sp, #64	@ 0x40
 80217a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80217a8:	2300      	movs	r3, #0
 80217aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80217ac:	2300      	movs	r3, #0
 80217ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80217b0:	2300      	movs	r3, #0
 80217b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80217b4:	2300      	movs	r3, #0
 80217b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80217b8:	4b59      	ldr	r3, [pc, #356]	@ (8021920 <HAL_RCC_GetSysClockFreq+0x180>)
 80217ba:	689b      	ldr	r3, [r3, #8]
 80217bc:	f003 030c 	and.w	r3, r3, #12
 80217c0:	2b08      	cmp	r3, #8
 80217c2:	d00d      	beq.n	80217e0 <HAL_RCC_GetSysClockFreq+0x40>
 80217c4:	2b08      	cmp	r3, #8
 80217c6:	f200 80a1 	bhi.w	802190c <HAL_RCC_GetSysClockFreq+0x16c>
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d002      	beq.n	80217d4 <HAL_RCC_GetSysClockFreq+0x34>
 80217ce:	2b04      	cmp	r3, #4
 80217d0:	d003      	beq.n	80217da <HAL_RCC_GetSysClockFreq+0x3a>
 80217d2:	e09b      	b.n	802190c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80217d4:	4b53      	ldr	r3, [pc, #332]	@ (8021924 <HAL_RCC_GetSysClockFreq+0x184>)
 80217d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80217d8:	e09b      	b.n	8021912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80217da:	4b53      	ldr	r3, [pc, #332]	@ (8021928 <HAL_RCC_GetSysClockFreq+0x188>)
 80217dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80217de:	e098      	b.n	8021912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80217e0:	4b4f      	ldr	r3, [pc, #316]	@ (8021920 <HAL_RCC_GetSysClockFreq+0x180>)
 80217e2:	685b      	ldr	r3, [r3, #4]
 80217e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80217e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80217ea:	4b4d      	ldr	r3, [pc, #308]	@ (8021920 <HAL_RCC_GetSysClockFreq+0x180>)
 80217ec:	685b      	ldr	r3, [r3, #4]
 80217ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d028      	beq.n	8021848 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80217f6:	4b4a      	ldr	r3, [pc, #296]	@ (8021920 <HAL_RCC_GetSysClockFreq+0x180>)
 80217f8:	685b      	ldr	r3, [r3, #4]
 80217fa:	099b      	lsrs	r3, r3, #6
 80217fc:	2200      	movs	r2, #0
 80217fe:	623b      	str	r3, [r7, #32]
 8021800:	627a      	str	r2, [r7, #36]	@ 0x24
 8021802:	6a3b      	ldr	r3, [r7, #32]
 8021804:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8021808:	2100      	movs	r1, #0
 802180a:	4b47      	ldr	r3, [pc, #284]	@ (8021928 <HAL_RCC_GetSysClockFreq+0x188>)
 802180c:	fb03 f201 	mul.w	r2, r3, r1
 8021810:	2300      	movs	r3, #0
 8021812:	fb00 f303 	mul.w	r3, r0, r3
 8021816:	4413      	add	r3, r2
 8021818:	4a43      	ldr	r2, [pc, #268]	@ (8021928 <HAL_RCC_GetSysClockFreq+0x188>)
 802181a:	fba0 1202 	umull	r1, r2, r0, r2
 802181e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8021820:	460a      	mov	r2, r1
 8021822:	62ba      	str	r2, [r7, #40]	@ 0x28
 8021824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021826:	4413      	add	r3, r2
 8021828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802182a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802182c:	2200      	movs	r2, #0
 802182e:	61bb      	str	r3, [r7, #24]
 8021830:	61fa      	str	r2, [r7, #28]
 8021832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021836:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 802183a:	f7fe fd21 	bl	8020280 <__aeabi_uldivmod>
 802183e:	4602      	mov	r2, r0
 8021840:	460b      	mov	r3, r1
 8021842:	4613      	mov	r3, r2
 8021844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021846:	e053      	b.n	80218f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021848:	4b35      	ldr	r3, [pc, #212]	@ (8021920 <HAL_RCC_GetSysClockFreq+0x180>)
 802184a:	685b      	ldr	r3, [r3, #4]
 802184c:	099b      	lsrs	r3, r3, #6
 802184e:	2200      	movs	r2, #0
 8021850:	613b      	str	r3, [r7, #16]
 8021852:	617a      	str	r2, [r7, #20]
 8021854:	693b      	ldr	r3, [r7, #16]
 8021856:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802185a:	f04f 0b00 	mov.w	fp, #0
 802185e:	4652      	mov	r2, sl
 8021860:	465b      	mov	r3, fp
 8021862:	f04f 0000 	mov.w	r0, #0
 8021866:	f04f 0100 	mov.w	r1, #0
 802186a:	0159      	lsls	r1, r3, #5
 802186c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021870:	0150      	lsls	r0, r2, #5
 8021872:	4602      	mov	r2, r0
 8021874:	460b      	mov	r3, r1
 8021876:	ebb2 080a 	subs.w	r8, r2, sl
 802187a:	eb63 090b 	sbc.w	r9, r3, fp
 802187e:	f04f 0200 	mov.w	r2, #0
 8021882:	f04f 0300 	mov.w	r3, #0
 8021886:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802188a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802188e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8021892:	ebb2 0408 	subs.w	r4, r2, r8
 8021896:	eb63 0509 	sbc.w	r5, r3, r9
 802189a:	f04f 0200 	mov.w	r2, #0
 802189e:	f04f 0300 	mov.w	r3, #0
 80218a2:	00eb      	lsls	r3, r5, #3
 80218a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80218a8:	00e2      	lsls	r2, r4, #3
 80218aa:	4614      	mov	r4, r2
 80218ac:	461d      	mov	r5, r3
 80218ae:	eb14 030a 	adds.w	r3, r4, sl
 80218b2:	603b      	str	r3, [r7, #0]
 80218b4:	eb45 030b 	adc.w	r3, r5, fp
 80218b8:	607b      	str	r3, [r7, #4]
 80218ba:	f04f 0200 	mov.w	r2, #0
 80218be:	f04f 0300 	mov.w	r3, #0
 80218c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80218c6:	4629      	mov	r1, r5
 80218c8:	028b      	lsls	r3, r1, #10
 80218ca:	4621      	mov	r1, r4
 80218cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80218d0:	4621      	mov	r1, r4
 80218d2:	028a      	lsls	r2, r1, #10
 80218d4:	4610      	mov	r0, r2
 80218d6:	4619      	mov	r1, r3
 80218d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80218da:	2200      	movs	r2, #0
 80218dc:	60bb      	str	r3, [r7, #8]
 80218de:	60fa      	str	r2, [r7, #12]
 80218e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80218e4:	f7fe fccc 	bl	8020280 <__aeabi_uldivmod>
 80218e8:	4602      	mov	r2, r0
 80218ea:	460b      	mov	r3, r1
 80218ec:	4613      	mov	r3, r2
 80218ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80218f0:	4b0b      	ldr	r3, [pc, #44]	@ (8021920 <HAL_RCC_GetSysClockFreq+0x180>)
 80218f2:	685b      	ldr	r3, [r3, #4]
 80218f4:	0c1b      	lsrs	r3, r3, #16
 80218f6:	f003 0303 	and.w	r3, r3, #3
 80218fa:	3301      	adds	r3, #1
 80218fc:	005b      	lsls	r3, r3, #1
 80218fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8021900:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021904:	fbb2 f3f3 	udiv	r3, r2, r3
 8021908:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 802190a:	e002      	b.n	8021912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802190c:	4b05      	ldr	r3, [pc, #20]	@ (8021924 <HAL_RCC_GetSysClockFreq+0x184>)
 802190e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8021910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8021914:	4618      	mov	r0, r3
 8021916:	3740      	adds	r7, #64	@ 0x40
 8021918:	46bd      	mov	sp, r7
 802191a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802191e:	bf00      	nop
 8021920:	40023800 	.word	0x40023800
 8021924:	00f42400 	.word	0x00f42400
 8021928:	017d7840 	.word	0x017d7840

0802192c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802192c:	b480      	push	{r7}
 802192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8021930:	4b03      	ldr	r3, [pc, #12]	@ (8021940 <HAL_RCC_GetHCLKFreq+0x14>)
 8021932:	681b      	ldr	r3, [r3, #0]
}
 8021934:	4618      	mov	r0, r3
 8021936:	46bd      	mov	sp, r7
 8021938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802193c:	4770      	bx	lr
 802193e:	bf00      	nop
 8021940:	20000000 	.word	0x20000000

08021944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021944:	b580      	push	{r7, lr}
 8021946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8021948:	f7ff fff0 	bl	802192c <HAL_RCC_GetHCLKFreq>
 802194c:	4602      	mov	r2, r0
 802194e:	4b05      	ldr	r3, [pc, #20]	@ (8021964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8021950:	689b      	ldr	r3, [r3, #8]
 8021952:	0a9b      	lsrs	r3, r3, #10
 8021954:	f003 0307 	and.w	r3, r3, #7
 8021958:	4903      	ldr	r1, [pc, #12]	@ (8021968 <HAL_RCC_GetPCLK1Freq+0x24>)
 802195a:	5ccb      	ldrb	r3, [r1, r3]
 802195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021960:	4618      	mov	r0, r3
 8021962:	bd80      	pop	{r7, pc}
 8021964:	40023800 	.word	0x40023800
 8021968:	08023054 	.word	0x08023054

0802196c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802196c:	b580      	push	{r7, lr}
 802196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8021970:	f7ff ffdc 	bl	802192c <HAL_RCC_GetHCLKFreq>
 8021974:	4602      	mov	r2, r0
 8021976:	4b05      	ldr	r3, [pc, #20]	@ (802198c <HAL_RCC_GetPCLK2Freq+0x20>)
 8021978:	689b      	ldr	r3, [r3, #8]
 802197a:	0b5b      	lsrs	r3, r3, #13
 802197c:	f003 0307 	and.w	r3, r3, #7
 8021980:	4903      	ldr	r1, [pc, #12]	@ (8021990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021982:	5ccb      	ldrb	r3, [r1, r3]
 8021984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021988:	4618      	mov	r0, r3
 802198a:	bd80      	pop	{r7, pc}
 802198c:	40023800 	.word	0x40023800
 8021990:	08023054 	.word	0x08023054

08021994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021994:	b580      	push	{r7, lr}
 8021996:	b082      	sub	sp, #8
 8021998:	af00      	add	r7, sp, #0
 802199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d101      	bne.n	80219a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80219a2:	2301      	movs	r3, #1
 80219a4:	e042      	b.n	8021a2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80219a6:	687b      	ldr	r3, [r7, #4]
 80219a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80219ac:	b2db      	uxtb	r3, r3
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d106      	bne.n	80219c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80219b2:	687b      	ldr	r3, [r7, #4]
 80219b4:	2200      	movs	r2, #0
 80219b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80219ba:	6878      	ldr	r0, [r7, #4]
 80219bc:	f7fe ff04 	bl	80207c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	2224      	movs	r2, #36	@ 0x24
 80219c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80219c8:	687b      	ldr	r3, [r7, #4]
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	68da      	ldr	r2, [r3, #12]
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	681b      	ldr	r3, [r3, #0]
 80219d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80219d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80219d8:	6878      	ldr	r0, [r7, #4]
 80219da:	f000 f973 	bl	8021cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	691a      	ldr	r2, [r3, #16]
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80219ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	695a      	ldr	r2, [r3, #20]
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	681b      	ldr	r3, [r3, #0]
 80219f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80219fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	68da      	ldr	r2, [r3, #12]
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	681b      	ldr	r3, [r3, #0]
 8021a08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8021a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	2200      	movs	r2, #0
 8021a12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	2220      	movs	r2, #32
 8021a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8021a1c:	687b      	ldr	r3, [r7, #4]
 8021a1e:	2220      	movs	r2, #32
 8021a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	2200      	movs	r2, #0
 8021a28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8021a2a:	2300      	movs	r3, #0
}
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	3708      	adds	r7, #8
 8021a30:	46bd      	mov	sp, r7
 8021a32:	bd80      	pop	{r7, pc}

08021a34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021a34:	b580      	push	{r7, lr}
 8021a36:	b08a      	sub	sp, #40	@ 0x28
 8021a38:	af02      	add	r7, sp, #8
 8021a3a:	60f8      	str	r0, [r7, #12]
 8021a3c:	60b9      	str	r1, [r7, #8]
 8021a3e:	603b      	str	r3, [r7, #0]
 8021a40:	4613      	mov	r3, r2
 8021a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8021a44:	2300      	movs	r3, #0
 8021a46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8021a4e:	b2db      	uxtb	r3, r3
 8021a50:	2b20      	cmp	r3, #32
 8021a52:	d175      	bne.n	8021b40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8021a54:	68bb      	ldr	r3, [r7, #8]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d002      	beq.n	8021a60 <HAL_UART_Transmit+0x2c>
 8021a5a:	88fb      	ldrh	r3, [r7, #6]
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	d101      	bne.n	8021a64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8021a60:	2301      	movs	r3, #1
 8021a62:	e06e      	b.n	8021b42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021a64:	68fb      	ldr	r3, [r7, #12]
 8021a66:	2200      	movs	r2, #0
 8021a68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021a6a:	68fb      	ldr	r3, [r7, #12]
 8021a6c:	2221      	movs	r2, #33	@ 0x21
 8021a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8021a72:	f7ff f869 	bl	8020b48 <HAL_GetTick>
 8021a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8021a78:	68fb      	ldr	r3, [r7, #12]
 8021a7a:	88fa      	ldrh	r2, [r7, #6]
 8021a7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8021a7e:	68fb      	ldr	r3, [r7, #12]
 8021a80:	88fa      	ldrh	r2, [r7, #6]
 8021a82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021a84:	68fb      	ldr	r3, [r7, #12]
 8021a86:	689b      	ldr	r3, [r3, #8]
 8021a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021a8c:	d108      	bne.n	8021aa0 <HAL_UART_Transmit+0x6c>
 8021a8e:	68fb      	ldr	r3, [r7, #12]
 8021a90:	691b      	ldr	r3, [r3, #16]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d104      	bne.n	8021aa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8021a96:	2300      	movs	r3, #0
 8021a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8021a9a:	68bb      	ldr	r3, [r7, #8]
 8021a9c:	61bb      	str	r3, [r7, #24]
 8021a9e:	e003      	b.n	8021aa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8021aa0:	68bb      	ldr	r3, [r7, #8]
 8021aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021aa4:	2300      	movs	r3, #0
 8021aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8021aa8:	e02e      	b.n	8021b08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021aaa:	683b      	ldr	r3, [r7, #0]
 8021aac:	9300      	str	r3, [sp, #0]
 8021aae:	697b      	ldr	r3, [r7, #20]
 8021ab0:	2200      	movs	r2, #0
 8021ab2:	2180      	movs	r1, #128	@ 0x80
 8021ab4:	68f8      	ldr	r0, [r7, #12]
 8021ab6:	f000 f848 	bl	8021b4a <UART_WaitOnFlagUntilTimeout>
 8021aba:	4603      	mov	r3, r0
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d005      	beq.n	8021acc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8021ac0:	68fb      	ldr	r3, [r7, #12]
 8021ac2:	2220      	movs	r2, #32
 8021ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8021ac8:	2303      	movs	r3, #3
 8021aca:	e03a      	b.n	8021b42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8021acc:	69fb      	ldr	r3, [r7, #28]
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d10b      	bne.n	8021aea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021ad2:	69bb      	ldr	r3, [r7, #24]
 8021ad4:	881b      	ldrh	r3, [r3, #0]
 8021ad6:	461a      	mov	r2, r3
 8021ad8:	68fb      	ldr	r3, [r7, #12]
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8021ae2:	69bb      	ldr	r3, [r7, #24]
 8021ae4:	3302      	adds	r3, #2
 8021ae6:	61bb      	str	r3, [r7, #24]
 8021ae8:	e007      	b.n	8021afa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8021aea:	69fb      	ldr	r3, [r7, #28]
 8021aec:	781a      	ldrb	r2, [r3, #0]
 8021aee:	68fb      	ldr	r3, [r7, #12]
 8021af0:	681b      	ldr	r3, [r3, #0]
 8021af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8021af4:	69fb      	ldr	r3, [r7, #28]
 8021af6:	3301      	adds	r3, #1
 8021af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8021afa:	68fb      	ldr	r3, [r7, #12]
 8021afc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8021afe:	b29b      	uxth	r3, r3
 8021b00:	3b01      	subs	r3, #1
 8021b02:	b29a      	uxth	r2, r3
 8021b04:	68fb      	ldr	r3, [r7, #12]
 8021b06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8021b08:	68fb      	ldr	r3, [r7, #12]
 8021b0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8021b0c:	b29b      	uxth	r3, r3
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d1cb      	bne.n	8021aaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8021b12:	683b      	ldr	r3, [r7, #0]
 8021b14:	9300      	str	r3, [sp, #0]
 8021b16:	697b      	ldr	r3, [r7, #20]
 8021b18:	2200      	movs	r2, #0
 8021b1a:	2140      	movs	r1, #64	@ 0x40
 8021b1c:	68f8      	ldr	r0, [r7, #12]
 8021b1e:	f000 f814 	bl	8021b4a <UART_WaitOnFlagUntilTimeout>
 8021b22:	4603      	mov	r3, r0
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d005      	beq.n	8021b34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	2220      	movs	r2, #32
 8021b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8021b30:	2303      	movs	r3, #3
 8021b32:	e006      	b.n	8021b42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8021b34:	68fb      	ldr	r3, [r7, #12]
 8021b36:	2220      	movs	r2, #32
 8021b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8021b3c:	2300      	movs	r3, #0
 8021b3e:	e000      	b.n	8021b42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8021b40:	2302      	movs	r3, #2
  }
}
 8021b42:	4618      	mov	r0, r3
 8021b44:	3720      	adds	r7, #32
 8021b46:	46bd      	mov	sp, r7
 8021b48:	bd80      	pop	{r7, pc}

08021b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8021b4a:	b580      	push	{r7, lr}
 8021b4c:	b086      	sub	sp, #24
 8021b4e:	af00      	add	r7, sp, #0
 8021b50:	60f8      	str	r0, [r7, #12]
 8021b52:	60b9      	str	r1, [r7, #8]
 8021b54:	603b      	str	r3, [r7, #0]
 8021b56:	4613      	mov	r3, r2
 8021b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021b5a:	e03b      	b.n	8021bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021b5c:	6a3b      	ldr	r3, [r7, #32]
 8021b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b62:	d037      	beq.n	8021bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021b64:	f7fe fff0 	bl	8020b48 <HAL_GetTick>
 8021b68:	4602      	mov	r2, r0
 8021b6a:	683b      	ldr	r3, [r7, #0]
 8021b6c:	1ad3      	subs	r3, r2, r3
 8021b6e:	6a3a      	ldr	r2, [r7, #32]
 8021b70:	429a      	cmp	r2, r3
 8021b72:	d302      	bcc.n	8021b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8021b74:	6a3b      	ldr	r3, [r7, #32]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d101      	bne.n	8021b7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8021b7a:	2303      	movs	r3, #3
 8021b7c:	e03a      	b.n	8021bf4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8021b7e:	68fb      	ldr	r3, [r7, #12]
 8021b80:	681b      	ldr	r3, [r3, #0]
 8021b82:	68db      	ldr	r3, [r3, #12]
 8021b84:	f003 0304 	and.w	r3, r3, #4
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	d023      	beq.n	8021bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8021b8c:	68bb      	ldr	r3, [r7, #8]
 8021b8e:	2b80      	cmp	r3, #128	@ 0x80
 8021b90:	d020      	beq.n	8021bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8021b92:	68bb      	ldr	r3, [r7, #8]
 8021b94:	2b40      	cmp	r3, #64	@ 0x40
 8021b96:	d01d      	beq.n	8021bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8021b98:	68fb      	ldr	r3, [r7, #12]
 8021b9a:	681b      	ldr	r3, [r3, #0]
 8021b9c:	681b      	ldr	r3, [r3, #0]
 8021b9e:	f003 0308 	and.w	r3, r3, #8
 8021ba2:	2b08      	cmp	r3, #8
 8021ba4:	d116      	bne.n	8021bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8021ba6:	2300      	movs	r3, #0
 8021ba8:	617b      	str	r3, [r7, #20]
 8021baa:	68fb      	ldr	r3, [r7, #12]
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	617b      	str	r3, [r7, #20]
 8021bb2:	68fb      	ldr	r3, [r7, #12]
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	685b      	ldr	r3, [r3, #4]
 8021bb8:	617b      	str	r3, [r7, #20]
 8021bba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021bbc:	68f8      	ldr	r0, [r7, #12]
 8021bbe:	f000 f81d 	bl	8021bfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	2208      	movs	r2, #8
 8021bc6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021bc8:	68fb      	ldr	r3, [r7, #12]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8021bd0:	2301      	movs	r3, #1
 8021bd2:	e00f      	b.n	8021bf4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021bd4:	68fb      	ldr	r3, [r7, #12]
 8021bd6:	681b      	ldr	r3, [r3, #0]
 8021bd8:	681a      	ldr	r2, [r3, #0]
 8021bda:	68bb      	ldr	r3, [r7, #8]
 8021bdc:	4013      	ands	r3, r2
 8021bde:	68ba      	ldr	r2, [r7, #8]
 8021be0:	429a      	cmp	r2, r3
 8021be2:	bf0c      	ite	eq
 8021be4:	2301      	moveq	r3, #1
 8021be6:	2300      	movne	r3, #0
 8021be8:	b2db      	uxtb	r3, r3
 8021bea:	461a      	mov	r2, r3
 8021bec:	79fb      	ldrb	r3, [r7, #7]
 8021bee:	429a      	cmp	r2, r3
 8021bf0:	d0b4      	beq.n	8021b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021bf2:	2300      	movs	r3, #0
}
 8021bf4:	4618      	mov	r0, r3
 8021bf6:	3718      	adds	r7, #24
 8021bf8:	46bd      	mov	sp, r7
 8021bfa:	bd80      	pop	{r7, pc}

08021bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021bfc:	b480      	push	{r7}
 8021bfe:	b095      	sub	sp, #84	@ 0x54
 8021c00:	af00      	add	r7, sp, #0
 8021c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	330c      	adds	r3, #12
 8021c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c0e:	e853 3f00 	ldrex	r3, [r3]
 8021c12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	681b      	ldr	r3, [r3, #0]
 8021c20:	330c      	adds	r3, #12
 8021c22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8021c24:	643a      	str	r2, [r7, #64]	@ 0x40
 8021c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021c2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021c2c:	e841 2300 	strex	r3, r2, [r1]
 8021c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8021c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d1e5      	bne.n	8021c04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	681b      	ldr	r3, [r3, #0]
 8021c3c:	3314      	adds	r3, #20
 8021c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c40:	6a3b      	ldr	r3, [r7, #32]
 8021c42:	e853 3f00 	ldrex	r3, [r3]
 8021c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8021c48:	69fb      	ldr	r3, [r7, #28]
 8021c4a:	f023 0301 	bic.w	r3, r3, #1
 8021c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	681b      	ldr	r3, [r3, #0]
 8021c54:	3314      	adds	r3, #20
 8021c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021c58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8021c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021c60:	e841 2300 	strex	r3, r2, [r1]
 8021c64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8021c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	d1e5      	bne.n	8021c38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021c70:	2b01      	cmp	r3, #1
 8021c72:	d119      	bne.n	8021ca8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	681b      	ldr	r3, [r3, #0]
 8021c78:	330c      	adds	r3, #12
 8021c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c7c:	68fb      	ldr	r3, [r7, #12]
 8021c7e:	e853 3f00 	ldrex	r3, [r3]
 8021c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8021c84:	68bb      	ldr	r3, [r7, #8]
 8021c86:	f023 0310 	bic.w	r3, r3, #16
 8021c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	330c      	adds	r3, #12
 8021c92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021c94:	61ba      	str	r2, [r7, #24]
 8021c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c98:	6979      	ldr	r1, [r7, #20]
 8021c9a:	69ba      	ldr	r2, [r7, #24]
 8021c9c:	e841 2300 	strex	r3, r2, [r1]
 8021ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8021ca2:	693b      	ldr	r3, [r7, #16]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d1e5      	bne.n	8021c74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	2220      	movs	r2, #32
 8021cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8021cb6:	bf00      	nop
 8021cb8:	3754      	adds	r7, #84	@ 0x54
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cc0:	4770      	bx	lr
	...

08021cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021cc8:	b0c0      	sub	sp, #256	@ 0x100
 8021cca:	af00      	add	r7, sp, #0
 8021ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021cd4:	681b      	ldr	r3, [r3, #0]
 8021cd6:	691b      	ldr	r3, [r3, #16]
 8021cd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8021cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021ce0:	68d9      	ldr	r1, [r3, #12]
 8021ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021ce6:	681a      	ldr	r2, [r3, #0]
 8021ce8:	ea40 0301 	orr.w	r3, r0, r1
 8021cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021cf2:	689a      	ldr	r2, [r3, #8]
 8021cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021cf8:	691b      	ldr	r3, [r3, #16]
 8021cfa:	431a      	orrs	r2, r3
 8021cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d00:	695b      	ldr	r3, [r3, #20]
 8021d02:	431a      	orrs	r2, r3
 8021d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d08:	69db      	ldr	r3, [r3, #28]
 8021d0a:	4313      	orrs	r3, r2
 8021d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8021d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	68db      	ldr	r3, [r3, #12]
 8021d18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8021d1c:	f021 010c 	bic.w	r1, r1, #12
 8021d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d24:	681a      	ldr	r2, [r3, #0]
 8021d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8021d2a:	430b      	orrs	r3, r1
 8021d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	695b      	ldr	r3, [r3, #20]
 8021d36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8021d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d3e:	6999      	ldr	r1, [r3, #24]
 8021d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d44:	681a      	ldr	r2, [r3, #0]
 8021d46:	ea40 0301 	orr.w	r3, r0, r1
 8021d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d50:	681a      	ldr	r2, [r3, #0]
 8021d52:	4b8f      	ldr	r3, [pc, #572]	@ (8021f90 <UART_SetConfig+0x2cc>)
 8021d54:	429a      	cmp	r2, r3
 8021d56:	d005      	beq.n	8021d64 <UART_SetConfig+0xa0>
 8021d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d5c:	681a      	ldr	r2, [r3, #0]
 8021d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8021f94 <UART_SetConfig+0x2d0>)
 8021d60:	429a      	cmp	r2, r3
 8021d62:	d104      	bne.n	8021d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021d64:	f7ff fe02 	bl	802196c <HAL_RCC_GetPCLK2Freq>
 8021d68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8021d6c:	e003      	b.n	8021d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021d6e:	f7ff fde9 	bl	8021944 <HAL_RCC_GetPCLK1Freq>
 8021d72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d7a:	69db      	ldr	r3, [r3, #28]
 8021d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021d80:	f040 810c 	bne.w	8021f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021d88:	2200      	movs	r2, #0
 8021d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8021d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8021d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8021d96:	4622      	mov	r2, r4
 8021d98:	462b      	mov	r3, r5
 8021d9a:	1891      	adds	r1, r2, r2
 8021d9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8021d9e:	415b      	adcs	r3, r3
 8021da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8021da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021da6:	4621      	mov	r1, r4
 8021da8:	eb12 0801 	adds.w	r8, r2, r1
 8021dac:	4629      	mov	r1, r5
 8021dae:	eb43 0901 	adc.w	r9, r3, r1
 8021db2:	f04f 0200 	mov.w	r2, #0
 8021db6:	f04f 0300 	mov.w	r3, #0
 8021dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021dc6:	4690      	mov	r8, r2
 8021dc8:	4699      	mov	r9, r3
 8021dca:	4623      	mov	r3, r4
 8021dcc:	eb18 0303 	adds.w	r3, r8, r3
 8021dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8021dd4:	462b      	mov	r3, r5
 8021dd6:	eb49 0303 	adc.w	r3, r9, r3
 8021dda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8021dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021de2:	685b      	ldr	r3, [r3, #4]
 8021de4:	2200      	movs	r2, #0
 8021de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8021dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8021dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8021df2:	460b      	mov	r3, r1
 8021df4:	18db      	adds	r3, r3, r3
 8021df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8021df8:	4613      	mov	r3, r2
 8021dfa:	eb42 0303 	adc.w	r3, r2, r3
 8021dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8021e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8021e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8021e08:	f7fe fa3a 	bl	8020280 <__aeabi_uldivmod>
 8021e0c:	4602      	mov	r2, r0
 8021e0e:	460b      	mov	r3, r1
 8021e10:	4b61      	ldr	r3, [pc, #388]	@ (8021f98 <UART_SetConfig+0x2d4>)
 8021e12:	fba3 2302 	umull	r2, r3, r3, r2
 8021e16:	095b      	lsrs	r3, r3, #5
 8021e18:	011c      	lsls	r4, r3, #4
 8021e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021e1e:	2200      	movs	r2, #0
 8021e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8021e24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8021e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8021e2c:	4642      	mov	r2, r8
 8021e2e:	464b      	mov	r3, r9
 8021e30:	1891      	adds	r1, r2, r2
 8021e32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8021e34:	415b      	adcs	r3, r3
 8021e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8021e3c:	4641      	mov	r1, r8
 8021e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8021e42:	4649      	mov	r1, r9
 8021e44:	eb43 0b01 	adc.w	fp, r3, r1
 8021e48:	f04f 0200 	mov.w	r2, #0
 8021e4c:	f04f 0300 	mov.w	r3, #0
 8021e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8021e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8021e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021e5c:	4692      	mov	sl, r2
 8021e5e:	469b      	mov	fp, r3
 8021e60:	4643      	mov	r3, r8
 8021e62:	eb1a 0303 	adds.w	r3, sl, r3
 8021e66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8021e6a:	464b      	mov	r3, r9
 8021e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8021e70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8021e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021e78:	685b      	ldr	r3, [r3, #4]
 8021e7a:	2200      	movs	r2, #0
 8021e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8021e80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8021e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8021e88:	460b      	mov	r3, r1
 8021e8a:	18db      	adds	r3, r3, r3
 8021e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8021e8e:	4613      	mov	r3, r2
 8021e90:	eb42 0303 	adc.w	r3, r2, r3
 8021e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8021e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8021e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8021e9e:	f7fe f9ef 	bl	8020280 <__aeabi_uldivmod>
 8021ea2:	4602      	mov	r2, r0
 8021ea4:	460b      	mov	r3, r1
 8021ea6:	4611      	mov	r1, r2
 8021ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8021f98 <UART_SetConfig+0x2d4>)
 8021eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8021eae:	095b      	lsrs	r3, r3, #5
 8021eb0:	2264      	movs	r2, #100	@ 0x64
 8021eb2:	fb02 f303 	mul.w	r3, r2, r3
 8021eb6:	1acb      	subs	r3, r1, r3
 8021eb8:	00db      	lsls	r3, r3, #3
 8021eba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8021ebe:	4b36      	ldr	r3, [pc, #216]	@ (8021f98 <UART_SetConfig+0x2d4>)
 8021ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8021ec4:	095b      	lsrs	r3, r3, #5
 8021ec6:	005b      	lsls	r3, r3, #1
 8021ec8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8021ecc:	441c      	add	r4, r3
 8021ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021ed2:	2200      	movs	r2, #0
 8021ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8021ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8021edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8021ee0:	4642      	mov	r2, r8
 8021ee2:	464b      	mov	r3, r9
 8021ee4:	1891      	adds	r1, r2, r2
 8021ee6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8021ee8:	415b      	adcs	r3, r3
 8021eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8021ef0:	4641      	mov	r1, r8
 8021ef2:	1851      	adds	r1, r2, r1
 8021ef4:	6339      	str	r1, [r7, #48]	@ 0x30
 8021ef6:	4649      	mov	r1, r9
 8021ef8:	414b      	adcs	r3, r1
 8021efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8021efc:	f04f 0200 	mov.w	r2, #0
 8021f00:	f04f 0300 	mov.w	r3, #0
 8021f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8021f08:	4659      	mov	r1, fp
 8021f0a:	00cb      	lsls	r3, r1, #3
 8021f0c:	4651      	mov	r1, sl
 8021f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021f12:	4651      	mov	r1, sl
 8021f14:	00ca      	lsls	r2, r1, #3
 8021f16:	4610      	mov	r0, r2
 8021f18:	4619      	mov	r1, r3
 8021f1a:	4603      	mov	r3, r0
 8021f1c:	4642      	mov	r2, r8
 8021f1e:	189b      	adds	r3, r3, r2
 8021f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8021f24:	464b      	mov	r3, r9
 8021f26:	460a      	mov	r2, r1
 8021f28:	eb42 0303 	adc.w	r3, r2, r3
 8021f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8021f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021f34:	685b      	ldr	r3, [r3, #4]
 8021f36:	2200      	movs	r2, #0
 8021f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8021f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8021f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8021f44:	460b      	mov	r3, r1
 8021f46:	18db      	adds	r3, r3, r3
 8021f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021f4a:	4613      	mov	r3, r2
 8021f4c:	eb42 0303 	adc.w	r3, r2, r3
 8021f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8021f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8021f5a:	f7fe f991 	bl	8020280 <__aeabi_uldivmod>
 8021f5e:	4602      	mov	r2, r0
 8021f60:	460b      	mov	r3, r1
 8021f62:	4b0d      	ldr	r3, [pc, #52]	@ (8021f98 <UART_SetConfig+0x2d4>)
 8021f64:	fba3 1302 	umull	r1, r3, r3, r2
 8021f68:	095b      	lsrs	r3, r3, #5
 8021f6a:	2164      	movs	r1, #100	@ 0x64
 8021f6c:	fb01 f303 	mul.w	r3, r1, r3
 8021f70:	1ad3      	subs	r3, r2, r3
 8021f72:	00db      	lsls	r3, r3, #3
 8021f74:	3332      	adds	r3, #50	@ 0x32
 8021f76:	4a08      	ldr	r2, [pc, #32]	@ (8021f98 <UART_SetConfig+0x2d4>)
 8021f78:	fba2 2303 	umull	r2, r3, r2, r3
 8021f7c:	095b      	lsrs	r3, r3, #5
 8021f7e:	f003 0207 	and.w	r2, r3, #7
 8021f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	4422      	add	r2, r4
 8021f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8021f8c:	e106      	b.n	802219c <UART_SetConfig+0x4d8>
 8021f8e:	bf00      	nop
 8021f90:	40011000 	.word	0x40011000
 8021f94:	40011400 	.word	0x40011400
 8021f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021fa0:	2200      	movs	r2, #0
 8021fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8021fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8021faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8021fae:	4642      	mov	r2, r8
 8021fb0:	464b      	mov	r3, r9
 8021fb2:	1891      	adds	r1, r2, r2
 8021fb4:	6239      	str	r1, [r7, #32]
 8021fb6:	415b      	adcs	r3, r3
 8021fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8021fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021fbe:	4641      	mov	r1, r8
 8021fc0:	1854      	adds	r4, r2, r1
 8021fc2:	4649      	mov	r1, r9
 8021fc4:	eb43 0501 	adc.w	r5, r3, r1
 8021fc8:	f04f 0200 	mov.w	r2, #0
 8021fcc:	f04f 0300 	mov.w	r3, #0
 8021fd0:	00eb      	lsls	r3, r5, #3
 8021fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8021fd6:	00e2      	lsls	r2, r4, #3
 8021fd8:	4614      	mov	r4, r2
 8021fda:	461d      	mov	r5, r3
 8021fdc:	4643      	mov	r3, r8
 8021fde:	18e3      	adds	r3, r4, r3
 8021fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8021fe4:	464b      	mov	r3, r9
 8021fe6:	eb45 0303 	adc.w	r3, r5, r3
 8021fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8021fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021ff2:	685b      	ldr	r3, [r3, #4]
 8021ff4:	2200      	movs	r2, #0
 8021ff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8021ffa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8021ffe:	f04f 0200 	mov.w	r2, #0
 8022002:	f04f 0300 	mov.w	r3, #0
 8022006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 802200a:	4629      	mov	r1, r5
 802200c:	008b      	lsls	r3, r1, #2
 802200e:	4621      	mov	r1, r4
 8022010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022014:	4621      	mov	r1, r4
 8022016:	008a      	lsls	r2, r1, #2
 8022018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 802201c:	f7fe f930 	bl	8020280 <__aeabi_uldivmod>
 8022020:	4602      	mov	r2, r0
 8022022:	460b      	mov	r3, r1
 8022024:	4b60      	ldr	r3, [pc, #384]	@ (80221a8 <UART_SetConfig+0x4e4>)
 8022026:	fba3 2302 	umull	r2, r3, r3, r2
 802202a:	095b      	lsrs	r3, r3, #5
 802202c:	011c      	lsls	r4, r3, #4
 802202e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8022032:	2200      	movs	r2, #0
 8022034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8022038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 802203c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8022040:	4642      	mov	r2, r8
 8022042:	464b      	mov	r3, r9
 8022044:	1891      	adds	r1, r2, r2
 8022046:	61b9      	str	r1, [r7, #24]
 8022048:	415b      	adcs	r3, r3
 802204a:	61fb      	str	r3, [r7, #28]
 802204c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022050:	4641      	mov	r1, r8
 8022052:	1851      	adds	r1, r2, r1
 8022054:	6139      	str	r1, [r7, #16]
 8022056:	4649      	mov	r1, r9
 8022058:	414b      	adcs	r3, r1
 802205a:	617b      	str	r3, [r7, #20]
 802205c:	f04f 0200 	mov.w	r2, #0
 8022060:	f04f 0300 	mov.w	r3, #0
 8022064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022068:	4659      	mov	r1, fp
 802206a:	00cb      	lsls	r3, r1, #3
 802206c:	4651      	mov	r1, sl
 802206e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022072:	4651      	mov	r1, sl
 8022074:	00ca      	lsls	r2, r1, #3
 8022076:	4610      	mov	r0, r2
 8022078:	4619      	mov	r1, r3
 802207a:	4603      	mov	r3, r0
 802207c:	4642      	mov	r2, r8
 802207e:	189b      	adds	r3, r3, r2
 8022080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8022084:	464b      	mov	r3, r9
 8022086:	460a      	mov	r2, r1
 8022088:	eb42 0303 	adc.w	r3, r2, r3
 802208c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8022090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022094:	685b      	ldr	r3, [r3, #4]
 8022096:	2200      	movs	r2, #0
 8022098:	67bb      	str	r3, [r7, #120]	@ 0x78
 802209a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 802209c:	f04f 0200 	mov.w	r2, #0
 80220a0:	f04f 0300 	mov.w	r3, #0
 80220a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80220a8:	4649      	mov	r1, r9
 80220aa:	008b      	lsls	r3, r1, #2
 80220ac:	4641      	mov	r1, r8
 80220ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80220b2:	4641      	mov	r1, r8
 80220b4:	008a      	lsls	r2, r1, #2
 80220b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80220ba:	f7fe f8e1 	bl	8020280 <__aeabi_uldivmod>
 80220be:	4602      	mov	r2, r0
 80220c0:	460b      	mov	r3, r1
 80220c2:	4611      	mov	r1, r2
 80220c4:	4b38      	ldr	r3, [pc, #224]	@ (80221a8 <UART_SetConfig+0x4e4>)
 80220c6:	fba3 2301 	umull	r2, r3, r3, r1
 80220ca:	095b      	lsrs	r3, r3, #5
 80220cc:	2264      	movs	r2, #100	@ 0x64
 80220ce:	fb02 f303 	mul.w	r3, r2, r3
 80220d2:	1acb      	subs	r3, r1, r3
 80220d4:	011b      	lsls	r3, r3, #4
 80220d6:	3332      	adds	r3, #50	@ 0x32
 80220d8:	4a33      	ldr	r2, [pc, #204]	@ (80221a8 <UART_SetConfig+0x4e4>)
 80220da:	fba2 2303 	umull	r2, r3, r2, r3
 80220de:	095b      	lsrs	r3, r3, #5
 80220e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80220e4:	441c      	add	r4, r3
 80220e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80220ea:	2200      	movs	r2, #0
 80220ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80220ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80220f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80220f4:	4642      	mov	r2, r8
 80220f6:	464b      	mov	r3, r9
 80220f8:	1891      	adds	r1, r2, r2
 80220fa:	60b9      	str	r1, [r7, #8]
 80220fc:	415b      	adcs	r3, r3
 80220fe:	60fb      	str	r3, [r7, #12]
 8022100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022104:	4641      	mov	r1, r8
 8022106:	1851      	adds	r1, r2, r1
 8022108:	6039      	str	r1, [r7, #0]
 802210a:	4649      	mov	r1, r9
 802210c:	414b      	adcs	r3, r1
 802210e:	607b      	str	r3, [r7, #4]
 8022110:	f04f 0200 	mov.w	r2, #0
 8022114:	f04f 0300 	mov.w	r3, #0
 8022118:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802211c:	4659      	mov	r1, fp
 802211e:	00cb      	lsls	r3, r1, #3
 8022120:	4651      	mov	r1, sl
 8022122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022126:	4651      	mov	r1, sl
 8022128:	00ca      	lsls	r2, r1, #3
 802212a:	4610      	mov	r0, r2
 802212c:	4619      	mov	r1, r3
 802212e:	4603      	mov	r3, r0
 8022130:	4642      	mov	r2, r8
 8022132:	189b      	adds	r3, r3, r2
 8022134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8022136:	464b      	mov	r3, r9
 8022138:	460a      	mov	r2, r1
 802213a:	eb42 0303 	adc.w	r3, r2, r3
 802213e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8022140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022144:	685b      	ldr	r3, [r3, #4]
 8022146:	2200      	movs	r2, #0
 8022148:	663b      	str	r3, [r7, #96]	@ 0x60
 802214a:	667a      	str	r2, [r7, #100]	@ 0x64
 802214c:	f04f 0200 	mov.w	r2, #0
 8022150:	f04f 0300 	mov.w	r3, #0
 8022154:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8022158:	4649      	mov	r1, r9
 802215a:	008b      	lsls	r3, r1, #2
 802215c:	4641      	mov	r1, r8
 802215e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022162:	4641      	mov	r1, r8
 8022164:	008a      	lsls	r2, r1, #2
 8022166:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 802216a:	f7fe f889 	bl	8020280 <__aeabi_uldivmod>
 802216e:	4602      	mov	r2, r0
 8022170:	460b      	mov	r3, r1
 8022172:	4b0d      	ldr	r3, [pc, #52]	@ (80221a8 <UART_SetConfig+0x4e4>)
 8022174:	fba3 1302 	umull	r1, r3, r3, r2
 8022178:	095b      	lsrs	r3, r3, #5
 802217a:	2164      	movs	r1, #100	@ 0x64
 802217c:	fb01 f303 	mul.w	r3, r1, r3
 8022180:	1ad3      	subs	r3, r2, r3
 8022182:	011b      	lsls	r3, r3, #4
 8022184:	3332      	adds	r3, #50	@ 0x32
 8022186:	4a08      	ldr	r2, [pc, #32]	@ (80221a8 <UART_SetConfig+0x4e4>)
 8022188:	fba2 2303 	umull	r2, r3, r2, r3
 802218c:	095b      	lsrs	r3, r3, #5
 802218e:	f003 020f 	and.w	r2, r3, #15
 8022192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	4422      	add	r2, r4
 802219a:	609a      	str	r2, [r3, #8]
}
 802219c:	bf00      	nop
 802219e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80221a2:	46bd      	mov	sp, r7
 80221a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80221a8:	51eb851f 	.word	0x51eb851f

080221ac <std>:
 80221ac:	2300      	movs	r3, #0
 80221ae:	b510      	push	{r4, lr}
 80221b0:	4604      	mov	r4, r0
 80221b2:	e9c0 3300 	strd	r3, r3, [r0]
 80221b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80221ba:	6083      	str	r3, [r0, #8]
 80221bc:	8181      	strh	r1, [r0, #12]
 80221be:	6643      	str	r3, [r0, #100]	@ 0x64
 80221c0:	81c2      	strh	r2, [r0, #14]
 80221c2:	6183      	str	r3, [r0, #24]
 80221c4:	4619      	mov	r1, r3
 80221c6:	2208      	movs	r2, #8
 80221c8:	305c      	adds	r0, #92	@ 0x5c
 80221ca:	f000 f906 	bl	80223da <memset>
 80221ce:	4b0d      	ldr	r3, [pc, #52]	@ (8022204 <std+0x58>)
 80221d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80221d2:	4b0d      	ldr	r3, [pc, #52]	@ (8022208 <std+0x5c>)
 80221d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80221d6:	4b0d      	ldr	r3, [pc, #52]	@ (802220c <std+0x60>)
 80221d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80221da:	4b0d      	ldr	r3, [pc, #52]	@ (8022210 <std+0x64>)
 80221dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80221de:	4b0d      	ldr	r3, [pc, #52]	@ (8022214 <std+0x68>)
 80221e0:	6224      	str	r4, [r4, #32]
 80221e2:	429c      	cmp	r4, r3
 80221e4:	d006      	beq.n	80221f4 <std+0x48>
 80221e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80221ea:	4294      	cmp	r4, r2
 80221ec:	d002      	beq.n	80221f4 <std+0x48>
 80221ee:	33d0      	adds	r3, #208	@ 0xd0
 80221f0:	429c      	cmp	r4, r3
 80221f2:	d105      	bne.n	8022200 <std+0x54>
 80221f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80221f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221fc:	f000 b966 	b.w	80224cc <__retarget_lock_init_recursive>
 8022200:	bd10      	pop	{r4, pc}
 8022202:	bf00      	nop
 8022204:	08022355 	.word	0x08022355
 8022208:	08022377 	.word	0x08022377
 802220c:	080223af 	.word	0x080223af
 8022210:	080223d3 	.word	0x080223d3
 8022214:	200000d4 	.word	0x200000d4

08022218 <stdio_exit_handler>:
 8022218:	4a02      	ldr	r2, [pc, #8]	@ (8022224 <stdio_exit_handler+0xc>)
 802221a:	4903      	ldr	r1, [pc, #12]	@ (8022228 <stdio_exit_handler+0x10>)
 802221c:	4803      	ldr	r0, [pc, #12]	@ (802222c <stdio_exit_handler+0x14>)
 802221e:	f000 b869 	b.w	80222f4 <_fwalk_sglue>
 8022222:	bf00      	nop
 8022224:	2000000c 	.word	0x2000000c
 8022228:	08022d6d 	.word	0x08022d6d
 802222c:	2000001c 	.word	0x2000001c

08022230 <cleanup_stdio>:
 8022230:	6841      	ldr	r1, [r0, #4]
 8022232:	4b0c      	ldr	r3, [pc, #48]	@ (8022264 <cleanup_stdio+0x34>)
 8022234:	4299      	cmp	r1, r3
 8022236:	b510      	push	{r4, lr}
 8022238:	4604      	mov	r4, r0
 802223a:	d001      	beq.n	8022240 <cleanup_stdio+0x10>
 802223c:	f000 fd96 	bl	8022d6c <_fflush_r>
 8022240:	68a1      	ldr	r1, [r4, #8]
 8022242:	4b09      	ldr	r3, [pc, #36]	@ (8022268 <cleanup_stdio+0x38>)
 8022244:	4299      	cmp	r1, r3
 8022246:	d002      	beq.n	802224e <cleanup_stdio+0x1e>
 8022248:	4620      	mov	r0, r4
 802224a:	f000 fd8f 	bl	8022d6c <_fflush_r>
 802224e:	68e1      	ldr	r1, [r4, #12]
 8022250:	4b06      	ldr	r3, [pc, #24]	@ (802226c <cleanup_stdio+0x3c>)
 8022252:	4299      	cmp	r1, r3
 8022254:	d004      	beq.n	8022260 <cleanup_stdio+0x30>
 8022256:	4620      	mov	r0, r4
 8022258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802225c:	f000 bd86 	b.w	8022d6c <_fflush_r>
 8022260:	bd10      	pop	{r4, pc}
 8022262:	bf00      	nop
 8022264:	200000d4 	.word	0x200000d4
 8022268:	2000013c 	.word	0x2000013c
 802226c:	200001a4 	.word	0x200001a4

08022270 <global_stdio_init.part.0>:
 8022270:	b510      	push	{r4, lr}
 8022272:	4b0b      	ldr	r3, [pc, #44]	@ (80222a0 <global_stdio_init.part.0+0x30>)
 8022274:	4c0b      	ldr	r4, [pc, #44]	@ (80222a4 <global_stdio_init.part.0+0x34>)
 8022276:	4a0c      	ldr	r2, [pc, #48]	@ (80222a8 <global_stdio_init.part.0+0x38>)
 8022278:	601a      	str	r2, [r3, #0]
 802227a:	4620      	mov	r0, r4
 802227c:	2200      	movs	r2, #0
 802227e:	2104      	movs	r1, #4
 8022280:	f7ff ff94 	bl	80221ac <std>
 8022284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022288:	2201      	movs	r2, #1
 802228a:	2109      	movs	r1, #9
 802228c:	f7ff ff8e 	bl	80221ac <std>
 8022290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022294:	2202      	movs	r2, #2
 8022296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802229a:	2112      	movs	r1, #18
 802229c:	f7ff bf86 	b.w	80221ac <std>
 80222a0:	2000020c 	.word	0x2000020c
 80222a4:	200000d4 	.word	0x200000d4
 80222a8:	08022219 	.word	0x08022219

080222ac <__sfp_lock_acquire>:
 80222ac:	4801      	ldr	r0, [pc, #4]	@ (80222b4 <__sfp_lock_acquire+0x8>)
 80222ae:	f000 b90e 	b.w	80224ce <__retarget_lock_acquire_recursive>
 80222b2:	bf00      	nop
 80222b4:	20000215 	.word	0x20000215

080222b8 <__sfp_lock_release>:
 80222b8:	4801      	ldr	r0, [pc, #4]	@ (80222c0 <__sfp_lock_release+0x8>)
 80222ba:	f000 b909 	b.w	80224d0 <__retarget_lock_release_recursive>
 80222be:	bf00      	nop
 80222c0:	20000215 	.word	0x20000215

080222c4 <__sinit>:
 80222c4:	b510      	push	{r4, lr}
 80222c6:	4604      	mov	r4, r0
 80222c8:	f7ff fff0 	bl	80222ac <__sfp_lock_acquire>
 80222cc:	6a23      	ldr	r3, [r4, #32]
 80222ce:	b11b      	cbz	r3, 80222d8 <__sinit+0x14>
 80222d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222d4:	f7ff bff0 	b.w	80222b8 <__sfp_lock_release>
 80222d8:	4b04      	ldr	r3, [pc, #16]	@ (80222ec <__sinit+0x28>)
 80222da:	6223      	str	r3, [r4, #32]
 80222dc:	4b04      	ldr	r3, [pc, #16]	@ (80222f0 <__sinit+0x2c>)
 80222de:	681b      	ldr	r3, [r3, #0]
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d1f5      	bne.n	80222d0 <__sinit+0xc>
 80222e4:	f7ff ffc4 	bl	8022270 <global_stdio_init.part.0>
 80222e8:	e7f2      	b.n	80222d0 <__sinit+0xc>
 80222ea:	bf00      	nop
 80222ec:	08022231 	.word	0x08022231
 80222f0:	2000020c 	.word	0x2000020c

080222f4 <_fwalk_sglue>:
 80222f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80222f8:	4607      	mov	r7, r0
 80222fa:	4688      	mov	r8, r1
 80222fc:	4614      	mov	r4, r2
 80222fe:	2600      	movs	r6, #0
 8022300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022304:	f1b9 0901 	subs.w	r9, r9, #1
 8022308:	d505      	bpl.n	8022316 <_fwalk_sglue+0x22>
 802230a:	6824      	ldr	r4, [r4, #0]
 802230c:	2c00      	cmp	r4, #0
 802230e:	d1f7      	bne.n	8022300 <_fwalk_sglue+0xc>
 8022310:	4630      	mov	r0, r6
 8022312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022316:	89ab      	ldrh	r3, [r5, #12]
 8022318:	2b01      	cmp	r3, #1
 802231a:	d907      	bls.n	802232c <_fwalk_sglue+0x38>
 802231c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022320:	3301      	adds	r3, #1
 8022322:	d003      	beq.n	802232c <_fwalk_sglue+0x38>
 8022324:	4629      	mov	r1, r5
 8022326:	4638      	mov	r0, r7
 8022328:	47c0      	blx	r8
 802232a:	4306      	orrs	r6, r0
 802232c:	3568      	adds	r5, #104	@ 0x68
 802232e:	e7e9      	b.n	8022304 <_fwalk_sglue+0x10>

08022330 <iprintf>:
 8022330:	b40f      	push	{r0, r1, r2, r3}
 8022332:	b507      	push	{r0, r1, r2, lr}
 8022334:	4906      	ldr	r1, [pc, #24]	@ (8022350 <iprintf+0x20>)
 8022336:	ab04      	add	r3, sp, #16
 8022338:	6808      	ldr	r0, [r1, #0]
 802233a:	f853 2b04 	ldr.w	r2, [r3], #4
 802233e:	6881      	ldr	r1, [r0, #8]
 8022340:	9301      	str	r3, [sp, #4]
 8022342:	f000 f9e9 	bl	8022718 <_vfiprintf_r>
 8022346:	b003      	add	sp, #12
 8022348:	f85d eb04 	ldr.w	lr, [sp], #4
 802234c:	b004      	add	sp, #16
 802234e:	4770      	bx	lr
 8022350:	20000018 	.word	0x20000018

08022354 <__sread>:
 8022354:	b510      	push	{r4, lr}
 8022356:	460c      	mov	r4, r1
 8022358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802235c:	f000 f868 	bl	8022430 <_read_r>
 8022360:	2800      	cmp	r0, #0
 8022362:	bfab      	itete	ge
 8022364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022366:	89a3      	ldrhlt	r3, [r4, #12]
 8022368:	181b      	addge	r3, r3, r0
 802236a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802236e:	bfac      	ite	ge
 8022370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022372:	81a3      	strhlt	r3, [r4, #12]
 8022374:	bd10      	pop	{r4, pc}

08022376 <__swrite>:
 8022376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802237a:	461f      	mov	r7, r3
 802237c:	898b      	ldrh	r3, [r1, #12]
 802237e:	05db      	lsls	r3, r3, #23
 8022380:	4605      	mov	r5, r0
 8022382:	460c      	mov	r4, r1
 8022384:	4616      	mov	r6, r2
 8022386:	d505      	bpl.n	8022394 <__swrite+0x1e>
 8022388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802238c:	2302      	movs	r3, #2
 802238e:	2200      	movs	r2, #0
 8022390:	f000 f83c 	bl	802240c <_lseek_r>
 8022394:	89a3      	ldrh	r3, [r4, #12]
 8022396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802239a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802239e:	81a3      	strh	r3, [r4, #12]
 80223a0:	4632      	mov	r2, r6
 80223a2:	463b      	mov	r3, r7
 80223a4:	4628      	mov	r0, r5
 80223a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80223aa:	f000 b853 	b.w	8022454 <_write_r>

080223ae <__sseek>:
 80223ae:	b510      	push	{r4, lr}
 80223b0:	460c      	mov	r4, r1
 80223b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223b6:	f000 f829 	bl	802240c <_lseek_r>
 80223ba:	1c43      	adds	r3, r0, #1
 80223bc:	89a3      	ldrh	r3, [r4, #12]
 80223be:	bf15      	itete	ne
 80223c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80223c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80223c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80223ca:	81a3      	strheq	r3, [r4, #12]
 80223cc:	bf18      	it	ne
 80223ce:	81a3      	strhne	r3, [r4, #12]
 80223d0:	bd10      	pop	{r4, pc}

080223d2 <__sclose>:
 80223d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223d6:	f000 b809 	b.w	80223ec <_close_r>

080223da <memset>:
 80223da:	4402      	add	r2, r0
 80223dc:	4603      	mov	r3, r0
 80223de:	4293      	cmp	r3, r2
 80223e0:	d100      	bne.n	80223e4 <memset+0xa>
 80223e2:	4770      	bx	lr
 80223e4:	f803 1b01 	strb.w	r1, [r3], #1
 80223e8:	e7f9      	b.n	80223de <memset+0x4>
	...

080223ec <_close_r>:
 80223ec:	b538      	push	{r3, r4, r5, lr}
 80223ee:	4d06      	ldr	r5, [pc, #24]	@ (8022408 <_close_r+0x1c>)
 80223f0:	2300      	movs	r3, #0
 80223f2:	4604      	mov	r4, r0
 80223f4:	4608      	mov	r0, r1
 80223f6:	602b      	str	r3, [r5, #0]
 80223f8:	f7fe fa96 	bl	8020928 <_close>
 80223fc:	1c43      	adds	r3, r0, #1
 80223fe:	d102      	bne.n	8022406 <_close_r+0x1a>
 8022400:	682b      	ldr	r3, [r5, #0]
 8022402:	b103      	cbz	r3, 8022406 <_close_r+0x1a>
 8022404:	6023      	str	r3, [r4, #0]
 8022406:	bd38      	pop	{r3, r4, r5, pc}
 8022408:	20000210 	.word	0x20000210

0802240c <_lseek_r>:
 802240c:	b538      	push	{r3, r4, r5, lr}
 802240e:	4d07      	ldr	r5, [pc, #28]	@ (802242c <_lseek_r+0x20>)
 8022410:	4604      	mov	r4, r0
 8022412:	4608      	mov	r0, r1
 8022414:	4611      	mov	r1, r2
 8022416:	2200      	movs	r2, #0
 8022418:	602a      	str	r2, [r5, #0]
 802241a:	461a      	mov	r2, r3
 802241c:	f7fe faab 	bl	8020976 <_lseek>
 8022420:	1c43      	adds	r3, r0, #1
 8022422:	d102      	bne.n	802242a <_lseek_r+0x1e>
 8022424:	682b      	ldr	r3, [r5, #0]
 8022426:	b103      	cbz	r3, 802242a <_lseek_r+0x1e>
 8022428:	6023      	str	r3, [r4, #0]
 802242a:	bd38      	pop	{r3, r4, r5, pc}
 802242c:	20000210 	.word	0x20000210

08022430 <_read_r>:
 8022430:	b538      	push	{r3, r4, r5, lr}
 8022432:	4d07      	ldr	r5, [pc, #28]	@ (8022450 <_read_r+0x20>)
 8022434:	4604      	mov	r4, r0
 8022436:	4608      	mov	r0, r1
 8022438:	4611      	mov	r1, r2
 802243a:	2200      	movs	r2, #0
 802243c:	602a      	str	r2, [r5, #0]
 802243e:	461a      	mov	r2, r3
 8022440:	f7fe fa39 	bl	80208b6 <_read>
 8022444:	1c43      	adds	r3, r0, #1
 8022446:	d102      	bne.n	802244e <_read_r+0x1e>
 8022448:	682b      	ldr	r3, [r5, #0]
 802244a:	b103      	cbz	r3, 802244e <_read_r+0x1e>
 802244c:	6023      	str	r3, [r4, #0]
 802244e:	bd38      	pop	{r3, r4, r5, pc}
 8022450:	20000210 	.word	0x20000210

08022454 <_write_r>:
 8022454:	b538      	push	{r3, r4, r5, lr}
 8022456:	4d07      	ldr	r5, [pc, #28]	@ (8022474 <_write_r+0x20>)
 8022458:	4604      	mov	r4, r0
 802245a:	4608      	mov	r0, r1
 802245c:	4611      	mov	r1, r2
 802245e:	2200      	movs	r2, #0
 8022460:	602a      	str	r2, [r5, #0]
 8022462:	461a      	mov	r2, r3
 8022464:	f7fe fa44 	bl	80208f0 <_write>
 8022468:	1c43      	adds	r3, r0, #1
 802246a:	d102      	bne.n	8022472 <_write_r+0x1e>
 802246c:	682b      	ldr	r3, [r5, #0]
 802246e:	b103      	cbz	r3, 8022472 <_write_r+0x1e>
 8022470:	6023      	str	r3, [r4, #0]
 8022472:	bd38      	pop	{r3, r4, r5, pc}
 8022474:	20000210 	.word	0x20000210

08022478 <__errno>:
 8022478:	4b01      	ldr	r3, [pc, #4]	@ (8022480 <__errno+0x8>)
 802247a:	6818      	ldr	r0, [r3, #0]
 802247c:	4770      	bx	lr
 802247e:	bf00      	nop
 8022480:	20000018 	.word	0x20000018

08022484 <__libc_init_array>:
 8022484:	b570      	push	{r4, r5, r6, lr}
 8022486:	4d0d      	ldr	r5, [pc, #52]	@ (80224bc <__libc_init_array+0x38>)
 8022488:	4c0d      	ldr	r4, [pc, #52]	@ (80224c0 <__libc_init_array+0x3c>)
 802248a:	1b64      	subs	r4, r4, r5
 802248c:	10a4      	asrs	r4, r4, #2
 802248e:	2600      	movs	r6, #0
 8022490:	42a6      	cmp	r6, r4
 8022492:	d109      	bne.n	80224a8 <__libc_init_array+0x24>
 8022494:	4d0b      	ldr	r5, [pc, #44]	@ (80224c4 <__libc_init_array+0x40>)
 8022496:	4c0c      	ldr	r4, [pc, #48]	@ (80224c8 <__libc_init_array+0x44>)
 8022498:	f000 fdb8 	bl	802300c <_init>
 802249c:	1b64      	subs	r4, r4, r5
 802249e:	10a4      	asrs	r4, r4, #2
 80224a0:	2600      	movs	r6, #0
 80224a2:	42a6      	cmp	r6, r4
 80224a4:	d105      	bne.n	80224b2 <__libc_init_array+0x2e>
 80224a6:	bd70      	pop	{r4, r5, r6, pc}
 80224a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80224ac:	4798      	blx	r3
 80224ae:	3601      	adds	r6, #1
 80224b0:	e7ee      	b.n	8022490 <__libc_init_array+0xc>
 80224b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80224b6:	4798      	blx	r3
 80224b8:	3601      	adds	r6, #1
 80224ba:	e7f2      	b.n	80224a2 <__libc_init_array+0x1e>
 80224bc:	08023098 	.word	0x08023098
 80224c0:	08023098 	.word	0x08023098
 80224c4:	08023098 	.word	0x08023098
 80224c8:	0802309c 	.word	0x0802309c

080224cc <__retarget_lock_init_recursive>:
 80224cc:	4770      	bx	lr

080224ce <__retarget_lock_acquire_recursive>:
 80224ce:	4770      	bx	lr

080224d0 <__retarget_lock_release_recursive>:
 80224d0:	4770      	bx	lr
	...

080224d4 <_free_r>:
 80224d4:	b538      	push	{r3, r4, r5, lr}
 80224d6:	4605      	mov	r5, r0
 80224d8:	2900      	cmp	r1, #0
 80224da:	d041      	beq.n	8022560 <_free_r+0x8c>
 80224dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80224e0:	1f0c      	subs	r4, r1, #4
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	bfb8      	it	lt
 80224e6:	18e4      	addlt	r4, r4, r3
 80224e8:	f000 f8e0 	bl	80226ac <__malloc_lock>
 80224ec:	4a1d      	ldr	r2, [pc, #116]	@ (8022564 <_free_r+0x90>)
 80224ee:	6813      	ldr	r3, [r2, #0]
 80224f0:	b933      	cbnz	r3, 8022500 <_free_r+0x2c>
 80224f2:	6063      	str	r3, [r4, #4]
 80224f4:	6014      	str	r4, [r2, #0]
 80224f6:	4628      	mov	r0, r5
 80224f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80224fc:	f000 b8dc 	b.w	80226b8 <__malloc_unlock>
 8022500:	42a3      	cmp	r3, r4
 8022502:	d908      	bls.n	8022516 <_free_r+0x42>
 8022504:	6820      	ldr	r0, [r4, #0]
 8022506:	1821      	adds	r1, r4, r0
 8022508:	428b      	cmp	r3, r1
 802250a:	bf01      	itttt	eq
 802250c:	6819      	ldreq	r1, [r3, #0]
 802250e:	685b      	ldreq	r3, [r3, #4]
 8022510:	1809      	addeq	r1, r1, r0
 8022512:	6021      	streq	r1, [r4, #0]
 8022514:	e7ed      	b.n	80224f2 <_free_r+0x1e>
 8022516:	461a      	mov	r2, r3
 8022518:	685b      	ldr	r3, [r3, #4]
 802251a:	b10b      	cbz	r3, 8022520 <_free_r+0x4c>
 802251c:	42a3      	cmp	r3, r4
 802251e:	d9fa      	bls.n	8022516 <_free_r+0x42>
 8022520:	6811      	ldr	r1, [r2, #0]
 8022522:	1850      	adds	r0, r2, r1
 8022524:	42a0      	cmp	r0, r4
 8022526:	d10b      	bne.n	8022540 <_free_r+0x6c>
 8022528:	6820      	ldr	r0, [r4, #0]
 802252a:	4401      	add	r1, r0
 802252c:	1850      	adds	r0, r2, r1
 802252e:	4283      	cmp	r3, r0
 8022530:	6011      	str	r1, [r2, #0]
 8022532:	d1e0      	bne.n	80224f6 <_free_r+0x22>
 8022534:	6818      	ldr	r0, [r3, #0]
 8022536:	685b      	ldr	r3, [r3, #4]
 8022538:	6053      	str	r3, [r2, #4]
 802253a:	4408      	add	r0, r1
 802253c:	6010      	str	r0, [r2, #0]
 802253e:	e7da      	b.n	80224f6 <_free_r+0x22>
 8022540:	d902      	bls.n	8022548 <_free_r+0x74>
 8022542:	230c      	movs	r3, #12
 8022544:	602b      	str	r3, [r5, #0]
 8022546:	e7d6      	b.n	80224f6 <_free_r+0x22>
 8022548:	6820      	ldr	r0, [r4, #0]
 802254a:	1821      	adds	r1, r4, r0
 802254c:	428b      	cmp	r3, r1
 802254e:	bf04      	itt	eq
 8022550:	6819      	ldreq	r1, [r3, #0]
 8022552:	685b      	ldreq	r3, [r3, #4]
 8022554:	6063      	str	r3, [r4, #4]
 8022556:	bf04      	itt	eq
 8022558:	1809      	addeq	r1, r1, r0
 802255a:	6021      	streq	r1, [r4, #0]
 802255c:	6054      	str	r4, [r2, #4]
 802255e:	e7ca      	b.n	80224f6 <_free_r+0x22>
 8022560:	bd38      	pop	{r3, r4, r5, pc}
 8022562:	bf00      	nop
 8022564:	2000021c 	.word	0x2000021c

08022568 <sbrk_aligned>:
 8022568:	b570      	push	{r4, r5, r6, lr}
 802256a:	4e0f      	ldr	r6, [pc, #60]	@ (80225a8 <sbrk_aligned+0x40>)
 802256c:	460c      	mov	r4, r1
 802256e:	6831      	ldr	r1, [r6, #0]
 8022570:	4605      	mov	r5, r0
 8022572:	b911      	cbnz	r1, 802257a <sbrk_aligned+0x12>
 8022574:	f000 fcb6 	bl	8022ee4 <_sbrk_r>
 8022578:	6030      	str	r0, [r6, #0]
 802257a:	4621      	mov	r1, r4
 802257c:	4628      	mov	r0, r5
 802257e:	f000 fcb1 	bl	8022ee4 <_sbrk_r>
 8022582:	1c43      	adds	r3, r0, #1
 8022584:	d103      	bne.n	802258e <sbrk_aligned+0x26>
 8022586:	f04f 34ff 	mov.w	r4, #4294967295
 802258a:	4620      	mov	r0, r4
 802258c:	bd70      	pop	{r4, r5, r6, pc}
 802258e:	1cc4      	adds	r4, r0, #3
 8022590:	f024 0403 	bic.w	r4, r4, #3
 8022594:	42a0      	cmp	r0, r4
 8022596:	d0f8      	beq.n	802258a <sbrk_aligned+0x22>
 8022598:	1a21      	subs	r1, r4, r0
 802259a:	4628      	mov	r0, r5
 802259c:	f000 fca2 	bl	8022ee4 <_sbrk_r>
 80225a0:	3001      	adds	r0, #1
 80225a2:	d1f2      	bne.n	802258a <sbrk_aligned+0x22>
 80225a4:	e7ef      	b.n	8022586 <sbrk_aligned+0x1e>
 80225a6:	bf00      	nop
 80225a8:	20000218 	.word	0x20000218

080225ac <_malloc_r>:
 80225ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80225b0:	1ccd      	adds	r5, r1, #3
 80225b2:	f025 0503 	bic.w	r5, r5, #3
 80225b6:	3508      	adds	r5, #8
 80225b8:	2d0c      	cmp	r5, #12
 80225ba:	bf38      	it	cc
 80225bc:	250c      	movcc	r5, #12
 80225be:	2d00      	cmp	r5, #0
 80225c0:	4606      	mov	r6, r0
 80225c2:	db01      	blt.n	80225c8 <_malloc_r+0x1c>
 80225c4:	42a9      	cmp	r1, r5
 80225c6:	d904      	bls.n	80225d2 <_malloc_r+0x26>
 80225c8:	230c      	movs	r3, #12
 80225ca:	6033      	str	r3, [r6, #0]
 80225cc:	2000      	movs	r0, #0
 80225ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80225d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80226a8 <_malloc_r+0xfc>
 80225d6:	f000 f869 	bl	80226ac <__malloc_lock>
 80225da:	f8d8 3000 	ldr.w	r3, [r8]
 80225de:	461c      	mov	r4, r3
 80225e0:	bb44      	cbnz	r4, 8022634 <_malloc_r+0x88>
 80225e2:	4629      	mov	r1, r5
 80225e4:	4630      	mov	r0, r6
 80225e6:	f7ff ffbf 	bl	8022568 <sbrk_aligned>
 80225ea:	1c43      	adds	r3, r0, #1
 80225ec:	4604      	mov	r4, r0
 80225ee:	d158      	bne.n	80226a2 <_malloc_r+0xf6>
 80225f0:	f8d8 4000 	ldr.w	r4, [r8]
 80225f4:	4627      	mov	r7, r4
 80225f6:	2f00      	cmp	r7, #0
 80225f8:	d143      	bne.n	8022682 <_malloc_r+0xd6>
 80225fa:	2c00      	cmp	r4, #0
 80225fc:	d04b      	beq.n	8022696 <_malloc_r+0xea>
 80225fe:	6823      	ldr	r3, [r4, #0]
 8022600:	4639      	mov	r1, r7
 8022602:	4630      	mov	r0, r6
 8022604:	eb04 0903 	add.w	r9, r4, r3
 8022608:	f000 fc6c 	bl	8022ee4 <_sbrk_r>
 802260c:	4581      	cmp	r9, r0
 802260e:	d142      	bne.n	8022696 <_malloc_r+0xea>
 8022610:	6821      	ldr	r1, [r4, #0]
 8022612:	1a6d      	subs	r5, r5, r1
 8022614:	4629      	mov	r1, r5
 8022616:	4630      	mov	r0, r6
 8022618:	f7ff ffa6 	bl	8022568 <sbrk_aligned>
 802261c:	3001      	adds	r0, #1
 802261e:	d03a      	beq.n	8022696 <_malloc_r+0xea>
 8022620:	6823      	ldr	r3, [r4, #0]
 8022622:	442b      	add	r3, r5
 8022624:	6023      	str	r3, [r4, #0]
 8022626:	f8d8 3000 	ldr.w	r3, [r8]
 802262a:	685a      	ldr	r2, [r3, #4]
 802262c:	bb62      	cbnz	r2, 8022688 <_malloc_r+0xdc>
 802262e:	f8c8 7000 	str.w	r7, [r8]
 8022632:	e00f      	b.n	8022654 <_malloc_r+0xa8>
 8022634:	6822      	ldr	r2, [r4, #0]
 8022636:	1b52      	subs	r2, r2, r5
 8022638:	d420      	bmi.n	802267c <_malloc_r+0xd0>
 802263a:	2a0b      	cmp	r2, #11
 802263c:	d917      	bls.n	802266e <_malloc_r+0xc2>
 802263e:	1961      	adds	r1, r4, r5
 8022640:	42a3      	cmp	r3, r4
 8022642:	6025      	str	r5, [r4, #0]
 8022644:	bf18      	it	ne
 8022646:	6059      	strne	r1, [r3, #4]
 8022648:	6863      	ldr	r3, [r4, #4]
 802264a:	bf08      	it	eq
 802264c:	f8c8 1000 	streq.w	r1, [r8]
 8022650:	5162      	str	r2, [r4, r5]
 8022652:	604b      	str	r3, [r1, #4]
 8022654:	4630      	mov	r0, r6
 8022656:	f000 f82f 	bl	80226b8 <__malloc_unlock>
 802265a:	f104 000b 	add.w	r0, r4, #11
 802265e:	1d23      	adds	r3, r4, #4
 8022660:	f020 0007 	bic.w	r0, r0, #7
 8022664:	1ac2      	subs	r2, r0, r3
 8022666:	bf1c      	itt	ne
 8022668:	1a1b      	subne	r3, r3, r0
 802266a:	50a3      	strne	r3, [r4, r2]
 802266c:	e7af      	b.n	80225ce <_malloc_r+0x22>
 802266e:	6862      	ldr	r2, [r4, #4]
 8022670:	42a3      	cmp	r3, r4
 8022672:	bf0c      	ite	eq
 8022674:	f8c8 2000 	streq.w	r2, [r8]
 8022678:	605a      	strne	r2, [r3, #4]
 802267a:	e7eb      	b.n	8022654 <_malloc_r+0xa8>
 802267c:	4623      	mov	r3, r4
 802267e:	6864      	ldr	r4, [r4, #4]
 8022680:	e7ae      	b.n	80225e0 <_malloc_r+0x34>
 8022682:	463c      	mov	r4, r7
 8022684:	687f      	ldr	r7, [r7, #4]
 8022686:	e7b6      	b.n	80225f6 <_malloc_r+0x4a>
 8022688:	461a      	mov	r2, r3
 802268a:	685b      	ldr	r3, [r3, #4]
 802268c:	42a3      	cmp	r3, r4
 802268e:	d1fb      	bne.n	8022688 <_malloc_r+0xdc>
 8022690:	2300      	movs	r3, #0
 8022692:	6053      	str	r3, [r2, #4]
 8022694:	e7de      	b.n	8022654 <_malloc_r+0xa8>
 8022696:	230c      	movs	r3, #12
 8022698:	6033      	str	r3, [r6, #0]
 802269a:	4630      	mov	r0, r6
 802269c:	f000 f80c 	bl	80226b8 <__malloc_unlock>
 80226a0:	e794      	b.n	80225cc <_malloc_r+0x20>
 80226a2:	6005      	str	r5, [r0, #0]
 80226a4:	e7d6      	b.n	8022654 <_malloc_r+0xa8>
 80226a6:	bf00      	nop
 80226a8:	2000021c 	.word	0x2000021c

080226ac <__malloc_lock>:
 80226ac:	4801      	ldr	r0, [pc, #4]	@ (80226b4 <__malloc_lock+0x8>)
 80226ae:	f7ff bf0e 	b.w	80224ce <__retarget_lock_acquire_recursive>
 80226b2:	bf00      	nop
 80226b4:	20000214 	.word	0x20000214

080226b8 <__malloc_unlock>:
 80226b8:	4801      	ldr	r0, [pc, #4]	@ (80226c0 <__malloc_unlock+0x8>)
 80226ba:	f7ff bf09 	b.w	80224d0 <__retarget_lock_release_recursive>
 80226be:	bf00      	nop
 80226c0:	20000214 	.word	0x20000214

080226c4 <__sfputc_r>:
 80226c4:	6893      	ldr	r3, [r2, #8]
 80226c6:	3b01      	subs	r3, #1
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	b410      	push	{r4}
 80226cc:	6093      	str	r3, [r2, #8]
 80226ce:	da08      	bge.n	80226e2 <__sfputc_r+0x1e>
 80226d0:	6994      	ldr	r4, [r2, #24]
 80226d2:	42a3      	cmp	r3, r4
 80226d4:	db01      	blt.n	80226da <__sfputc_r+0x16>
 80226d6:	290a      	cmp	r1, #10
 80226d8:	d103      	bne.n	80226e2 <__sfputc_r+0x1e>
 80226da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226de:	f000 bb6d 	b.w	8022dbc <__swbuf_r>
 80226e2:	6813      	ldr	r3, [r2, #0]
 80226e4:	1c58      	adds	r0, r3, #1
 80226e6:	6010      	str	r0, [r2, #0]
 80226e8:	7019      	strb	r1, [r3, #0]
 80226ea:	4608      	mov	r0, r1
 80226ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226f0:	4770      	bx	lr

080226f2 <__sfputs_r>:
 80226f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226f4:	4606      	mov	r6, r0
 80226f6:	460f      	mov	r7, r1
 80226f8:	4614      	mov	r4, r2
 80226fa:	18d5      	adds	r5, r2, r3
 80226fc:	42ac      	cmp	r4, r5
 80226fe:	d101      	bne.n	8022704 <__sfputs_r+0x12>
 8022700:	2000      	movs	r0, #0
 8022702:	e007      	b.n	8022714 <__sfputs_r+0x22>
 8022704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022708:	463a      	mov	r2, r7
 802270a:	4630      	mov	r0, r6
 802270c:	f7ff ffda 	bl	80226c4 <__sfputc_r>
 8022710:	1c43      	adds	r3, r0, #1
 8022712:	d1f3      	bne.n	80226fc <__sfputs_r+0xa>
 8022714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022718 <_vfiprintf_r>:
 8022718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802271c:	460d      	mov	r5, r1
 802271e:	b09d      	sub	sp, #116	@ 0x74
 8022720:	4614      	mov	r4, r2
 8022722:	4698      	mov	r8, r3
 8022724:	4606      	mov	r6, r0
 8022726:	b118      	cbz	r0, 8022730 <_vfiprintf_r+0x18>
 8022728:	6a03      	ldr	r3, [r0, #32]
 802272a:	b90b      	cbnz	r3, 8022730 <_vfiprintf_r+0x18>
 802272c:	f7ff fdca 	bl	80222c4 <__sinit>
 8022730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022732:	07d9      	lsls	r1, r3, #31
 8022734:	d405      	bmi.n	8022742 <_vfiprintf_r+0x2a>
 8022736:	89ab      	ldrh	r3, [r5, #12]
 8022738:	059a      	lsls	r2, r3, #22
 802273a:	d402      	bmi.n	8022742 <_vfiprintf_r+0x2a>
 802273c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802273e:	f7ff fec6 	bl	80224ce <__retarget_lock_acquire_recursive>
 8022742:	89ab      	ldrh	r3, [r5, #12]
 8022744:	071b      	lsls	r3, r3, #28
 8022746:	d501      	bpl.n	802274c <_vfiprintf_r+0x34>
 8022748:	692b      	ldr	r3, [r5, #16]
 802274a:	b99b      	cbnz	r3, 8022774 <_vfiprintf_r+0x5c>
 802274c:	4629      	mov	r1, r5
 802274e:	4630      	mov	r0, r6
 8022750:	f000 fb72 	bl	8022e38 <__swsetup_r>
 8022754:	b170      	cbz	r0, 8022774 <_vfiprintf_r+0x5c>
 8022756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022758:	07dc      	lsls	r4, r3, #31
 802275a:	d504      	bpl.n	8022766 <_vfiprintf_r+0x4e>
 802275c:	f04f 30ff 	mov.w	r0, #4294967295
 8022760:	b01d      	add	sp, #116	@ 0x74
 8022762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022766:	89ab      	ldrh	r3, [r5, #12]
 8022768:	0598      	lsls	r0, r3, #22
 802276a:	d4f7      	bmi.n	802275c <_vfiprintf_r+0x44>
 802276c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802276e:	f7ff feaf 	bl	80224d0 <__retarget_lock_release_recursive>
 8022772:	e7f3      	b.n	802275c <_vfiprintf_r+0x44>
 8022774:	2300      	movs	r3, #0
 8022776:	9309      	str	r3, [sp, #36]	@ 0x24
 8022778:	2320      	movs	r3, #32
 802277a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802277e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022782:	2330      	movs	r3, #48	@ 0x30
 8022784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022934 <_vfiprintf_r+0x21c>
 8022788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802278c:	f04f 0901 	mov.w	r9, #1
 8022790:	4623      	mov	r3, r4
 8022792:	469a      	mov	sl, r3
 8022794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022798:	b10a      	cbz	r2, 802279e <_vfiprintf_r+0x86>
 802279a:	2a25      	cmp	r2, #37	@ 0x25
 802279c:	d1f9      	bne.n	8022792 <_vfiprintf_r+0x7a>
 802279e:	ebba 0b04 	subs.w	fp, sl, r4
 80227a2:	d00b      	beq.n	80227bc <_vfiprintf_r+0xa4>
 80227a4:	465b      	mov	r3, fp
 80227a6:	4622      	mov	r2, r4
 80227a8:	4629      	mov	r1, r5
 80227aa:	4630      	mov	r0, r6
 80227ac:	f7ff ffa1 	bl	80226f2 <__sfputs_r>
 80227b0:	3001      	adds	r0, #1
 80227b2:	f000 80a7 	beq.w	8022904 <_vfiprintf_r+0x1ec>
 80227b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80227b8:	445a      	add	r2, fp
 80227ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80227bc:	f89a 3000 	ldrb.w	r3, [sl]
 80227c0:	2b00      	cmp	r3, #0
 80227c2:	f000 809f 	beq.w	8022904 <_vfiprintf_r+0x1ec>
 80227c6:	2300      	movs	r3, #0
 80227c8:	f04f 32ff 	mov.w	r2, #4294967295
 80227cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80227d0:	f10a 0a01 	add.w	sl, sl, #1
 80227d4:	9304      	str	r3, [sp, #16]
 80227d6:	9307      	str	r3, [sp, #28]
 80227d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80227dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80227de:	4654      	mov	r4, sl
 80227e0:	2205      	movs	r2, #5
 80227e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227e6:	4853      	ldr	r0, [pc, #332]	@ (8022934 <_vfiprintf_r+0x21c>)
 80227e8:	f7fd fcfa 	bl	80201e0 <memchr>
 80227ec:	9a04      	ldr	r2, [sp, #16]
 80227ee:	b9d8      	cbnz	r0, 8022828 <_vfiprintf_r+0x110>
 80227f0:	06d1      	lsls	r1, r2, #27
 80227f2:	bf44      	itt	mi
 80227f4:	2320      	movmi	r3, #32
 80227f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80227fa:	0713      	lsls	r3, r2, #28
 80227fc:	bf44      	itt	mi
 80227fe:	232b      	movmi	r3, #43	@ 0x2b
 8022800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022804:	f89a 3000 	ldrb.w	r3, [sl]
 8022808:	2b2a      	cmp	r3, #42	@ 0x2a
 802280a:	d015      	beq.n	8022838 <_vfiprintf_r+0x120>
 802280c:	9a07      	ldr	r2, [sp, #28]
 802280e:	4654      	mov	r4, sl
 8022810:	2000      	movs	r0, #0
 8022812:	f04f 0c0a 	mov.w	ip, #10
 8022816:	4621      	mov	r1, r4
 8022818:	f811 3b01 	ldrb.w	r3, [r1], #1
 802281c:	3b30      	subs	r3, #48	@ 0x30
 802281e:	2b09      	cmp	r3, #9
 8022820:	d94b      	bls.n	80228ba <_vfiprintf_r+0x1a2>
 8022822:	b1b0      	cbz	r0, 8022852 <_vfiprintf_r+0x13a>
 8022824:	9207      	str	r2, [sp, #28]
 8022826:	e014      	b.n	8022852 <_vfiprintf_r+0x13a>
 8022828:	eba0 0308 	sub.w	r3, r0, r8
 802282c:	fa09 f303 	lsl.w	r3, r9, r3
 8022830:	4313      	orrs	r3, r2
 8022832:	9304      	str	r3, [sp, #16]
 8022834:	46a2      	mov	sl, r4
 8022836:	e7d2      	b.n	80227de <_vfiprintf_r+0xc6>
 8022838:	9b03      	ldr	r3, [sp, #12]
 802283a:	1d19      	adds	r1, r3, #4
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	9103      	str	r1, [sp, #12]
 8022840:	2b00      	cmp	r3, #0
 8022842:	bfbb      	ittet	lt
 8022844:	425b      	neglt	r3, r3
 8022846:	f042 0202 	orrlt.w	r2, r2, #2
 802284a:	9307      	strge	r3, [sp, #28]
 802284c:	9307      	strlt	r3, [sp, #28]
 802284e:	bfb8      	it	lt
 8022850:	9204      	strlt	r2, [sp, #16]
 8022852:	7823      	ldrb	r3, [r4, #0]
 8022854:	2b2e      	cmp	r3, #46	@ 0x2e
 8022856:	d10a      	bne.n	802286e <_vfiprintf_r+0x156>
 8022858:	7863      	ldrb	r3, [r4, #1]
 802285a:	2b2a      	cmp	r3, #42	@ 0x2a
 802285c:	d132      	bne.n	80228c4 <_vfiprintf_r+0x1ac>
 802285e:	9b03      	ldr	r3, [sp, #12]
 8022860:	1d1a      	adds	r2, r3, #4
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	9203      	str	r2, [sp, #12]
 8022866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802286a:	3402      	adds	r4, #2
 802286c:	9305      	str	r3, [sp, #20]
 802286e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022944 <_vfiprintf_r+0x22c>
 8022872:	7821      	ldrb	r1, [r4, #0]
 8022874:	2203      	movs	r2, #3
 8022876:	4650      	mov	r0, sl
 8022878:	f7fd fcb2 	bl	80201e0 <memchr>
 802287c:	b138      	cbz	r0, 802288e <_vfiprintf_r+0x176>
 802287e:	9b04      	ldr	r3, [sp, #16]
 8022880:	eba0 000a 	sub.w	r0, r0, sl
 8022884:	2240      	movs	r2, #64	@ 0x40
 8022886:	4082      	lsls	r2, r0
 8022888:	4313      	orrs	r3, r2
 802288a:	3401      	adds	r4, #1
 802288c:	9304      	str	r3, [sp, #16]
 802288e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022892:	4829      	ldr	r0, [pc, #164]	@ (8022938 <_vfiprintf_r+0x220>)
 8022894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022898:	2206      	movs	r2, #6
 802289a:	f7fd fca1 	bl	80201e0 <memchr>
 802289e:	2800      	cmp	r0, #0
 80228a0:	d03f      	beq.n	8022922 <_vfiprintf_r+0x20a>
 80228a2:	4b26      	ldr	r3, [pc, #152]	@ (802293c <_vfiprintf_r+0x224>)
 80228a4:	bb1b      	cbnz	r3, 80228ee <_vfiprintf_r+0x1d6>
 80228a6:	9b03      	ldr	r3, [sp, #12]
 80228a8:	3307      	adds	r3, #7
 80228aa:	f023 0307 	bic.w	r3, r3, #7
 80228ae:	3308      	adds	r3, #8
 80228b0:	9303      	str	r3, [sp, #12]
 80228b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228b4:	443b      	add	r3, r7
 80228b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80228b8:	e76a      	b.n	8022790 <_vfiprintf_r+0x78>
 80228ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80228be:	460c      	mov	r4, r1
 80228c0:	2001      	movs	r0, #1
 80228c2:	e7a8      	b.n	8022816 <_vfiprintf_r+0xfe>
 80228c4:	2300      	movs	r3, #0
 80228c6:	3401      	adds	r4, #1
 80228c8:	9305      	str	r3, [sp, #20]
 80228ca:	4619      	mov	r1, r3
 80228cc:	f04f 0c0a 	mov.w	ip, #10
 80228d0:	4620      	mov	r0, r4
 80228d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228d6:	3a30      	subs	r2, #48	@ 0x30
 80228d8:	2a09      	cmp	r2, #9
 80228da:	d903      	bls.n	80228e4 <_vfiprintf_r+0x1cc>
 80228dc:	2b00      	cmp	r3, #0
 80228de:	d0c6      	beq.n	802286e <_vfiprintf_r+0x156>
 80228e0:	9105      	str	r1, [sp, #20]
 80228e2:	e7c4      	b.n	802286e <_vfiprintf_r+0x156>
 80228e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80228e8:	4604      	mov	r4, r0
 80228ea:	2301      	movs	r3, #1
 80228ec:	e7f0      	b.n	80228d0 <_vfiprintf_r+0x1b8>
 80228ee:	ab03      	add	r3, sp, #12
 80228f0:	9300      	str	r3, [sp, #0]
 80228f2:	462a      	mov	r2, r5
 80228f4:	4b12      	ldr	r3, [pc, #72]	@ (8022940 <_vfiprintf_r+0x228>)
 80228f6:	a904      	add	r1, sp, #16
 80228f8:	4630      	mov	r0, r6
 80228fa:	f3af 8000 	nop.w
 80228fe:	4607      	mov	r7, r0
 8022900:	1c78      	adds	r0, r7, #1
 8022902:	d1d6      	bne.n	80228b2 <_vfiprintf_r+0x19a>
 8022904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022906:	07d9      	lsls	r1, r3, #31
 8022908:	d405      	bmi.n	8022916 <_vfiprintf_r+0x1fe>
 802290a:	89ab      	ldrh	r3, [r5, #12]
 802290c:	059a      	lsls	r2, r3, #22
 802290e:	d402      	bmi.n	8022916 <_vfiprintf_r+0x1fe>
 8022910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022912:	f7ff fddd 	bl	80224d0 <__retarget_lock_release_recursive>
 8022916:	89ab      	ldrh	r3, [r5, #12]
 8022918:	065b      	lsls	r3, r3, #25
 802291a:	f53f af1f 	bmi.w	802275c <_vfiprintf_r+0x44>
 802291e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022920:	e71e      	b.n	8022760 <_vfiprintf_r+0x48>
 8022922:	ab03      	add	r3, sp, #12
 8022924:	9300      	str	r3, [sp, #0]
 8022926:	462a      	mov	r2, r5
 8022928:	4b05      	ldr	r3, [pc, #20]	@ (8022940 <_vfiprintf_r+0x228>)
 802292a:	a904      	add	r1, sp, #16
 802292c:	4630      	mov	r0, r6
 802292e:	f000 f879 	bl	8022a24 <_printf_i>
 8022932:	e7e4      	b.n	80228fe <_vfiprintf_r+0x1e6>
 8022934:	0802305c 	.word	0x0802305c
 8022938:	08023066 	.word	0x08023066
 802293c:	00000000 	.word	0x00000000
 8022940:	080226f3 	.word	0x080226f3
 8022944:	08023062 	.word	0x08023062

08022948 <_printf_common>:
 8022948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802294c:	4616      	mov	r6, r2
 802294e:	4698      	mov	r8, r3
 8022950:	688a      	ldr	r2, [r1, #8]
 8022952:	690b      	ldr	r3, [r1, #16]
 8022954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022958:	4293      	cmp	r3, r2
 802295a:	bfb8      	it	lt
 802295c:	4613      	movlt	r3, r2
 802295e:	6033      	str	r3, [r6, #0]
 8022960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022964:	4607      	mov	r7, r0
 8022966:	460c      	mov	r4, r1
 8022968:	b10a      	cbz	r2, 802296e <_printf_common+0x26>
 802296a:	3301      	adds	r3, #1
 802296c:	6033      	str	r3, [r6, #0]
 802296e:	6823      	ldr	r3, [r4, #0]
 8022970:	0699      	lsls	r1, r3, #26
 8022972:	bf42      	ittt	mi
 8022974:	6833      	ldrmi	r3, [r6, #0]
 8022976:	3302      	addmi	r3, #2
 8022978:	6033      	strmi	r3, [r6, #0]
 802297a:	6825      	ldr	r5, [r4, #0]
 802297c:	f015 0506 	ands.w	r5, r5, #6
 8022980:	d106      	bne.n	8022990 <_printf_common+0x48>
 8022982:	f104 0a19 	add.w	sl, r4, #25
 8022986:	68e3      	ldr	r3, [r4, #12]
 8022988:	6832      	ldr	r2, [r6, #0]
 802298a:	1a9b      	subs	r3, r3, r2
 802298c:	42ab      	cmp	r3, r5
 802298e:	dc26      	bgt.n	80229de <_printf_common+0x96>
 8022990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022994:	6822      	ldr	r2, [r4, #0]
 8022996:	3b00      	subs	r3, #0
 8022998:	bf18      	it	ne
 802299a:	2301      	movne	r3, #1
 802299c:	0692      	lsls	r2, r2, #26
 802299e:	d42b      	bmi.n	80229f8 <_printf_common+0xb0>
 80229a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80229a4:	4641      	mov	r1, r8
 80229a6:	4638      	mov	r0, r7
 80229a8:	47c8      	blx	r9
 80229aa:	3001      	adds	r0, #1
 80229ac:	d01e      	beq.n	80229ec <_printf_common+0xa4>
 80229ae:	6823      	ldr	r3, [r4, #0]
 80229b0:	6922      	ldr	r2, [r4, #16]
 80229b2:	f003 0306 	and.w	r3, r3, #6
 80229b6:	2b04      	cmp	r3, #4
 80229b8:	bf02      	ittt	eq
 80229ba:	68e5      	ldreq	r5, [r4, #12]
 80229bc:	6833      	ldreq	r3, [r6, #0]
 80229be:	1aed      	subeq	r5, r5, r3
 80229c0:	68a3      	ldr	r3, [r4, #8]
 80229c2:	bf0c      	ite	eq
 80229c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80229c8:	2500      	movne	r5, #0
 80229ca:	4293      	cmp	r3, r2
 80229cc:	bfc4      	itt	gt
 80229ce:	1a9b      	subgt	r3, r3, r2
 80229d0:	18ed      	addgt	r5, r5, r3
 80229d2:	2600      	movs	r6, #0
 80229d4:	341a      	adds	r4, #26
 80229d6:	42b5      	cmp	r5, r6
 80229d8:	d11a      	bne.n	8022a10 <_printf_common+0xc8>
 80229da:	2000      	movs	r0, #0
 80229dc:	e008      	b.n	80229f0 <_printf_common+0xa8>
 80229de:	2301      	movs	r3, #1
 80229e0:	4652      	mov	r2, sl
 80229e2:	4641      	mov	r1, r8
 80229e4:	4638      	mov	r0, r7
 80229e6:	47c8      	blx	r9
 80229e8:	3001      	adds	r0, #1
 80229ea:	d103      	bne.n	80229f4 <_printf_common+0xac>
 80229ec:	f04f 30ff 	mov.w	r0, #4294967295
 80229f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229f4:	3501      	adds	r5, #1
 80229f6:	e7c6      	b.n	8022986 <_printf_common+0x3e>
 80229f8:	18e1      	adds	r1, r4, r3
 80229fa:	1c5a      	adds	r2, r3, #1
 80229fc:	2030      	movs	r0, #48	@ 0x30
 80229fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022a02:	4422      	add	r2, r4
 8022a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022a0c:	3302      	adds	r3, #2
 8022a0e:	e7c7      	b.n	80229a0 <_printf_common+0x58>
 8022a10:	2301      	movs	r3, #1
 8022a12:	4622      	mov	r2, r4
 8022a14:	4641      	mov	r1, r8
 8022a16:	4638      	mov	r0, r7
 8022a18:	47c8      	blx	r9
 8022a1a:	3001      	adds	r0, #1
 8022a1c:	d0e6      	beq.n	80229ec <_printf_common+0xa4>
 8022a1e:	3601      	adds	r6, #1
 8022a20:	e7d9      	b.n	80229d6 <_printf_common+0x8e>
	...

08022a24 <_printf_i>:
 8022a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022a28:	7e0f      	ldrb	r7, [r1, #24]
 8022a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022a2c:	2f78      	cmp	r7, #120	@ 0x78
 8022a2e:	4691      	mov	r9, r2
 8022a30:	4680      	mov	r8, r0
 8022a32:	460c      	mov	r4, r1
 8022a34:	469a      	mov	sl, r3
 8022a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022a3a:	d807      	bhi.n	8022a4c <_printf_i+0x28>
 8022a3c:	2f62      	cmp	r7, #98	@ 0x62
 8022a3e:	d80a      	bhi.n	8022a56 <_printf_i+0x32>
 8022a40:	2f00      	cmp	r7, #0
 8022a42:	f000 80d2 	beq.w	8022bea <_printf_i+0x1c6>
 8022a46:	2f58      	cmp	r7, #88	@ 0x58
 8022a48:	f000 80b9 	beq.w	8022bbe <_printf_i+0x19a>
 8022a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022a54:	e03a      	b.n	8022acc <_printf_i+0xa8>
 8022a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022a5a:	2b15      	cmp	r3, #21
 8022a5c:	d8f6      	bhi.n	8022a4c <_printf_i+0x28>
 8022a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8022a64 <_printf_i+0x40>)
 8022a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022a64:	08022abd 	.word	0x08022abd
 8022a68:	08022ad1 	.word	0x08022ad1
 8022a6c:	08022a4d 	.word	0x08022a4d
 8022a70:	08022a4d 	.word	0x08022a4d
 8022a74:	08022a4d 	.word	0x08022a4d
 8022a78:	08022a4d 	.word	0x08022a4d
 8022a7c:	08022ad1 	.word	0x08022ad1
 8022a80:	08022a4d 	.word	0x08022a4d
 8022a84:	08022a4d 	.word	0x08022a4d
 8022a88:	08022a4d 	.word	0x08022a4d
 8022a8c:	08022a4d 	.word	0x08022a4d
 8022a90:	08022bd1 	.word	0x08022bd1
 8022a94:	08022afb 	.word	0x08022afb
 8022a98:	08022b8b 	.word	0x08022b8b
 8022a9c:	08022a4d 	.word	0x08022a4d
 8022aa0:	08022a4d 	.word	0x08022a4d
 8022aa4:	08022bf3 	.word	0x08022bf3
 8022aa8:	08022a4d 	.word	0x08022a4d
 8022aac:	08022afb 	.word	0x08022afb
 8022ab0:	08022a4d 	.word	0x08022a4d
 8022ab4:	08022a4d 	.word	0x08022a4d
 8022ab8:	08022b93 	.word	0x08022b93
 8022abc:	6833      	ldr	r3, [r6, #0]
 8022abe:	1d1a      	adds	r2, r3, #4
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	6032      	str	r2, [r6, #0]
 8022ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022acc:	2301      	movs	r3, #1
 8022ace:	e09d      	b.n	8022c0c <_printf_i+0x1e8>
 8022ad0:	6833      	ldr	r3, [r6, #0]
 8022ad2:	6820      	ldr	r0, [r4, #0]
 8022ad4:	1d19      	adds	r1, r3, #4
 8022ad6:	6031      	str	r1, [r6, #0]
 8022ad8:	0606      	lsls	r6, r0, #24
 8022ada:	d501      	bpl.n	8022ae0 <_printf_i+0xbc>
 8022adc:	681d      	ldr	r5, [r3, #0]
 8022ade:	e003      	b.n	8022ae8 <_printf_i+0xc4>
 8022ae0:	0645      	lsls	r5, r0, #25
 8022ae2:	d5fb      	bpl.n	8022adc <_printf_i+0xb8>
 8022ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022ae8:	2d00      	cmp	r5, #0
 8022aea:	da03      	bge.n	8022af4 <_printf_i+0xd0>
 8022aec:	232d      	movs	r3, #45	@ 0x2d
 8022aee:	426d      	negs	r5, r5
 8022af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022af4:	4859      	ldr	r0, [pc, #356]	@ (8022c5c <_printf_i+0x238>)
 8022af6:	230a      	movs	r3, #10
 8022af8:	e011      	b.n	8022b1e <_printf_i+0xfa>
 8022afa:	6821      	ldr	r1, [r4, #0]
 8022afc:	6833      	ldr	r3, [r6, #0]
 8022afe:	0608      	lsls	r0, r1, #24
 8022b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8022b04:	d402      	bmi.n	8022b0c <_printf_i+0xe8>
 8022b06:	0649      	lsls	r1, r1, #25
 8022b08:	bf48      	it	mi
 8022b0a:	b2ad      	uxthmi	r5, r5
 8022b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8022b0e:	4853      	ldr	r0, [pc, #332]	@ (8022c5c <_printf_i+0x238>)
 8022b10:	6033      	str	r3, [r6, #0]
 8022b12:	bf14      	ite	ne
 8022b14:	230a      	movne	r3, #10
 8022b16:	2308      	moveq	r3, #8
 8022b18:	2100      	movs	r1, #0
 8022b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022b1e:	6866      	ldr	r6, [r4, #4]
 8022b20:	60a6      	str	r6, [r4, #8]
 8022b22:	2e00      	cmp	r6, #0
 8022b24:	bfa2      	ittt	ge
 8022b26:	6821      	ldrge	r1, [r4, #0]
 8022b28:	f021 0104 	bicge.w	r1, r1, #4
 8022b2c:	6021      	strge	r1, [r4, #0]
 8022b2e:	b90d      	cbnz	r5, 8022b34 <_printf_i+0x110>
 8022b30:	2e00      	cmp	r6, #0
 8022b32:	d04b      	beq.n	8022bcc <_printf_i+0x1a8>
 8022b34:	4616      	mov	r6, r2
 8022b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8022b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8022b3e:	5dc7      	ldrb	r7, [r0, r7]
 8022b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022b44:	462f      	mov	r7, r5
 8022b46:	42bb      	cmp	r3, r7
 8022b48:	460d      	mov	r5, r1
 8022b4a:	d9f4      	bls.n	8022b36 <_printf_i+0x112>
 8022b4c:	2b08      	cmp	r3, #8
 8022b4e:	d10b      	bne.n	8022b68 <_printf_i+0x144>
 8022b50:	6823      	ldr	r3, [r4, #0]
 8022b52:	07df      	lsls	r7, r3, #31
 8022b54:	d508      	bpl.n	8022b68 <_printf_i+0x144>
 8022b56:	6923      	ldr	r3, [r4, #16]
 8022b58:	6861      	ldr	r1, [r4, #4]
 8022b5a:	4299      	cmp	r1, r3
 8022b5c:	bfde      	ittt	le
 8022b5e:	2330      	movle	r3, #48	@ 0x30
 8022b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022b68:	1b92      	subs	r2, r2, r6
 8022b6a:	6122      	str	r2, [r4, #16]
 8022b6c:	f8cd a000 	str.w	sl, [sp]
 8022b70:	464b      	mov	r3, r9
 8022b72:	aa03      	add	r2, sp, #12
 8022b74:	4621      	mov	r1, r4
 8022b76:	4640      	mov	r0, r8
 8022b78:	f7ff fee6 	bl	8022948 <_printf_common>
 8022b7c:	3001      	adds	r0, #1
 8022b7e:	d14a      	bne.n	8022c16 <_printf_i+0x1f2>
 8022b80:	f04f 30ff 	mov.w	r0, #4294967295
 8022b84:	b004      	add	sp, #16
 8022b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b8a:	6823      	ldr	r3, [r4, #0]
 8022b8c:	f043 0320 	orr.w	r3, r3, #32
 8022b90:	6023      	str	r3, [r4, #0]
 8022b92:	4833      	ldr	r0, [pc, #204]	@ (8022c60 <_printf_i+0x23c>)
 8022b94:	2778      	movs	r7, #120	@ 0x78
 8022b96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022b9a:	6823      	ldr	r3, [r4, #0]
 8022b9c:	6831      	ldr	r1, [r6, #0]
 8022b9e:	061f      	lsls	r7, r3, #24
 8022ba0:	f851 5b04 	ldr.w	r5, [r1], #4
 8022ba4:	d402      	bmi.n	8022bac <_printf_i+0x188>
 8022ba6:	065f      	lsls	r7, r3, #25
 8022ba8:	bf48      	it	mi
 8022baa:	b2ad      	uxthmi	r5, r5
 8022bac:	6031      	str	r1, [r6, #0]
 8022bae:	07d9      	lsls	r1, r3, #31
 8022bb0:	bf44      	itt	mi
 8022bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8022bb6:	6023      	strmi	r3, [r4, #0]
 8022bb8:	b11d      	cbz	r5, 8022bc2 <_printf_i+0x19e>
 8022bba:	2310      	movs	r3, #16
 8022bbc:	e7ac      	b.n	8022b18 <_printf_i+0xf4>
 8022bbe:	4827      	ldr	r0, [pc, #156]	@ (8022c5c <_printf_i+0x238>)
 8022bc0:	e7e9      	b.n	8022b96 <_printf_i+0x172>
 8022bc2:	6823      	ldr	r3, [r4, #0]
 8022bc4:	f023 0320 	bic.w	r3, r3, #32
 8022bc8:	6023      	str	r3, [r4, #0]
 8022bca:	e7f6      	b.n	8022bba <_printf_i+0x196>
 8022bcc:	4616      	mov	r6, r2
 8022bce:	e7bd      	b.n	8022b4c <_printf_i+0x128>
 8022bd0:	6833      	ldr	r3, [r6, #0]
 8022bd2:	6825      	ldr	r5, [r4, #0]
 8022bd4:	6961      	ldr	r1, [r4, #20]
 8022bd6:	1d18      	adds	r0, r3, #4
 8022bd8:	6030      	str	r0, [r6, #0]
 8022bda:	062e      	lsls	r6, r5, #24
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	d501      	bpl.n	8022be4 <_printf_i+0x1c0>
 8022be0:	6019      	str	r1, [r3, #0]
 8022be2:	e002      	b.n	8022bea <_printf_i+0x1c6>
 8022be4:	0668      	lsls	r0, r5, #25
 8022be6:	d5fb      	bpl.n	8022be0 <_printf_i+0x1bc>
 8022be8:	8019      	strh	r1, [r3, #0]
 8022bea:	2300      	movs	r3, #0
 8022bec:	6123      	str	r3, [r4, #16]
 8022bee:	4616      	mov	r6, r2
 8022bf0:	e7bc      	b.n	8022b6c <_printf_i+0x148>
 8022bf2:	6833      	ldr	r3, [r6, #0]
 8022bf4:	1d1a      	adds	r2, r3, #4
 8022bf6:	6032      	str	r2, [r6, #0]
 8022bf8:	681e      	ldr	r6, [r3, #0]
 8022bfa:	6862      	ldr	r2, [r4, #4]
 8022bfc:	2100      	movs	r1, #0
 8022bfe:	4630      	mov	r0, r6
 8022c00:	f7fd faee 	bl	80201e0 <memchr>
 8022c04:	b108      	cbz	r0, 8022c0a <_printf_i+0x1e6>
 8022c06:	1b80      	subs	r0, r0, r6
 8022c08:	6060      	str	r0, [r4, #4]
 8022c0a:	6863      	ldr	r3, [r4, #4]
 8022c0c:	6123      	str	r3, [r4, #16]
 8022c0e:	2300      	movs	r3, #0
 8022c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022c14:	e7aa      	b.n	8022b6c <_printf_i+0x148>
 8022c16:	6923      	ldr	r3, [r4, #16]
 8022c18:	4632      	mov	r2, r6
 8022c1a:	4649      	mov	r1, r9
 8022c1c:	4640      	mov	r0, r8
 8022c1e:	47d0      	blx	sl
 8022c20:	3001      	adds	r0, #1
 8022c22:	d0ad      	beq.n	8022b80 <_printf_i+0x15c>
 8022c24:	6823      	ldr	r3, [r4, #0]
 8022c26:	079b      	lsls	r3, r3, #30
 8022c28:	d413      	bmi.n	8022c52 <_printf_i+0x22e>
 8022c2a:	68e0      	ldr	r0, [r4, #12]
 8022c2c:	9b03      	ldr	r3, [sp, #12]
 8022c2e:	4298      	cmp	r0, r3
 8022c30:	bfb8      	it	lt
 8022c32:	4618      	movlt	r0, r3
 8022c34:	e7a6      	b.n	8022b84 <_printf_i+0x160>
 8022c36:	2301      	movs	r3, #1
 8022c38:	4632      	mov	r2, r6
 8022c3a:	4649      	mov	r1, r9
 8022c3c:	4640      	mov	r0, r8
 8022c3e:	47d0      	blx	sl
 8022c40:	3001      	adds	r0, #1
 8022c42:	d09d      	beq.n	8022b80 <_printf_i+0x15c>
 8022c44:	3501      	adds	r5, #1
 8022c46:	68e3      	ldr	r3, [r4, #12]
 8022c48:	9903      	ldr	r1, [sp, #12]
 8022c4a:	1a5b      	subs	r3, r3, r1
 8022c4c:	42ab      	cmp	r3, r5
 8022c4e:	dcf2      	bgt.n	8022c36 <_printf_i+0x212>
 8022c50:	e7eb      	b.n	8022c2a <_printf_i+0x206>
 8022c52:	2500      	movs	r5, #0
 8022c54:	f104 0619 	add.w	r6, r4, #25
 8022c58:	e7f5      	b.n	8022c46 <_printf_i+0x222>
 8022c5a:	bf00      	nop
 8022c5c:	0802306d 	.word	0x0802306d
 8022c60:	0802307e 	.word	0x0802307e

08022c64 <__sflush_r>:
 8022c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c6c:	0716      	lsls	r6, r2, #28
 8022c6e:	4605      	mov	r5, r0
 8022c70:	460c      	mov	r4, r1
 8022c72:	d454      	bmi.n	8022d1e <__sflush_r+0xba>
 8022c74:	684b      	ldr	r3, [r1, #4]
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	dc02      	bgt.n	8022c80 <__sflush_r+0x1c>
 8022c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	dd48      	ble.n	8022d12 <__sflush_r+0xae>
 8022c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c82:	2e00      	cmp	r6, #0
 8022c84:	d045      	beq.n	8022d12 <__sflush_r+0xae>
 8022c86:	2300      	movs	r3, #0
 8022c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022c8c:	682f      	ldr	r7, [r5, #0]
 8022c8e:	6a21      	ldr	r1, [r4, #32]
 8022c90:	602b      	str	r3, [r5, #0]
 8022c92:	d030      	beq.n	8022cf6 <__sflush_r+0x92>
 8022c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022c96:	89a3      	ldrh	r3, [r4, #12]
 8022c98:	0759      	lsls	r1, r3, #29
 8022c9a:	d505      	bpl.n	8022ca8 <__sflush_r+0x44>
 8022c9c:	6863      	ldr	r3, [r4, #4]
 8022c9e:	1ad2      	subs	r2, r2, r3
 8022ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022ca2:	b10b      	cbz	r3, 8022ca8 <__sflush_r+0x44>
 8022ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022ca6:	1ad2      	subs	r2, r2, r3
 8022ca8:	2300      	movs	r3, #0
 8022caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022cac:	6a21      	ldr	r1, [r4, #32]
 8022cae:	4628      	mov	r0, r5
 8022cb0:	47b0      	blx	r6
 8022cb2:	1c43      	adds	r3, r0, #1
 8022cb4:	89a3      	ldrh	r3, [r4, #12]
 8022cb6:	d106      	bne.n	8022cc6 <__sflush_r+0x62>
 8022cb8:	6829      	ldr	r1, [r5, #0]
 8022cba:	291d      	cmp	r1, #29
 8022cbc:	d82b      	bhi.n	8022d16 <__sflush_r+0xb2>
 8022cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8022d68 <__sflush_r+0x104>)
 8022cc0:	410a      	asrs	r2, r1
 8022cc2:	07d6      	lsls	r6, r2, #31
 8022cc4:	d427      	bmi.n	8022d16 <__sflush_r+0xb2>
 8022cc6:	2200      	movs	r2, #0
 8022cc8:	6062      	str	r2, [r4, #4]
 8022cca:	04d9      	lsls	r1, r3, #19
 8022ccc:	6922      	ldr	r2, [r4, #16]
 8022cce:	6022      	str	r2, [r4, #0]
 8022cd0:	d504      	bpl.n	8022cdc <__sflush_r+0x78>
 8022cd2:	1c42      	adds	r2, r0, #1
 8022cd4:	d101      	bne.n	8022cda <__sflush_r+0x76>
 8022cd6:	682b      	ldr	r3, [r5, #0]
 8022cd8:	b903      	cbnz	r3, 8022cdc <__sflush_r+0x78>
 8022cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8022cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022cde:	602f      	str	r7, [r5, #0]
 8022ce0:	b1b9      	cbz	r1, 8022d12 <__sflush_r+0xae>
 8022ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022ce6:	4299      	cmp	r1, r3
 8022ce8:	d002      	beq.n	8022cf0 <__sflush_r+0x8c>
 8022cea:	4628      	mov	r0, r5
 8022cec:	f7ff fbf2 	bl	80224d4 <_free_r>
 8022cf0:	2300      	movs	r3, #0
 8022cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8022cf4:	e00d      	b.n	8022d12 <__sflush_r+0xae>
 8022cf6:	2301      	movs	r3, #1
 8022cf8:	4628      	mov	r0, r5
 8022cfa:	47b0      	blx	r6
 8022cfc:	4602      	mov	r2, r0
 8022cfe:	1c50      	adds	r0, r2, #1
 8022d00:	d1c9      	bne.n	8022c96 <__sflush_r+0x32>
 8022d02:	682b      	ldr	r3, [r5, #0]
 8022d04:	2b00      	cmp	r3, #0
 8022d06:	d0c6      	beq.n	8022c96 <__sflush_r+0x32>
 8022d08:	2b1d      	cmp	r3, #29
 8022d0a:	d001      	beq.n	8022d10 <__sflush_r+0xac>
 8022d0c:	2b16      	cmp	r3, #22
 8022d0e:	d11e      	bne.n	8022d4e <__sflush_r+0xea>
 8022d10:	602f      	str	r7, [r5, #0]
 8022d12:	2000      	movs	r0, #0
 8022d14:	e022      	b.n	8022d5c <__sflush_r+0xf8>
 8022d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022d1a:	b21b      	sxth	r3, r3
 8022d1c:	e01b      	b.n	8022d56 <__sflush_r+0xf2>
 8022d1e:	690f      	ldr	r7, [r1, #16]
 8022d20:	2f00      	cmp	r7, #0
 8022d22:	d0f6      	beq.n	8022d12 <__sflush_r+0xae>
 8022d24:	0793      	lsls	r3, r2, #30
 8022d26:	680e      	ldr	r6, [r1, #0]
 8022d28:	bf08      	it	eq
 8022d2a:	694b      	ldreq	r3, [r1, #20]
 8022d2c:	600f      	str	r7, [r1, #0]
 8022d2e:	bf18      	it	ne
 8022d30:	2300      	movne	r3, #0
 8022d32:	eba6 0807 	sub.w	r8, r6, r7
 8022d36:	608b      	str	r3, [r1, #8]
 8022d38:	f1b8 0f00 	cmp.w	r8, #0
 8022d3c:	dde9      	ble.n	8022d12 <__sflush_r+0xae>
 8022d3e:	6a21      	ldr	r1, [r4, #32]
 8022d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022d42:	4643      	mov	r3, r8
 8022d44:	463a      	mov	r2, r7
 8022d46:	4628      	mov	r0, r5
 8022d48:	47b0      	blx	r6
 8022d4a:	2800      	cmp	r0, #0
 8022d4c:	dc08      	bgt.n	8022d60 <__sflush_r+0xfc>
 8022d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022d56:	81a3      	strh	r3, [r4, #12]
 8022d58:	f04f 30ff 	mov.w	r0, #4294967295
 8022d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d60:	4407      	add	r7, r0
 8022d62:	eba8 0800 	sub.w	r8, r8, r0
 8022d66:	e7e7      	b.n	8022d38 <__sflush_r+0xd4>
 8022d68:	dfbffffe 	.word	0xdfbffffe

08022d6c <_fflush_r>:
 8022d6c:	b538      	push	{r3, r4, r5, lr}
 8022d6e:	690b      	ldr	r3, [r1, #16]
 8022d70:	4605      	mov	r5, r0
 8022d72:	460c      	mov	r4, r1
 8022d74:	b913      	cbnz	r3, 8022d7c <_fflush_r+0x10>
 8022d76:	2500      	movs	r5, #0
 8022d78:	4628      	mov	r0, r5
 8022d7a:	bd38      	pop	{r3, r4, r5, pc}
 8022d7c:	b118      	cbz	r0, 8022d86 <_fflush_r+0x1a>
 8022d7e:	6a03      	ldr	r3, [r0, #32]
 8022d80:	b90b      	cbnz	r3, 8022d86 <_fflush_r+0x1a>
 8022d82:	f7ff fa9f 	bl	80222c4 <__sinit>
 8022d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d0f3      	beq.n	8022d76 <_fflush_r+0xa>
 8022d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022d90:	07d0      	lsls	r0, r2, #31
 8022d92:	d404      	bmi.n	8022d9e <_fflush_r+0x32>
 8022d94:	0599      	lsls	r1, r3, #22
 8022d96:	d402      	bmi.n	8022d9e <_fflush_r+0x32>
 8022d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d9a:	f7ff fb98 	bl	80224ce <__retarget_lock_acquire_recursive>
 8022d9e:	4628      	mov	r0, r5
 8022da0:	4621      	mov	r1, r4
 8022da2:	f7ff ff5f 	bl	8022c64 <__sflush_r>
 8022da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022da8:	07da      	lsls	r2, r3, #31
 8022daa:	4605      	mov	r5, r0
 8022dac:	d4e4      	bmi.n	8022d78 <_fflush_r+0xc>
 8022dae:	89a3      	ldrh	r3, [r4, #12]
 8022db0:	059b      	lsls	r3, r3, #22
 8022db2:	d4e1      	bmi.n	8022d78 <_fflush_r+0xc>
 8022db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022db6:	f7ff fb8b 	bl	80224d0 <__retarget_lock_release_recursive>
 8022dba:	e7dd      	b.n	8022d78 <_fflush_r+0xc>

08022dbc <__swbuf_r>:
 8022dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dbe:	460e      	mov	r6, r1
 8022dc0:	4614      	mov	r4, r2
 8022dc2:	4605      	mov	r5, r0
 8022dc4:	b118      	cbz	r0, 8022dce <__swbuf_r+0x12>
 8022dc6:	6a03      	ldr	r3, [r0, #32]
 8022dc8:	b90b      	cbnz	r3, 8022dce <__swbuf_r+0x12>
 8022dca:	f7ff fa7b 	bl	80222c4 <__sinit>
 8022dce:	69a3      	ldr	r3, [r4, #24]
 8022dd0:	60a3      	str	r3, [r4, #8]
 8022dd2:	89a3      	ldrh	r3, [r4, #12]
 8022dd4:	071a      	lsls	r2, r3, #28
 8022dd6:	d501      	bpl.n	8022ddc <__swbuf_r+0x20>
 8022dd8:	6923      	ldr	r3, [r4, #16]
 8022dda:	b943      	cbnz	r3, 8022dee <__swbuf_r+0x32>
 8022ddc:	4621      	mov	r1, r4
 8022dde:	4628      	mov	r0, r5
 8022de0:	f000 f82a 	bl	8022e38 <__swsetup_r>
 8022de4:	b118      	cbz	r0, 8022dee <__swbuf_r+0x32>
 8022de6:	f04f 37ff 	mov.w	r7, #4294967295
 8022dea:	4638      	mov	r0, r7
 8022dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022dee:	6823      	ldr	r3, [r4, #0]
 8022df0:	6922      	ldr	r2, [r4, #16]
 8022df2:	1a98      	subs	r0, r3, r2
 8022df4:	6963      	ldr	r3, [r4, #20]
 8022df6:	b2f6      	uxtb	r6, r6
 8022df8:	4283      	cmp	r3, r0
 8022dfa:	4637      	mov	r7, r6
 8022dfc:	dc05      	bgt.n	8022e0a <__swbuf_r+0x4e>
 8022dfe:	4621      	mov	r1, r4
 8022e00:	4628      	mov	r0, r5
 8022e02:	f7ff ffb3 	bl	8022d6c <_fflush_r>
 8022e06:	2800      	cmp	r0, #0
 8022e08:	d1ed      	bne.n	8022de6 <__swbuf_r+0x2a>
 8022e0a:	68a3      	ldr	r3, [r4, #8]
 8022e0c:	3b01      	subs	r3, #1
 8022e0e:	60a3      	str	r3, [r4, #8]
 8022e10:	6823      	ldr	r3, [r4, #0]
 8022e12:	1c5a      	adds	r2, r3, #1
 8022e14:	6022      	str	r2, [r4, #0]
 8022e16:	701e      	strb	r6, [r3, #0]
 8022e18:	6962      	ldr	r2, [r4, #20]
 8022e1a:	1c43      	adds	r3, r0, #1
 8022e1c:	429a      	cmp	r2, r3
 8022e1e:	d004      	beq.n	8022e2a <__swbuf_r+0x6e>
 8022e20:	89a3      	ldrh	r3, [r4, #12]
 8022e22:	07db      	lsls	r3, r3, #31
 8022e24:	d5e1      	bpl.n	8022dea <__swbuf_r+0x2e>
 8022e26:	2e0a      	cmp	r6, #10
 8022e28:	d1df      	bne.n	8022dea <__swbuf_r+0x2e>
 8022e2a:	4621      	mov	r1, r4
 8022e2c:	4628      	mov	r0, r5
 8022e2e:	f7ff ff9d 	bl	8022d6c <_fflush_r>
 8022e32:	2800      	cmp	r0, #0
 8022e34:	d0d9      	beq.n	8022dea <__swbuf_r+0x2e>
 8022e36:	e7d6      	b.n	8022de6 <__swbuf_r+0x2a>

08022e38 <__swsetup_r>:
 8022e38:	b538      	push	{r3, r4, r5, lr}
 8022e3a:	4b29      	ldr	r3, [pc, #164]	@ (8022ee0 <__swsetup_r+0xa8>)
 8022e3c:	4605      	mov	r5, r0
 8022e3e:	6818      	ldr	r0, [r3, #0]
 8022e40:	460c      	mov	r4, r1
 8022e42:	b118      	cbz	r0, 8022e4c <__swsetup_r+0x14>
 8022e44:	6a03      	ldr	r3, [r0, #32]
 8022e46:	b90b      	cbnz	r3, 8022e4c <__swsetup_r+0x14>
 8022e48:	f7ff fa3c 	bl	80222c4 <__sinit>
 8022e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e50:	0719      	lsls	r1, r3, #28
 8022e52:	d422      	bmi.n	8022e9a <__swsetup_r+0x62>
 8022e54:	06da      	lsls	r2, r3, #27
 8022e56:	d407      	bmi.n	8022e68 <__swsetup_r+0x30>
 8022e58:	2209      	movs	r2, #9
 8022e5a:	602a      	str	r2, [r5, #0]
 8022e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022e60:	81a3      	strh	r3, [r4, #12]
 8022e62:	f04f 30ff 	mov.w	r0, #4294967295
 8022e66:	e033      	b.n	8022ed0 <__swsetup_r+0x98>
 8022e68:	0758      	lsls	r0, r3, #29
 8022e6a:	d512      	bpl.n	8022e92 <__swsetup_r+0x5a>
 8022e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022e6e:	b141      	cbz	r1, 8022e82 <__swsetup_r+0x4a>
 8022e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022e74:	4299      	cmp	r1, r3
 8022e76:	d002      	beq.n	8022e7e <__swsetup_r+0x46>
 8022e78:	4628      	mov	r0, r5
 8022e7a:	f7ff fb2b 	bl	80224d4 <_free_r>
 8022e7e:	2300      	movs	r3, #0
 8022e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8022e82:	89a3      	ldrh	r3, [r4, #12]
 8022e84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022e88:	81a3      	strh	r3, [r4, #12]
 8022e8a:	2300      	movs	r3, #0
 8022e8c:	6063      	str	r3, [r4, #4]
 8022e8e:	6923      	ldr	r3, [r4, #16]
 8022e90:	6023      	str	r3, [r4, #0]
 8022e92:	89a3      	ldrh	r3, [r4, #12]
 8022e94:	f043 0308 	orr.w	r3, r3, #8
 8022e98:	81a3      	strh	r3, [r4, #12]
 8022e9a:	6923      	ldr	r3, [r4, #16]
 8022e9c:	b94b      	cbnz	r3, 8022eb2 <__swsetup_r+0x7a>
 8022e9e:	89a3      	ldrh	r3, [r4, #12]
 8022ea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022ea8:	d003      	beq.n	8022eb2 <__swsetup_r+0x7a>
 8022eaa:	4621      	mov	r1, r4
 8022eac:	4628      	mov	r0, r5
 8022eae:	f000 f84f 	bl	8022f50 <__smakebuf_r>
 8022eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022eb6:	f013 0201 	ands.w	r2, r3, #1
 8022eba:	d00a      	beq.n	8022ed2 <__swsetup_r+0x9a>
 8022ebc:	2200      	movs	r2, #0
 8022ebe:	60a2      	str	r2, [r4, #8]
 8022ec0:	6962      	ldr	r2, [r4, #20]
 8022ec2:	4252      	negs	r2, r2
 8022ec4:	61a2      	str	r2, [r4, #24]
 8022ec6:	6922      	ldr	r2, [r4, #16]
 8022ec8:	b942      	cbnz	r2, 8022edc <__swsetup_r+0xa4>
 8022eca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022ece:	d1c5      	bne.n	8022e5c <__swsetup_r+0x24>
 8022ed0:	bd38      	pop	{r3, r4, r5, pc}
 8022ed2:	0799      	lsls	r1, r3, #30
 8022ed4:	bf58      	it	pl
 8022ed6:	6962      	ldrpl	r2, [r4, #20]
 8022ed8:	60a2      	str	r2, [r4, #8]
 8022eda:	e7f4      	b.n	8022ec6 <__swsetup_r+0x8e>
 8022edc:	2000      	movs	r0, #0
 8022ede:	e7f7      	b.n	8022ed0 <__swsetup_r+0x98>
 8022ee0:	20000018 	.word	0x20000018

08022ee4 <_sbrk_r>:
 8022ee4:	b538      	push	{r3, r4, r5, lr}
 8022ee6:	4d06      	ldr	r5, [pc, #24]	@ (8022f00 <_sbrk_r+0x1c>)
 8022ee8:	2300      	movs	r3, #0
 8022eea:	4604      	mov	r4, r0
 8022eec:	4608      	mov	r0, r1
 8022eee:	602b      	str	r3, [r5, #0]
 8022ef0:	f7fd fd4e 	bl	8020990 <_sbrk>
 8022ef4:	1c43      	adds	r3, r0, #1
 8022ef6:	d102      	bne.n	8022efe <_sbrk_r+0x1a>
 8022ef8:	682b      	ldr	r3, [r5, #0]
 8022efa:	b103      	cbz	r3, 8022efe <_sbrk_r+0x1a>
 8022efc:	6023      	str	r3, [r4, #0]
 8022efe:	bd38      	pop	{r3, r4, r5, pc}
 8022f00:	20000210 	.word	0x20000210

08022f04 <__swhatbuf_r>:
 8022f04:	b570      	push	{r4, r5, r6, lr}
 8022f06:	460c      	mov	r4, r1
 8022f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f0c:	2900      	cmp	r1, #0
 8022f0e:	b096      	sub	sp, #88	@ 0x58
 8022f10:	4615      	mov	r5, r2
 8022f12:	461e      	mov	r6, r3
 8022f14:	da0d      	bge.n	8022f32 <__swhatbuf_r+0x2e>
 8022f16:	89a3      	ldrh	r3, [r4, #12]
 8022f18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022f1c:	f04f 0100 	mov.w	r1, #0
 8022f20:	bf14      	ite	ne
 8022f22:	2340      	movne	r3, #64	@ 0x40
 8022f24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022f28:	2000      	movs	r0, #0
 8022f2a:	6031      	str	r1, [r6, #0]
 8022f2c:	602b      	str	r3, [r5, #0]
 8022f2e:	b016      	add	sp, #88	@ 0x58
 8022f30:	bd70      	pop	{r4, r5, r6, pc}
 8022f32:	466a      	mov	r2, sp
 8022f34:	f000 f848 	bl	8022fc8 <_fstat_r>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	dbec      	blt.n	8022f16 <__swhatbuf_r+0x12>
 8022f3c:	9901      	ldr	r1, [sp, #4]
 8022f3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022f42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022f46:	4259      	negs	r1, r3
 8022f48:	4159      	adcs	r1, r3
 8022f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022f4e:	e7eb      	b.n	8022f28 <__swhatbuf_r+0x24>

08022f50 <__smakebuf_r>:
 8022f50:	898b      	ldrh	r3, [r1, #12]
 8022f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022f54:	079d      	lsls	r5, r3, #30
 8022f56:	4606      	mov	r6, r0
 8022f58:	460c      	mov	r4, r1
 8022f5a:	d507      	bpl.n	8022f6c <__smakebuf_r+0x1c>
 8022f5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022f60:	6023      	str	r3, [r4, #0]
 8022f62:	6123      	str	r3, [r4, #16]
 8022f64:	2301      	movs	r3, #1
 8022f66:	6163      	str	r3, [r4, #20]
 8022f68:	b003      	add	sp, #12
 8022f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f6c:	ab01      	add	r3, sp, #4
 8022f6e:	466a      	mov	r2, sp
 8022f70:	f7ff ffc8 	bl	8022f04 <__swhatbuf_r>
 8022f74:	9f00      	ldr	r7, [sp, #0]
 8022f76:	4605      	mov	r5, r0
 8022f78:	4639      	mov	r1, r7
 8022f7a:	4630      	mov	r0, r6
 8022f7c:	f7ff fb16 	bl	80225ac <_malloc_r>
 8022f80:	b948      	cbnz	r0, 8022f96 <__smakebuf_r+0x46>
 8022f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f86:	059a      	lsls	r2, r3, #22
 8022f88:	d4ee      	bmi.n	8022f68 <__smakebuf_r+0x18>
 8022f8a:	f023 0303 	bic.w	r3, r3, #3
 8022f8e:	f043 0302 	orr.w	r3, r3, #2
 8022f92:	81a3      	strh	r3, [r4, #12]
 8022f94:	e7e2      	b.n	8022f5c <__smakebuf_r+0xc>
 8022f96:	89a3      	ldrh	r3, [r4, #12]
 8022f98:	6020      	str	r0, [r4, #0]
 8022f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022f9e:	81a3      	strh	r3, [r4, #12]
 8022fa0:	9b01      	ldr	r3, [sp, #4]
 8022fa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022fa6:	b15b      	cbz	r3, 8022fc0 <__smakebuf_r+0x70>
 8022fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022fac:	4630      	mov	r0, r6
 8022fae:	f000 f81d 	bl	8022fec <_isatty_r>
 8022fb2:	b128      	cbz	r0, 8022fc0 <__smakebuf_r+0x70>
 8022fb4:	89a3      	ldrh	r3, [r4, #12]
 8022fb6:	f023 0303 	bic.w	r3, r3, #3
 8022fba:	f043 0301 	orr.w	r3, r3, #1
 8022fbe:	81a3      	strh	r3, [r4, #12]
 8022fc0:	89a3      	ldrh	r3, [r4, #12]
 8022fc2:	431d      	orrs	r5, r3
 8022fc4:	81a5      	strh	r5, [r4, #12]
 8022fc6:	e7cf      	b.n	8022f68 <__smakebuf_r+0x18>

08022fc8 <_fstat_r>:
 8022fc8:	b538      	push	{r3, r4, r5, lr}
 8022fca:	4d07      	ldr	r5, [pc, #28]	@ (8022fe8 <_fstat_r+0x20>)
 8022fcc:	2300      	movs	r3, #0
 8022fce:	4604      	mov	r4, r0
 8022fd0:	4608      	mov	r0, r1
 8022fd2:	4611      	mov	r1, r2
 8022fd4:	602b      	str	r3, [r5, #0]
 8022fd6:	f7fd fcb3 	bl	8020940 <_fstat>
 8022fda:	1c43      	adds	r3, r0, #1
 8022fdc:	d102      	bne.n	8022fe4 <_fstat_r+0x1c>
 8022fde:	682b      	ldr	r3, [r5, #0]
 8022fe0:	b103      	cbz	r3, 8022fe4 <_fstat_r+0x1c>
 8022fe2:	6023      	str	r3, [r4, #0]
 8022fe4:	bd38      	pop	{r3, r4, r5, pc}
 8022fe6:	bf00      	nop
 8022fe8:	20000210 	.word	0x20000210

08022fec <_isatty_r>:
 8022fec:	b538      	push	{r3, r4, r5, lr}
 8022fee:	4d06      	ldr	r5, [pc, #24]	@ (8023008 <_isatty_r+0x1c>)
 8022ff0:	2300      	movs	r3, #0
 8022ff2:	4604      	mov	r4, r0
 8022ff4:	4608      	mov	r0, r1
 8022ff6:	602b      	str	r3, [r5, #0]
 8022ff8:	f7fd fcb2 	bl	8020960 <_isatty>
 8022ffc:	1c43      	adds	r3, r0, #1
 8022ffe:	d102      	bne.n	8023006 <_isatty_r+0x1a>
 8023000:	682b      	ldr	r3, [r5, #0]
 8023002:	b103      	cbz	r3, 8023006 <_isatty_r+0x1a>
 8023004:	6023      	str	r3, [r4, #0]
 8023006:	bd38      	pop	{r3, r4, r5, pc}
 8023008:	20000210 	.word	0x20000210

0802300c <_init>:
 802300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802300e:	bf00      	nop
 8023010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023012:	bc08      	pop	{r3}
 8023014:	469e      	mov	lr, r3
 8023016:	4770      	bx	lr

08023018 <_fini>:
 8023018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802301a:	bf00      	nop
 802301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802301e:	bc08      	pop	{r3}
 8023020:	469e      	mov	lr, r3
 8023022:	4770      	bx	lr
